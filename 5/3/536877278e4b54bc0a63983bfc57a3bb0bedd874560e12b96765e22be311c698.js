![function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n="[WebEmarsysSDK]",s=r=(e,t)=>const a={trace:s,debug:s,info:s,warn:s,error:s,log:s},o={NoopLogFn:s,enableLogger:function(e,t=n){const i=["trace","debug","info","warn","error","log"];if(e)for(const e of i)a[e]=r(t,e);else for(const e of i)a[e]=s},SdkContext:n,SwContext:"[WebEmarsysSW]",Logger:a};t.default=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEVICE_REGISTRATION_STATUS_UNREGISTERED=t.DEVICE_REGISTRATION_STATUS_REGISTERED=t.KEY_DEVICE_REGISTRATION_STATUS=t.EVENT_ON_HIDE_NOTIFICATION_PERMISSION_DIALOG=t.EVENT_ON_SHOW_NOTIFICATION_PERMISSION_DIALOG=t.EVENT_ON_UPDATE_INBOX_MESSAGES=t.EVENT_ON_PUT_NEW_MESSAGE_TO_INBOX_STORE=t.EVENT_ON_PUSH_DELIVERY=t.EVENT_ON_SW_INIT_ERROR=t.EVENT_ON_PERMISSION_GRANTED=t.EVENT_ON_PERMISSION_DENIED=t.EVENT_ON_PERMISSION_PROMPT=t.EVENT_ON_UNSUBSCRIBE=t.EVENT_ON_SUBSCRIBE=t.EVENT_ON_READY=t.PERMISSION_PROMPT=t.PERMISSION_GRANTED=t.PERMISSION_DENIED=t.indexedDbVersion=t.indexedDbName=t.meCustomEvent=t.meOpen=t.meLogout=t.meLogin=t.lsKeyLastContactFieldId=t.lsKeyLastLoginToken=t.lsKeyLastLoginTime=t.dbKeyLastUsedAt=t.dbKeyLoggingEnabled=t.dbKeyTimezone=t.dbKeyLanguage=t.dbKeyOsVersion=t.dbKeyDeviceModel=t.dbKeyApplicationVersion=t.dbKeyPlatform=t.dbKeyContactFieldValue=t.dbKeyContactFieldId=t.dbKeyPushToken=t.dbKeyServiceWorkerVersion=t.dbKeySdkVersion=t.dbKeyRefreshToken=t.dbKeyContactToken=t.dbKeyXClientState=t.dbKeyBrowserIds=t.dbKeyBrowserId=t.dbKeyInitParams=t.dbKeyLastPermissionStatus=t.dbKeyPushPackageServiceUrl=t.dbKeyWebsitePushId=t.dbKeyApplicationServerPublicKey=t.dbKeyServiceWorkerScope=t.dbKeyServiceWorkerUrl=t.dbKeyMeDeviceEventServiceApiBaseUrl=t.dbKeyMeClientServiceApiBaseUrl=t.dbKeyApplicationCode=t.dbKeyDefaultNotificationIcon=t.dbKeyDefaultNotificationTitle=t.applicationPassword=t.pushActionsProperty=t.pushImageProperty=t.pushIconProperty=t.pushLinkProperty=t.pushTitleProperty=t.loginOverloadProtectionTime=t.defaultApplicationVersion=t.defaultSafariPushPackageServiceUrl=t.defaultDeviceEventServiceApiBaseUrl=t.defaultClientServiceApiBaseUrl=void 0,t.defaultClientServiceApiBaseUrl="https://me-client.eservice.emarsys.net/v3",t.defaultDeviceEventServiceApiBaseUrl="https://mobile-events.eservice.emarsys.net/v3",t.defaultSafariPushPackageServiceUrl="https://me-client.eservice.emarsys.net",t.defaultApplicationVersion="0.0.0",t.loginOverloadProtectionTime=36e5,t.pushTitleProperty="title",t.pushLinkProperty="link",t.pushIconProperty="icon",t.pushImageProperty="image",t.pushActionsProperty="actions",t.applicationPassword="not-used",t.dbKeyDefaultNotificationTitle="pushDefaultNotificationTitle",t.dbKeyDefaultNotificationIcon="pushDefaultNotificationIcon",t.dbKeyApplicationCode="emarsysApplicationCode",t.dbKeyMeClientServiceApiBaseUrl="meClientServiceApiBaseUrl",t.dbKeyMeDeviceEventServiceApiBaseUrl="meDeviceEventServiceApiBaseUrl",t.dbKeyServiceWorkerUrl="serviceWorkerUrl",t.dbKeyServiceWorkerScope="serviceWorkerScope",t.dbKeyApplicationServerPublicKey="applicationServerPublicKey",t.dbKeyWebsitePushId="websitePushId",t.dbKeyPushPackageServiceUrl="pushPackageServiceUrl",t.dbKeyLastPermissionStatus="lastPermissionStatus",t.dbKeyInitParams="initParams",t.dbKeyBrowserId="browserId",t.dbKeyBrowserIds="browserIds",t.dbKeyXClientState="xClientState",t.dbKeyContactToken="contactToken",t.dbKeyRefreshToken="refreshToken",t.dbKeySdkVersion="sdkVersion",t.dbKeyServiceWorkerVersion="serviceWorkerVersion",t.dbKeyPushToken="pushToken",t.dbKeyContactFieldId="contactFieldId",t.dbKeyContactFieldValue="contactFieldValue",t.dbKeyPlatform="platform",t.dbKeyApplicationVersion="applicationVersion",t.dbKeyDeviceModel="deviceModel",t.dbKeyOsVersion="osVersion",t.dbKeyLanguage="language",t.dbKeyTimezone="timezone",t.dbKeyLoggingEnabled="loggingEnabled",t.dbKeyLastUsedAt="lastUsedAt",t.lsKeyLastLoginTime="emarsysWebpushLastLoginTime",t.lsKeyLastLoginToken="emarsysWebpushLastLoginToken",t.lsKeyLastContactFieldId="emarsysWebpushLastContactFieldId",t.meLogin="/users/login",t.meLogout="/users/logout",t.meOpen="/events/message_open",t.meCustomEvent="/events/",t.indexedDbName="EMARSYS_WEBPUSH_STORE",t.indexedDbVersion=1,t.PERMISSION_DENIED="denied",t.PERMISSION_GRANTED="granted",t.PERMISSION_PROMPT="default",t.EVENT_ON_READY="onReady",t.EVENT_ON_SUBSCRIBE="onSubscribe",t.EVENT_ON_UNSUBSCRIBE="onUnsubscribe",t.EVENT_ON_PERMISSION_PROMPT="onPermissionPrompt",t.EVENT_ON_PERMISSION_DENIED="onPermissionDenied",t.EVENT_ON_PERMISSION_GRANTED="onPermissionGranted",t.EVENT_ON_SW_INIT_ERROR="onSWInitError",t.EVENT_ON_PUSH_DELIVERY="onPushDelivery",t.EVENT_ON_PUT_NEW_MESSAGE_TO_INBOX_STORE="onPutNewMessageToInboxStore",t.EVENT_ON_UPDATE_INBOX_MESSAGES="onUpdateInboxMessages",t.EVENT_ON_SHOW_NOTIFICATION_PERMISSION_DIALOG="onShowNotificationPermissionDialog",t.EVENT_ON_HIDE_NOTIFICATION_PERMISSION_DIALOG="onHideNotificationPermissionDialog",t.KEY_DEVICE_REGISTRATION_STATUS="registrationStatus",t.DEVICE_REGISTRATION_STATUS_REGISTERED="registered",t.DEVICE_REGISTRATION_STATUS_UNREGISTERED="unregistered"},function(e,t,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.hasOwnProperty.call(e,i)&&n(t,e,i);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.determineServiceWorkerScope=t.isEmptyObject=t.toContactInfo=t.isValidPayload=t.payloadMessageDataProperties=t.checkDevice=t.isDeviceRegistered=t.urlB64ToString=t.urlB64ToUint8Array=t.getGlobal=t.getVersion=void 0;const a=r(i(4));function o(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/");return atob(t)}async function c(e){if(!await e.getClientId())return{exists:!1};const t=await e.getClientState();if(!t)return{exists:!1};const i=a.decode(t);if(!i)return{exists:!1};return{exists:!0,pushTokenExists:null!==(i.pushToken||null),identified:null!==(i.contactField||null)}}t.getVersion=t.getGlobal=t.urlB64ToUint8Array=function(e){const t=o(e),i=new Uint8Array(t.length);for(let e=0;e<t.length;++e)i[e]=t.charCodeAt(e);return i},t.urlB64ToString=t.isDeviceRegistered=async function(e){const{exists:t,pushTokenExists:i}=await c(e);return t&&(void 0!==i&&i)},t.checkDevice=c,t.payloadMessageDataProperties={id:"string",sid:"string",applicationCode:"string",notificationSettings:"object"},t.isValidPayload=function(e){if("object"!=typeof e)return!1;const i=e.messageData;return!!i&&Object.keys(t.payloadMessageDataProperties).map((e=>!!i[e]&&typeof i[e]===t.payloadMessageDataProperties[e])).reduce((,!0)},t.toContactInfo=function(e){if(void 0!==e&&3===Object.keys(e).length)return e},t.isEmptyObject=e=>{if(null===e)return!0;if(void 0===e)return!0;for(const t in e)return!1;return!0},t.determineServiceWorkerScope=,function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageWithLog=void 0;const s=n(i(0)),{Logger:r}=s.default;t.StorageWithLog=class{og(e,t,i){const{level:n="error",message:s=t}=null!=i?i:{};return e||r[n](s),e}async getClientId(e){const t=await this.storage.getClientId();return this.log(t,"Error: No client ID set for the browser!",e)}async getContactToken(e){const t=await this.storage.getContactToken();return this.log(t,"Error: No contact token set!",e)}async getClientState(e){const t=await this.storage.getClientState();return this.log(t,"Error: No client state set!",e)}async getRefreshToken(e){const t=await this.storage.getRefreshToken();return this.log(t,"Unable to refresh contact token a refresh-token is missing!",e)}}},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.decode=void 0;const s=i(2),r=n(i(0));t.decode=function(e,t){const i=!0===(null!=t?t:{}).header?0:1;try{return JSON.parse(s.urlB64ToString(e.split(".")[i]))}catch(e){return r.default.Logger.error("Error decoding token",e),null}}},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MEDeviceEventService=void 0;const s=n(i(0)),r=i(3),{Logger:a}=s.default,o=[200,204];class c{constructor(e,t,i){this.storage=i,this.storageWithLog=new r.StorageWithLog(i),this.baseUrl=`${e}/apps`,this.desRequest=t}async postEvents(e){const t=await this.storageWithLog.getClientId(),i=await this.storageWithLog.getContactToken(),n=await this.storageWithLog.getClientState();if(!t||!i||!n)return{success:!1};const s=await this.apiEndpoint("client/events"),r=await this.desRequest.post(s,e,{clientId:t,clientState:n,contactToken:i});if(o.includes(r.status))return{success:!0,statusCode:r.status};{const e=await r.json();return a.warn("Error posting events to device event service",r.status,JSON.stringify(e)),{success:!1,statusCode:r.status}}}async apiEndpoint(e){const t=await this.storage.getAppCode();return`${this.baseUrl}/${t}/${e}`}static create(e,t,i){return new c(e,t,i)}}t.MEDeviceEventService=c},function(e,t,i){"use strict";var n=this&&this.__importDefault||Object.defineProperty(t,"__esModule",{value:!0}),t.MEClientService=void 0;const s=n(i(0)),r=i(3),{Logger:a}=s.default;class o{constructor(e,t,i){this.storage=i,this.storageWithLog=new r.StorageWithLog(i),this.baseUrl=`${e}/domains`,this.meClientServiceRequest=t}async storeClientDetails(){const e=await this.storageWithLog.getClientId();if(!e)return!1;const t=await this.apiEndpoint("client"),i=await this.storage.getClientState(),n=await this.getClientDetails(),s=await this.meClientServiceRequest.post(t,n,{clientId:e,clientState:i});if(204===s.status)return await this.saveClientState(s),!0;{const e=await s.json();return a.error("Error storing client info",s.status,JSON.stringify(e)),!1}}async linkClientToContact(e){const t=await this.storageWithLog.getClientId(),i=await this.storageWithLog.getClientState({level:"info"});if(!t||!i)return!1;const{anonymous:n,body:s}=this.toContactRequestBodyData(e),r=`${await this.apiEndpoint("client/contact")}${n?"?anonymous=true":""}`,o=await this.meClientServiceRequest.post(r,s,{clientId:t,clientState:i});if(200===o.status){await this.saveClientState(o);const e=await o.json();return e.contactToken&&e.refreshToken?(await Promise.all([this.storage.setContactToken(e.contactToken),this.storage.setRefreshToken(e.refreshToken)]),!0):(a.error("At least one of the expected response parts missing!"),!1)}{const e=await o.json();return a.error("Error linking contact to client",o.status,JSON.stringify(e)),!1}}async generateAccessToken(){const e=await this.storageWithLog.getClientId(),t=await this.storageWithLog.getRefreshToken(),i=await this.storageWithLog.getClientState();if(!e||!t||!i)return!1;const n=await this.apiEndpoint("client/contact-token"),s={refreshToken:t},r=await this.meClientServiceRequest.post(n,s,{clientId:e,clientState:i});if(200===r.status){const e=await r.json();return e.contactToken?(await this.storage.setContactToken(e.contactToken),!0):(a.error("ContactToken is not part of response body!"),!1)}{const e=await r.json();return a.log("Error refreshing the contact token",r.status,JSON.stringify(e)),!1}}async registerPushToken(e){const t=await this.storageWithLog.getClientId(),i=await this.storageWithLog.getClientState(),n=await this.storageWithLog.getContactToken({message:"Unable to register subscription as contactToken is missing!"});if(!t||!i||!n)return!1;const s=await this.apiEndpoint("client/push-token"),r={pushToken:e},o=await this.meClientServiceRequest.put(s,r,{clientId:t,clientState:i,contactToken:n});if(204===o.status)return await this.saveClientState(o),!0;{const e=await o.json();return a.error("Error registering the subscription",o.status,JSON.stringify(e)),!1}}async removePushToken(){a.info("Remove push token");const e=await this.storageWithLog.getClientId(),t=await this.storageWithLog.getClientState({level:"info"}),i=await this.storageWithLog.getContactToken({level:"info"});if(!e||!t||!i)return!1;const n=await this.apiEndpoint("client/push-token"),s=await this.meClientServiceRequest.delete(n,{},{clientId:e,clientState:t,contactToken:i});if(204===s.status)return await this.saveClientState(s),!0;{const e=await s.json();return a.error("Error removing a subscription",s.status,JSON.stringify(e)),!0}}async apiEndpoint(e){const t=await this.storage.getAppCode();return`${this.baseUrl}/${t}/${e}`}async saveClientState(e){const t=e.headers.get("x-client-state");t?await this.storage.setClientState(t):a.error("Error: X-Client-State not found in response header!")}async getClientDetails(){const e=await this.storage.getPlatform();if(e){return{platform:e,applicationVersion:await this.storage.getApplicationVersion(),deviceModel:await this.storage.getDeviceModel(),osVersion:await this.storage.getOsVersion(),sdkVersion:await this.storage.getSdkVersion(),language:await this.storage.getLanguage(),timezone:await this.storage.getTimezone()}}throw new Error("platform not found in storage!")}toContactRequestBodyData(e){return e?"openIdToken"in e?{body:{contactFieldId:e.fieldId,openIdToken:e.openIdToken},anonymous:!1}:{body:{contactFieldId:e.fieldId,contactFieldValue:e.fieldValue,contactFieldEncrypted:e.encrypted},anonymous:!1}:{body:{},anonymous:!0}}t.MEClientService=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MEV3ApiRequest=void 0;const n={"Content-Type":"application/json"};class s{sync post(e,t,i){const n=this.createPostRequestInit(t,i);return fetch(e,n)}async put(e,t,i){const n=this.createPutRequestInit(t,i);return fetch(e,n)}async delete(e,t,i){const n=this.createDeleteRequestInit(t,i);return fetch(e,n)}createPostRequestInit(e,t){return this.createRequestInit("POST",e,t)}createPutRequestInit(e,t){return this.createRequestInit("PUT",e,t)}reateRequestInit(e,t,i){return{method:e,headers:this.buildHeaders(i),mode:"cors",cache:"default",body:JSON.stringify(t)}}buildHeaders(e){const t=new Headers;return Object.keys(n).forEach((),t.append("x-client-id",e.clientId),e.clientState&&t.append("x-client-state",e.clientState),e.contactToken&&t.append("x-contact-token",e.contactToken),t.append("x-request-order",`${this.requestOrder}`),this.requestOrder+=1,t}t.MEV3ApiRequest=s},function(e,t,i){"use strict";var n=this&&this.__createBinding||(Object.create?,s=this&&this.__setModuleDefault||(Object.create?,r=this&&this.__importStar||Object.defineProperty(t,"__esModule",{value:!0}),t.MEWebPushDb=void 0;const a=r(i(1));class o{constructor(e){this.indexDb=e}async getDefaultNotificationTitle(e){return this.indexDb.getDBValueOrDefault(a.dbKeyDefaultNotificationTitle,e)}sync getClientIdForAppCode(e){if(void 0!==e){return(await this.getBrowserIdsFromDb())[e.toUpperCase()]}}sync getBrowserIdsFromDb(){const e=await this.indexDb.getDBValueOrDefault(a.dbKeyBrowserIds);let t={};if(void 0!==e)try{t=JSON.parse(e)}catch(e){}return t=await this.addLegacyBrowserId(t),t}async addLegacyBrowserId(e){const t=await this.indexDb.getDBValueOrDefault(a.dbKeyBrowserId);if(void 0!==t){e[t.split("_")[0].toUpperCase()]=t,await this.indexDb.setDBValue(a.dbKeyBrowserIds,JSON.stringify(e)),await this.indexDb.setDBValue(a.dbKeyBrowserId,void 0)}return e}async getInitParams(){const e=await this.indexDb.getDBValueOrDefault(a.dbKeyInitParams);return e?JSON.parse(e):void 0}async getMeClientServiceApiBaseUrl(){return this.indexDb.getDBValue(a.dbKeyMeClientServiceApiBaseUrl)}async getMeDeviceEventServiceApiBaseUrl(){return this.indexDb.getDBValue(a.dbKeyMeDeviceEventServiceApiBaseUrl)}async getClientId(){const e=await this.getAppCode();return this.getClientIdForAppCode(e)}async getClientState(){return this.indexDb.getDBValueOrDefault(a.dbKeyXClientState)}async getRefreshToken(){return this.indexDb.getDBValueOrDefault(a.dbKeyRefreshToken)}async getContactToken(){return this.indexDb.getDBValueOrDefault(a.dbKeyContactToken)}async getAppCode(){return this.appCode||(this.appCode=await this.indexDb.getDBValueOrDefault(a.dbKeyApplicationCode)),this.appCode}async getWebsitePushId(){return this.indexDb.getDBValueOrDefault(a.dbKeyWebsitePushId)}async getLastPermissionStatus(){return this.indexDb.getDBValueOrDefault(a.dbKeyLastPermissionStatus).then(()}async getApplicationServerPublicKey(){return this.indexDb.getDBValueOrDefault(a.dbKeyApplicationServerPublicKey)}async getServiceWorkerUrl(){return this.indexDb.getDBValueOrDefault(a.dbKeyServiceWorkerUrl)}async getServiceWorkerScope(){return this.indexDb.getDBValueOrDefault(a.dbKeyServiceWorkerScope)}async getSdkVersion(){return this.indexDb.getDBValueOrDefault(a.dbKeySdkVersion)}async getServiceWorkerVersion(){return this.indexDb.getDBValueOrDefault(a.dbKeyServiceWorkerVersion)}async getPushToken(){return this.indexDb.getDBValueOrDefault(a.dbKeyPushToken)}async getContactFieldId(){const e=await this.indexDb.getDBValueOrDefault(a.dbKeyContactFieldId);return e?Number(e):void 0}async getContactFieldValue(){return this.indexDb.getDBValueOrDefault(a.dbKeyContactFieldValue)}async getPushPackageServiceUrl(){return this.indexDb.getDBValueOrDefault(a.dbKeyPushPackageServiceUrl)}async getPlatform(){return this.indexDb.getDBValueOrDefault(a.dbKeyPlatform)}async getApplicationVersion(){return this.indexDb.getDBValueOrDefault(a.dbKeyApplicationVersion)}async getDeviceModel(){return this.indexDb.getDBValueOrDefault(a.dbKeyDeviceModel)}async getOsVersion(){return this.indexDb.getDBValueOrDefault(a.dbKeyOsVersion)}async getLanguage(){return this.indexDb.getDBValueOrDefault(a.dbKeyLanguage)}sync getLoggingEnabled(){const e=await this.indexDb.getDBValueOrDefault(a.dbKeyLoggingEnabled);return"true"===(null==e?void 0:e.toLowerCase())}async setTimezone(e){await this.indexDb.setDBValue(a.dbKeyTimezone,e)}async setLanguage(e){await this.indexDb.setDBValue(a.dbKeyLanguage,e)}async setOsVersion(e){await this.indexDb.setDBValue(a.dbKeyOsVersion,e)}async setDeviceModel(e){await this.indexDb.setDBValue(a.dbKeyDeviceModel,e)}async setApplicationVersion(e){await this.indexDb.setDBValue(a.dbKeyApplicationVersion,e)}async setPlatform(e){await this.indexDb.setDBValue(a.dbKeyPlatform,e)}async setPushPackageServiceUrl(e){await this.indexDb.setDBValue(a.dbKeyPushPackageServiceUrl,e)}async setContactFieldValue(e){await this.indexDb.setDBValue(a.dbKeyContactFieldValue,e)}async setContactFieldId(e){await this.indexDb.setDBValue(a.dbKeyContactFieldId,"number"==typeof e?e.toString():void 0)}async setMeClientServiceApiBaseUrl(e){await this.indexDb.setDBValue(a.dbKeyMeClientServiceApiBaseUrl,e)}async setMeDeviceEventServiceApiBaseUrl(e){await this.indexDb.setDBValue(a.dbKeyMeDeviceEventServiceApiBaseUrl,e)}async setPushToken(e){await this.indexDb.setDBValue(a.dbKeyPushToken,e)}async setServiceWorkerVersion(e){await this.indexDb.setDBValue(a.dbKeyServiceWorkerVersion,e)}async setSdkVersion(e){await this.indexDb.setDBValue(a.dbKeySdkVersion,e)}async setLastPermissionStatus(e){await this.indexDb.setDBValue(a.dbKeyLastPermissionStatus,e)}async setAppCode(e){await this.indexDb.setDBValue(a.dbKeyApplicationCode,e),this.appCode=e}async setClientState(e){await this.indexDb.setDBValue(a.dbKeyXClientState,e)}async setContactToken(e){await this.indexDb.setDBValue(a.dbKeyContactToken,e)}async setRefreshToken(e){await this.indexDb.setDBValue(a.dbKeyRefreshToken,e)}async setClientId(e){await this.indexDb.setDBValue(a.dbKeyBrowserId,e)}async setClientIdForAppCode(e,t){const i=await this.getBrowserIdsFromDb();void 0!==e?i[t.toUpperCase()]=e:delete i[t.toUpperCase()],await this.indexDb.setDBValue(a.dbKeyBrowserIds,JSON.stringify(i))}async setClientIds(e){await this.indexDb.setDBValue(a.dbKeyBrowserIds,JSON.stringify(e))}async setDefaultNotificationIcon(e){await this.indexDb.setDBValue(a.dbKeyDefaultNotificationIcon,e)}async setDefaultNotificationTitle(e){await this.indexDb.setDBValue(a.dbKeyDefaultNotificationTitle,e)}async setServiceWorkerUrl(e){await this.indexDb.setDBValue(a.dbKeyServiceWorkerUrl,e)}async setServiceWorkerScope(e){await this.indexDb.setDBValue(a.dbKeyServiceWorkerScope,e)}async setApplicationServerPublicKey(e){await this.indexDb.setDBValue(a.dbKeyApplicationServerPublicKey,e)}async setInitParams(e){await this.indexDb.setDBValue(a.dbKeyInitParams,JSON.stringify(e))}async setWebsitePushId(e){await this.indexDb.setDBValue(a.dbKeyWebsitePushId,e)}async setLoggingEnabled(e){await this.indexDb.setDBValue(a.dbKeyLoggingEnabled,`${e}`)}async setLastUsedAt(){const e=(new Date).toISOString();await this.indexDb.setDBValue(a.dbKeyLastUsedAt,e)}async deleteLastUsedAt(){await this.indexDb.deleteDBKey(a.dbKeyLastUsedAt)}async clearAll(){await Promise.all([this.setAppCode(void 0),this.setClientState(void 0),this.setContactToken(void 0),this.setRefreshToken(void 0),this.setDefaultNotificationIcon(void 0),this.setDefaultNotificationTitle(void 0),this.setServiceWorkerUrl(void 0),this.setServiceWorkerScope(void 0),this.setApplicationServerPublicKey(void 0),this.setSdkVersion(void 0),this.setServiceWorkerVersion(void 0),this.setInitParams(void 0),this.setWebsitePushId(void 0),this.setPushPackageServiceUrl(void 0),this.setLastPermissionStatus(void 0),this.setPushToken(void 0),this.setContactFieldId(void 0),this.setContactFieldValue(void 0),this.setPlatform(void 0),this.setApplicationVersion(void 0),this.setDeviceModel(void 0),this.setTimezone(void 0),this.setLanguage(void 0),this.setOsVersion(void 0),this.setMeClientServiceApiBaseUrl(void 0),this.setMeDeviceEventServiceApiBaseUrl(void 0),this.deleteLastUsedAt()]),this.appCode=void 0}t.MEWebPushDb=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndexDb=void 0;const n=i(1),s="not_found";class r{constructor(){this.name="keyValue"}async setDBValue(e,t){return this.openIndexDB().then((i=>new Promise(((n,s)=>{const r=i.transaction([this.name],"readwrite").objectStore(this.name).put({key:e,value:t});r.onsuccess=()=>(this.indexedDBInstance=void 0,i.close(),n(e)),r.onerror=e=>(this.indexedDBInstance=void 0,i.close(),s(e))}))))}async deleteDBKey(e){return this.openIndexDB().then((t=>new Promise(((i,n)=>{const s=t.transaction([this.name],"readwrite").objectStore(this.name).delete(e);s.onsuccess=()=>(this.indexedDBInstance=void 0,t.close(),i(!0)),s.onerror=e=>(this.indexedDBInstance=void 0,t.close(),n(e))}))))}async getDBValue(e){const t=await this.openIndexDB();return new Promise(((i,n)=>{const r=t.transaction(this.name).objectStore(this.name).get(e);r.onsuccess=()=>{const{result:e}=r;return e?(this.indexedDBInstance=void 0,t.close(),i(e.value)):(this.indexedDBInstance=void 0,t.close(),n(new Error(s)))},r.onerror=e=>(this.indexedDBInstance=void 0,t.close(),n(e))}))}async getDBValueOrDefault(e,t){try{return await this.getDBValue(e)}catch(e){if(e.message===s)return t;throw e}}async openIndexDB(){return new Promise(((e,t)=>{if(this.indexedDBInstance)return e(this.indexedDBInstance);const i=indexedDB.open(n.indexedDbName,n.indexedDbVersion);i.onsuccess=t=>(this.indexedDBInstance=t.target.result,e(this.indexedDBInstance)),i.onerror=i.onupgradeneeded=e=>{e.target.result.createObjectStore("keyValue",{keyPath:"key"})}}))}static create(){return new r}}t.IndexDb=r},,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(13),s=i(8),r=i(9),a=s.MEWebPushDb.create(r.IndexDb.create()),o=n.EmarsysServiceWorker.create(a);self.addEventListener("push",(),self.addEventListener("notificationclick",(e=>o.onNotificationClick(e))),self.addEventListener("install",(e=>o.onInstall(e))),self.addEventListener("pushsubscriptionchange",()},function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EmarsysServiceWorker=void 0;const s=n(i(0)),r=i(1),a=i(2),o=i(5),c=i(6),d=i(7),l={success:!1};class u{constructor(e){this.webPushDb=e}onInstall(e){e.waitUntil(this.handleInstall())}onPush(e){e.waitUntil(this._onPush(e))}nSubscriptionChangesync _onPush(e){if(await this.setupLogging(),!("showNotification"in self.registration))return void s.default.Logger.warn("Showing of notifications is not enabled");const t=e.data&&e.data.json()?e.data.json():{};if(!a.isValidPayload(t))return void s.default.Logger.warn("Invalid payload",t);const i=t.messageData.notificationSettings;return Promise.all([this.getNotificationOption(t,r.pushTitleProperty,(),this.getNotificationOption(i,r.pushIconProperty,(),this.getNotificationOption(i,r.pushImageProperty,(()=>Promise.resolve(void 0))),this.getNotificationOption(i,r.pushActionsProperty,()]).then((([e,i,n,s])=>this.showNotification(t.message,t,e,i,n,s?this.createActionsFromActionButtons(s):s)))}async _onNotificationClick(e){await this.setupLogging(),s.default.Logger.debug(`Notification clicked with Action: ${e.action}`),e.notification.close();const t=e.notification.data;if(!t.messageData.notificationSettings)return;let i=t.messageData.notificationSettings[r.pushLinkProperty];if(t.messageData.notificationSettings[r.pushActionsProperty]){const n=t.messageData.notificationSettings[r.pushActionsProperty].find(();n&&(i=n.url)}const n=[];return i&&(s.default.Logger.debug(`Opening url: ${i}`),n.push(self.clients.openWindow(i))),n.push(this.reportOpen(t)),Promise.all(n)}async _onSubscriptionChange(){try{await this.setupLogging(),s.default.Logger.debug("Subscription changed");const e=await this.getApplicationServerKey();if(s.default.Logger.debug("Got applicationServerKey",JSON.stringify(e)),!e)return void s.default.Logger.debug("Exiting registerNewSubscription");s.default.Logger.debug("Subscribing for new key");const t=await self.registration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e});return s.default.Logger.debug("Registering new subscription",t),this.registerNewSubscription(t,!1)}catch(e){s.default.Logger.error("onSubscriptionChange: registerSubscription",e)}}async registerNewSubscription(e,t=!1){const i=await this.getMeClientService();if(!i)return void s.default.Logger.error("Unable to get the ME client service!");let n=await i.registerPushToken(JSON.stringify(e));n?s.default.Logger.debug("Success register push token with backend"):t?s.default.Logger.error("Unable to register expired subscription",e):(n=await this.refreshContactToken(i),n?(s.default.Logger.debug("Successful refreshed the contact token"),await this.registerNewSubscription(e,!0)):s.default.Logger.error("Unable to register expired subscription",e))}async getApplicationServerKey(){try{const e=await this.webPushDb.getApplicationServerPublicKey();return e||s.default.Logger.error("application server key not set"),e}catch(e){return void s.default.Logger.error("application server error",e)}}async showNotification(e,t,i,n,s,r){const a={body:e,data:t,icon:n,image:s,actions:r,vibrate:[400,100,400]};return self.registration.showNotification(i,a)}async getNotificationOption(e,t,i){return e&&e[t]?Promise.resolve(e[t]):i()}async handleInstall(){try{await this.setupLogging(),s.default.Logger.debug("Install handler"),s.default.Logger.debug("Storing service worker version","4.3.1"),await this.webPushDb.setServiceWorkerVersion("4.3.1"),s.default.Logger.debug("Skipping waiting"),await self.skipWaiting(),s.default.Logger.debug("Install done")}catch(e){s.default.Logger.error(e,"Install error!")}}async setupLogging(){const e=await this.webPushDb.getLoggingEnabled();s.default.enableLogger(e,s.default.SwContext)}async reportOpen(e){var t,i;const n=await this.getDeviceEventService();if(n)try{s.default.Logger.debug("Reporting open to DES",e);const r=null===(t=null==e?void 0:e.messageData)||void 0===t?void 0:t.sid,a=null===(i=null==e?void 0:e.messageData)||void 0===i?void 0:i.treatments;let o=r?{sid:r}:void 0;o=o?a?{...o,treatments:JSON.stringify(a)}:o:void 0;const c={dnd:!0,events:[{type:"internal",name:"webpush:click",timestamp:(new Date).toISOString(),attributes:o}],clicks:[],viewedMessages:[]},d=await n.postEvents(c);d.success||401!==d.statusCode||await this.retrySendAfterContactTokenRefresh(n,c)}catch(e){s.default.Logger.error("Fatal error while reporting open!",e.message,e)}else s.default.Logger.error("Cannot report open! DES not initialized!",e)}async retrySendAfterContactTokenRefresh(e,t){const i=await this.getMeClientService();if(!i)return s.default.Logger.error("Unable to get the ME client service!"),l;return await this.refreshContactToken(i)?e.postEvents(t):l}async refreshContactToken(e){try{const t=await e.generateAccessToken();return t||s.default.Logger.error("refresh of access token failed"),t}catch(e){return s.default.Logger.error("unable to refresh contact token",e),!1}}async getDeviceEventService(){try{if(!this.meDeviceEventService){const e=await this.webPushDb.getMeDeviceEventServiceApiBaseUrl();this.meDeviceEventService=o.MEDeviceEventService.create(e,d.MEV3ApiRequest.create(),this.webPushDb)}return this.meDeviceEventService}catch(e){s.default.Logger.error("Error initializing device event service!",e.message,e)}}async getMeClientService(){try{if(!this.meClientService){const e=await this.webPushDb.getMeClientServiceApiBaseUrl();this.meClientService=c.MEClientService.create(e,d.MEV3ApiRequest.create(),this.webPushDb)}return this.meClientService}catch(e){s.default.Logger.error("Error initializing client service!",e.message,e)}}tatic create(e){return new u(e)}}t.EmarsysServiceWorker=u}]);
//# sourceMappingURL=web-emarsys-service-worker.js.map