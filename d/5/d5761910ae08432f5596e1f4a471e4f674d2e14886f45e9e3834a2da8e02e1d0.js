/* https://proxi.cloud/wp-content/plugins/fluentform/assets/css/fluent-forms-elementor-widget.css?ver=5.1.5 */
.fluentform-widget-wrapper.hide-fluent-form-labels .ff-el-input--label{display:none!important}.fluentform-widget-wrapper.hide-error-message .ff-el-is-error .text-danger{display:none}.fluentform-widget-wrapper.fluentform-widget-align-left{margin:0 auto 0 0}.fluentform-widget-wrapper.fluentform-widget-align-center{float:none;margin:0 auto}.fluentform-widget-wrapper.fluentform-widget-align-right{margin:0 0 0 auto}.fluentform-widget-custom-radio-checkbox input[type=checkbox],.fluentform-widget-custom-radio-checkbox input[type=radio]{background:#ddd;height:15px;min-width:1px;outline:none;padding:3px;width:15px}.fluentform-widget-custom-radio-checkbox input[type=checkbox]:after,.fluentform-widget-custom-radio-checkbox input[type=radio]:after{border:0 solid transparent;content:"";display:block;height:100%;margin:0;padding:0;width:100%}.fluentform-widget-custom-radio-checkbox input[type=checkbox]:checked:after,.fluentform-widget-custom-radio-checkbox input[type=radio]:checked:after{background:#999;background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E");background-position:50%;background-repeat:no-repeat;background-size:12px}.fluentform-widget-custom-radio-checkbox input[type=radio],.fluentform-widget-custom-radio-checkbox input[type=radio]:after{border-radius:50%}.fluentform-widget-wrapper .frm-fluent-form .ff-step-header{margin-bottom:0}.ff-el-progress-bar{align-items:center;display:flex;height:100%;justify-content:flex-end}.fluent-form-widget-step-header-yes .ff-step-header .ff-el-progress-status,.fluent-form-widget-step-progressbar-yes .ff-el-progress{display:block}.fluent-form-widget-step-header-yes .frm-fluent-form .ff-step-header,.fluent-form-widget-step-progressbar-yes .frm-fluent-form .ff-step-header{margin-bottom:20px}.fluentform-widget-section-break-content-left .ff-el-group.ff-el-section-break{text-align:left}.fluentform-widget-section-break-content-center .ff-el-group.ff-el-section-break{text-align:center}.fluentform-widget-section-break-content-right .ff-el-group.ff-el-section-break{text-align:right}.fluentform-widget-submit-button-full-width .ff-btn-submit{display:block;width:100%}.fluentform-widget-submit-button-center .ff-el-group .ff-btn-submit,.fluentform-widget-submit-button-center .ff-el-group.ff-text-left .ff-btn-submit,.fluentform-widget-submit-button-center .ff-el-group.ff-text-right .ff-btn-submit{align-items:center;display:flex;justify-content:center;margin:0 auto}.fluentform-widget-submit-button-right .ff-el-group .ff-btn-submit,.fluentform-widget-submit-button-right .ff-el-group.ff-text-left .ff-btn-submit,.fluentform-widget-submit-button-right .ff-el-group.ff-text-right .ff-btn-submit{float:right}.fluentform-widget-submit-button-left .ff-el-group .ff-btn-submit,.fluentform-widget-submit-button-left .ff-el-group.ff-text-left .ff-btn-submit,.fluentform-widget-submit-button-left .ff-el-group.ff-text-right .ff-btn-submit{float:left}.fluentform-widget-wrapper.hide-placeholder input::-webkit-input-placeholder,.fluentform-widget-wrapper.hide-placeholder textarea::-webkit-input-placeholder{opacity:0;visibility:hidden}.fluentform-widget-wrapper.hide-placeholder input:-moz-placeholder,.fluentform-widget-wrapper.hide-placeholder input::-moz-placeholder,.fluentform-widget-wrapper.hide-placeholder textarea:-moz-placeholder,.fluentform-widget-wrapper.hide-placeholder textarea::-moz-placeholder{opacity:0;visibility:hidden}.fluentform-widget-wrapper.hide-placeholder input:-ms-input-placeholder,.fluentform-widget-wrapper.hide-placeholder textarea:-ms-input-placeholder{opacity:0;visibility:hidden}.fluentform-widget-wrapper.hide-placeholder input::-ms-input-placeholder,.fluentform-widget-wrapper.hide-placeholder textarea::-ms-input-placeholder{opacity:0;visibility:hidden}.lity{z-index:9999!important}=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();"function"!=typeof f.Promise?f.Promise=r:(f.Promise.prototype.finally||(f.Promise.prototype.finally=e),f.Promise.allSettled||(f.Promise.allSettled=t),f.Promise.any||(f.Promise.any=n))});var Geohash={base32:"0123456789bcdefghjkmnpqrstuvwxyz",encode:function(e,t,n){if(void 0===n){for(var o=1;o<=12;o++){var i=Geohash.encode(e,t,o),r=Geohash.decode(i);if(r.lat==e&&r.lon==t)return i}n=12}if(e=Number(e),t=Number(t),n=Number(n),isNaN(e)||isNaN(t)||isNaN(n))throw new Error("Invalid geohash");for(var a,s=0,c=0,l=!0,u="",d=-90,p=90,m=-180,f=180;u.length<n;)l?(a=(m+f)/2)<=t?(s=2*s+1,m=a):(s*=2,f=a):(a=(d+p)/2)<=e?(s=2*s+1,d=a):(s*=2,p=a),l=!l,5==++c&&(u+=Geohash.base32.charAt(s),s=c=0);return u},decode:function(e){var e=Geohash.bounds(e),t=e.sw.lat,n=e.sw.lon,o=e.ne.lat,e=e.ne.lon,i=(n+e)/2,r=(r=(t+o)/2).toFixed(Math.floor(2-Math.log(o-t)/Math.LN10)),i=i.toFixed(Math.floor(2-Math.log(e-n)/Math.LN10));return{lat:Number(r),lon:Number(i)}},bounds:function(e){if(0===e.length)throw new Error("Invalid geohash");e=e.toLowerCase();for(var t=!0,n=-90,o=90,i=-180,r=180,a=0;a<e.length;a++){var s=e.charAt(a),c=Geohash.base32.indexOf(s);if(-1==c)throw new Error("Invalid geohash");for(var l=4;0<=l;l--){var u,d=c>>l&1;t?(u=(i+r)/2,1==d?i=u:r=u):(u=(n+o)/2,1==d?n=u:o=u),t=!t}}return{sw:{lat:n,lon:i},ne:{lat:o,lon:r}}},adjacent:function(e,t){if(e=e.toLowerCase(),t=t.toLowerCase(),0===e.length)throw new Error("Invalid geohash");if(-1=="nsew".indexOf(t))throw new Error("Invalid direction");var n=e.slice(-1),o=e.slice(0,-1),e=e.length%2;return(o=-1!={n:["prxz","bcfguvyz"],s:["028b","0145hjnp"],e:["bcfguvyz","prxz"],w:["0145hjnp","028b"]}[t][e].indexOf(n)&&""!==o?Geohash.adjacent(o,t):o)+Geohash.base32.charAt({n:["p0r21436x8zb9dcf5h7kjnmqesgutwvy","bc01fg45238967deuvhjyznpkmstqrwx"],s:["14365h7k9dcfesgujnmqp0r2twvyx8zb","238967debc01fg45kmstqrwxuvhjyznp"],e:["bc01fg45238967deuvhjyznpkmstqrwx","p0r21436x8zb9dcf5h7kjnmqesgutwvy"],w:["238967debc01fg45kmstqrwxuvhjyznp","14365h7k9dcfesgujnmqp0r2twvyx8zb"]}[t][e].indexOf(n))},neighbours:function(e){return{n:Geohash.adjacent(e,"n"),ne:Geohash.adjacent(Geohash.adjacent(e,"n"),"e"),e:Geohash.adjacent(e,"e"),se:Geohash.adjacent(Geohash.adjacent(e,"s"),"e"),s:Geohash.adjacent(e,"s"),sw:Geohash.adjacent(Geohash.adjacent(e,"s"),"w"),w:Geohash.adjacent(e,"w"),nw:Geohash.adjacent(Geohash.adjacent(e,"n"),"w")}}};"undefined"!=typeof module&&module.exports&&(module.exports=Geohash);!function(_){var o={fr:{FRA:"France",BEL:"Belgique",ESP:"Espagne",UNKNOWN_POSITION:"Position inconnue",DESC_IP_DISQUALIFIED:"Selon votre IP disqualifiée",DESC_UNSHARED:"Position non partagée",DESC_IP_QUALIFIED:"Selon votre IP qualifiée",DESC_HTML5:"Selon la position de votre appareil",DESC_MANUAL:"Selon votre position encodée manuellement",RELOCATION:'<button class="pxs-link">Rafra&icirc;chissez</button> ou <button class="pxs-link">modifiez votre position</button>',MORE_INFO:"Plus d'infos",POSITION_BLOCKED:"Votre navigateur bloque actuellement la localisation.",CLOSE:"Fermer",DETAIL:"Détail",REFUSE_GEOLOC:"Ne plus être localisé",BE_GEOLOC:"Être localisé",NOT_SUPPORTED:"Votre navigateur n'est pas supporté"},nl:{FRA:"Frankrijk",BEL:"België",ESP:"Spanje",UNKNOWN_POSITION:"Onbekende positie",DESC_IP_DISQUALIFIED:"Volgens uw gediskwalificeerd IP",DESC_IP_QUALIFIED:"Volgens uw gekwalificeerd IP",DESC_UNSHARED:"niet gedeelde lokalisatie",DESC_HTML5:"Volgens de lokalisatie van uw toestel",DESC_MANUAL:"Volgens de lokalisatie dat uw manueel heeft gecodeerde",RELOCATION:'<button class="pxs-link">Update</button> of <button class="pxs-link">verander uw lokalisatie</button>',MORE_INFO:"Meer info",POSITION_BLOCKED:"Uw navigator blokkeert momenteel de lokalisatie.",CLOSE:"Sluiten",DETAIL:"Detail",REFUSE_GEOLOC:"Ik wil niet gelokaliseerd zijn",BE_GEOLOC:"Ik wil gelokaliseerd zijn",NOT_SUPPORTED:"Uw browser is niet compatibel met onze system"},es:{FRA:"Francia",BEL:"Bélgica",ESP:"España",UNKNOWN_POSITION:"Posición desconocida",DESC_IP_DISQUALIFIED:"Según su IP descalificada",DESC_IP_QUALIFIED:"Según su IP calificada",DESC_HTML5:"Según la posición de su dispositivo",DESC_MANUAL:"Según su posición codificada manualmente",DESC_UNSHARED:"Position non partagée",RELOCATION:'<button class="pxs-link">Refrescar</button> o <button class="pxs-link">modificar su posición</button>',MORE_INFO:"Más información",POSITION_BLOCKED:"Tu navegador está actualmente bloqueando la localización.",CLOSE:"Cerca",DETAIL:"Detalle",REFUSE_GEOLOC:"",BE_GEOLOC:"",NOT_SUPPORTED:""},en:{FRA:"France",BEL:"Belgium",ESP:"Spain",UNKNOWN_POSITION:"Unknown position",DESC_IP_DISQUALIFIED:"Based on your disqualified IP",DESC_IP_QUALIFIED:"From your qualified IP",DESC_UNSHARED:"Unshared location",DESC_HTML5:"From your device position",DESC_MANUAL:"From your manually encoded location",RELOCATION:'<button class="pxs-link">Refresh</button> or <button class="pxs-link">update your location</button>',MORE_INFO:"More info",POSITION_BLOCKED:"Your browser is currently blocking the position.",CLOSE:"Close",DETAIL:"Detail",REFUSE_GEOLOC:"Don’t be located",BE_GEOLOC:"Be located",NOT_SUPPORTED:"Your navigator is not supported"}};function x(e,t){var n=_.config().language;return o[n=o[n]?n:"en"][e]||t||""}function t(e){var g,o,t,h,n,E,y,i,r,a,s,c,l,u,d,p=document.getElementById(e);function v(e){var t=document.getElementById(o).childNodes;t[t.length-1].nodeValue=e}function I(e){document.getElementById(t).textContent=e}function b(e,t){s=e,c=t,setTimeout(function(){m("update-map-center",{position:e,showMarker:t})},1e3)}function m(e,t){var n=document.getElementById(y).contentWindow,o=new MessageChannel;n.postMessage({type:e,data:t},"*",[o.port2])}function w(e,t,n){var o;document.getElementById(a)||((o=document.createElement("div")).setAttribute("id",a),o.setAttribute("class","pxs-slideOutRight"),o.innerHTML='    <?xml version="1.0" encoding="iso-8859-1"?>\n    \x3c!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="120 -220 100 730" width="60px" height="45px">\n        <g>\n            <g>\n                <path d="M467.819,431.851l-36.651-61.056c-16.896-28.181-25.835-60.437-25.835-93.312V224    c0-82.325-67.008-149.333-149.333-149.333S106.667,141.675,106.667,224v53.483c0,32.875-8.939,65.131-25.835,93.312    l-36.651,61.056c-1.984,3.285-2.027,7.403-0.149,10.731c1.899,3.349,5.461,5.419,9.301,5.419h405.333    c3.84,0,7.403-2.069,9.301-5.419C469.845,439.253,469.803,435.136,467.819,431.851z M72.171,426.667l26.944-44.907    C118.016,350.272,128,314.219,128,277.483V224c0-70.592,57.408-128,128-128s128,57.408,128,128v53.483    c0,36.736,9.984,72.789,28.864,104.277l26.965,44.907H72.171z" fill="#91DC5A"/>\n            </g>\n        </g>\n        <g>\n            <g>\n                <path d="M256,0c-23.531,0-42.667,19.136-42.667,42.667v42.667C213.333,91.221,218.112,96,224,96s10.667-4.779,10.667-10.667    V42.667c0-11.776,9.557-21.333,21.333-21.333s21.333,9.557,21.333,21.333v42.667C277.333,91.221,282.112,96,288,96    s10.667-4.779,10.667-10.667V42.667C298.667,19.136,279.531,0,256,0z" fill="#91DC5A"/>\n            </g>\n        </g>\n        <g>\n            <g>\n                <path d="M302.165,431.936c-3.008-5.077-9.515-6.741-14.613-3.819c-5.099,2.987-6.805,9.536-3.819,14.613    c2.773,4.715,4.288,10.368,4.288,15.936c0,17.643-14.357,32-32,32c-17.643,0-32-14.357-32-32c0-5.568,1.515-11.221,4.288-15.936    c2.965-5.099,1.259-11.627-3.819-14.613c-5.141-2.923-11.627-1.259-14.613,3.819c-4.715,8.064-7.211,17.301-7.211,26.731    C202.667,488.085,226.581,512,256,512s53.333-23.915,53.376-53.333C309.376,449.237,306.88,440,302.165,431.936z" fill="#91DC5A"/>\n            </g>\n        </g>\n    </svg>\n    <p>'+e+'</p>\n    <ul id="px-toolbar-menu">\n        <li>'+n+'</li>\n <li><a href="https://www.proxistore.com/geolocation?lang='+_.config().language+'" target="_blank" >'+t+"</a></li>\n    </ul>\n</div>",document.body.appendChild(o),l=document.getElementById(a),document.getElementById("px-toolbar-menu").children[0].onclick=function(){l.style.display="none"},l.onmouseover=function(){this.children[2].style.display="flex",clearTimeout(u)},l.onmouseout=function(){this.children[2].style.display="none",u=setTimeout(f,2e3)})}function f(){l.classList.replace("pxs-slideInRight","pxs-slideOutRight"),setTimeout(void(l.style.display="none"),1e3)}function O(e){for(var t=document.getElementById(o).getElementsByTagName("div")[0].getElementsByTagName("svg")[0].getElementsByTagName("g")[0].getElementsByTagName("g")[0].getElementsByTagName("path"),n=0;n<t.length;n++)t[n].setAttribute("class",e)}null!=p&&(g=e+"-country",o=e+"-location",t=e+"-descr",h=e+"-reloc",n=e+"-more",E=e+"-modal",y=e+"-modal-iframe",i=_.config().customClassName||"pxs-custom-"+(2<=(r=window.location.hostname.split(".")).length?r[r.length-2]+"-"+r[r.length-1]:r[0]),a="px-toolbar",_.config().darkTheme&&(i+=" pxs-theme-dark"),p.innerHTML=function(){var e='<div class="pxs-widget '+i+'"> <div id="'+E+'" class="pxs-modal">\n  <div class="pxs-modal-content">\n<span class="pxs-modal-close">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24" version="1.1" width="48px" height="48px">\n<g id="surface1">\n<path style=" " d="M 19.28125 5.28125 L 9 15.5625 L 4.71875 11.28125 L 3.28125 12.71875 L 8.28125 17.71875 L 9 18.40625 L 9.71875 17.71875 L 20.71875 6.71875 Z "/>\n</g>\n</svg>\n</span>\n    <iframe allow="geolocation *;" id="'+y+'" width="100%" height="500px" scrolling="no" frameBorder="0" ></iframe>\n  </div>\n</div><span id="'+g+'" class="pxs-country"></span>\n    <div class="pxs-container">\n                <span id="'+o+'" class="pxs-location">\n                    <div class="pxs-dot pxs-turn">\n                        <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 303.68 469.22">\n                           <g class="Calque_2" data-name="Calque 2">\n                                <g class="Layer_1" data-name="Layer 1">\n                                    <path class="pxs-ip" d="M151.83,469.22a13,13,0,0,1-12.68-10L99.43,294.36a151.1,151.1,0,0,1-17.26-7.61,148.42,148.42,0,0,1-22.55-14.31,151.83,151.83,0,1,1,199.59-228,152.06,152.06,0,0,1,38.09,151,154.42,154.42,0,0,1-8.9,22.76,152.79,152.79,0,0,1-84.16,76.1L164.51,459.25A13,13,0,0,1,151.83,469.22Zm0-441A123.69,123.69,0,0,0,95.14,261.7a125.85,125.85,0,0,0,20.33,8.3,14.08,14.08,0,0,1,9.43,9.54l26.93,111.8,26.78-111.15c0-.06.19-.72.2-.78a13,13,0,0,1,8.89-9.26,123.43,123.43,0,0,0,87.74-117.6c0-.24,0-.47,0-.71s0-.48,0-.72A123.65,123.65,0,0,0,151.83,28.22Z"\n                                    />\n                                    <path class="pxs-ip" d="M151.83,207.16a56,56,0,1,1,56-55.95A56,56,0,0,1,151.83,207.16Zm0-85.82a29.87,29.87,0,1,0,29.87,29.87A29.9,29.9,0,0,0,151.83,121.34Z"\n                                    />\n                                </g>\n                            </g>\n                        </svg>\n                    </div>\n                </span>\n        <span class="pxs-sep">-</span>\n        <span id="'+t+'" class="pxs-desc"></span>\n        <span class="pxs-sep">-</span>\n        <span id="'+h+'" class="pxs-reloc"></span>\n        <span class="pxs-sep">-</span>\n';e+='<a id="untrack" class="pxs-link" target="_blank"><a> <span class="pxs-sep">-</span>\n',_.config().backLink?e+='<a href="'+_.config().backLink+'" class="pxs-link" target="_blank" id="'+n+'" class="pxs-more"></a>\n':e+='<a class="pxs-more"></a>\n';return e+="    </div>"}(),_.isSafari()&&(v(x("UNKNOWN_POSITION")),I(x("NOT_SUPPORTED")),O("pxs-ip-disqualified"),document.querySelectorAll(".pxs-sep").forEach(function(e){e.textContent=""})),_.config().hasConsent||(v(x("DESC_UNSHARED")),I(""),O("pxs-unknown")),_.appendSegmentsHtml(),-1<_.config().shortWidgetIds.indexOf(e)&&_.isMobile()&&(p.innerHTML=p.innerHTML.replace("pxs-widget","pxs-widget pxs-mini")),(d=document.getElementById(E)).getElementsByClassName("pxs-modal-close")[0].onclick=function(){d.style.display="none",_.config().hasConsent&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{})},window.onclick=function(e){document.getElementsByTagName("body"),e.target===d&&(d.style.display="none",_.config().hasConsent)&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{})},document.getElementById(y).addEventListener("load",function e(){document.getElementById(y).removeEventListener("load",e),null!=s&&b(s,c)},!1),_.em.subscribe(_.em.GEOLOCATION_CHANGED,function(e){for(var t,n,o=x(e.countryIso3,e.country),i=(e.postalCode||"")+" "+(e.locality||""),r="",a=x("RELOCATION"),s=x("POSITION_BLOCKED"),c=x("DETAIL"),l=x("CLOSE"),u=x("MORE_INFO"),d=null,p=!1,m=document.getElementsByClassName("pxs-turn"),f=0;f<m.length;f++)m[f].className="pxs-dot";"UNTRACK"!==e.type&&_.config().hasConsent?"IP"===e.type?e.disqualified?(i=x("UNKNOWN_POSITION"),r=x("DESC_IP_DISQUALIFIED"),O("pxs-ip-disqualified"),t=x("REFUSE_GEOLOC")):(r=x("DESC_IP_QUALIFIED"),O("pxs-ip-qualified"),d=e.position,t=x("REFUSE_GEOLOC"),p=!0):"HTML5"===e.type?(r=x("DESC_HTML5"),O("pxs-html5"),d=e.position,p=!0,t=x("REFUSE_GEOLOC")):"MANUAL"===e.type?(r=x("DESC_MANUAL"),O("pxs-manual"),d=e.position,p=!0,t=x("REFUSE_GEOLOC")):(i=x("UNKNOWN_POSITION"),O("pxs-unknown"),t=x("REFUSE_GEOLOC"),p=!1):(i=x("DESC_UNSHARED"),O("pxs-unknown"),t=x("BE_GEOLOC"),p=!1),e=o,document.getElementById(g).textContent=e,v(i),I(r),o=a,document.getElementById(h).innerHTML=o,document.getElementById(h).getElementsByTagName("button")[0].onclick=function(){for(var e=new _.Ajax,t=_.config().apiRootVersionedUrl+"/cookie/geo",n=(e.delete(t).then(function(e){_.config().hasConsent&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{});var t=x("REFUSE_GEOLOC");document.getElementById("untrack").innerHTML=t},function(e){console.error(e)}),document.getElementsByClassName("pxs-dot")),o=0;o<n.length;o++)n[o].className+=" pxs-turn";document.getElementById("px-toolbar").className+="canShow",_.em.publish(_.em.GEOLOCATION_REQUESTED,{forceHtml5:!0})},document.getElementById(h).getElementsByTagName("button")[1].onclick=function(){_.config().hasConsent&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{});var e=document.getElementById(y),t=_.config().apiRoot+"/assets/html/geolocation.html?language="+_.config().language+"&googleApiKey="+_.config().googleApiKey+"&apiRoot="+encodeURIComponent(_.config().apiRoot);e.setAttribute("src",t),document.getElementById(E).style.display="block"},e=t,(n=document.getElementById("untrack")).innerHTML=e,n.onclick=function(){var e,t;this.textContent===x("REFUSE_GEOLOC")?(_.config().hasConsent&&_.em.publish(_.em.GEOLOCATION_REFUSED),e=x("BE_GEOLOC"),n.innerHTML=e):(e=new _.Ajax,t=_.config().apiRootVersionedUrl+"/cookie/geo",e.delete(t).then(function(e){_.config().hasConsent&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{});var t=x("REFUSE_GEOLOC");n.innerHTML=t},function(e){console.error(e)}))},i=u,r="fr"===(r=_.config().language)?"https://www.proxistore.com/vie-privee/":"en"===r?"https://www.proxistore.com/en/privacy/":"nl"===r?"https://www.proxistore.com/nl/privacy-nl/":void 0,document.querySelector(".pxs-more").setAttribute("href",r),document.querySelector(".pxs-more").textContent=i,b(d,p),w(s,c,l)}),_.em.subscribe(_.em.GEOLOCATION_ERROR,function(e){_.log("geolocation error:",e),l&&"flex"!==l.style.display&&"pxs-slideOutRightcanShow"===l.className&&(l.classList.remove("pxs-slideOutRightcanShow"),l.className+="pxs-slideOutRight",u=setTimeout(f,5e3),l.style.display="flex",l.classList.replace("pxs-slideOutRight","pxs-slideInRight"))}))}function n(e){t(e)}function i(){_.config().widgetIds&&(Array.isArray(_.config().widgetIds)||_.config().widgetIds instanceof String||"string"==typeof _.config().widgetIds)&&0<_.config().widgetIds.length&&_.isAllowedToWriteCookies().then(function(e){var t;e?(_.config().hasConsent=!0,e=_.config().customSegmentId,"www.essilor.fr"===(t=window.location).host&&(e="https://www.essilor.fr/nos-verres/varilux"===t.href||"https://www.essilor.fr/en-ce-moment/varilux-et-offre-2eme-paire"===t.href?"10003":"10002"),"www.malingo.fr"===t.host&&(e="4289223610"),(e=t.host.includes("bookad.fr")?"4289223613":e)&&(new _.Ajax).get("https://abs.proxistore.com/v3/cookie/adv/segment-pixel?segmentIds="+e),"function"==typeof _.config().geoLocationCallback&&_.em.subscribe(_.em.GEOLOCATION_CHANGED,function(e){var t="",n="",e=(e.areas.forEach(function(e){"POSTAL CODE"==e.label?t=e.code:e.label.match("NISS|IRIS")&&(n=e.code)}),{type:e.type,locality:e.locality,postalCode:e.postalCode,countryIso2:e.countryIso2,countryIso3:e.countryIso3,country:e.country,disqualified:e.disqualified,px_country:e.countryIso2,px_city:e.locality,px_zip:t,px_district:n});_.config().geoLocationCallback(e)}),(!_.config().visible&&_.config().hasConsent||(Array.isArray(_.config().widgetIds)?_.config().widgetIds.forEach(function(e){n(e)}):n(_.config().widgetIds),_.config().hasConsent))&&_.em.publish(_.em.GEOLOCATION_REQUESTED,{})):(_.config().hasConsent=!1,Array.isArray(_.config().widgetIds)?_.config().widgetIds.forEach(function(e){n(e)}):n(_.config().widgetIds))})}var r=_.config;_.config=function(e){var t=r(e);return e&&i(),t},_.createWidgets=i}((Proxistore=function(i){Object.defineProperty(i.em,"GEOLOCATION_CHANGED",{value:"GEOLOCATION_CHANGED",writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(i.em,"GEOLOCATION_ERROR",{value:"GEOLOCATION_ERROR",writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(i.em,"GEOLOCATION_REQUESTED",{value:"GEOLOCATION_REQUESTED",writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(i.em,"GEOLOCATION_REFUSED",{value:"GEOLOCATION_REFUSED",writable:!1,enumerable:!0,configurable:!1});var t,r=new i.Ajax;function n(e,t,n,o,i,r,a,s,c){this.type=e,this.locality=t,this.postalCode=n,this.countryIso2=o,this.countryIso3=i,this.country=r,this.disqualified=s,a&&(this.position=Geohash.decode(a)),this.areas=c}function o(o){navigator&&navigator.geolocation&&!i.isMobile()&&navigator.geolocation.getCurrentPosition(function(e){var t,n;t={latitude:e.coords.latitude,longitude:e.coords.longitude,accuracy:e.coords.accuracy},n=i.config().apiRootVersionedUrl+"/cookie/geo/html5?",Object.keys(t).forEach(function(e){n+=e+"="+t[e]+"&"}),n+="1=1",r.post(n).then(function(e){a(JSON.parse(e)),o&&(e=i.config().apiRootVersionedUrl+"/cookie/geo/manual",r.delete(e))},function(e){s(e)})},function(e){var t;t=i.config().apiRootVersionedUrl+"/cookie/geo/html5-refusal",r.get(t).then(function(){},function(e){s(e)}),s(e)},{maximumAge:6e5,timeout:6e4,enableHighAccuracy:!1})}function a(e){e=new n(e.geoCookieType,e.locality,e.postalCode,e.countryIso2,e.countryIso3,e.country,e.geoHash,e.disqualified,e.areas);i.em.publish(i.em.GEOLOCATION_CHANGED,e)}function s(e){i.em.publish(i.em.GEOLOCATION_ERROR,e)}return i.em.subscribe(i.em.GEOLOCATION_REQUESTED,function(e){var t,n;e.latitude&&e.longitude?(t=e,n=i.config().apiRootVersionedUrl+"/cookie/geo/manual?",Object.keys(t).forEach(function(e){n+=e+"="+t[e]+"&"}),n+="1=1",r.post(n).then(function(e){a(JSON.parse(e))},function(e){s(e)})):e.forceHtml5?o(e.forceHtml5):(e=i.config().apiRootVersionedUrl+"/widget/geo",r.get(e).then(function(e){e=JSON.parse(e);"untrack"===e.geoCookieType&&i.em.publish(i.em.GEOLOCATION_REFUSED),a(e),i.config().disableHtml5GeoLocation||e.html5Refusal||"IP"!==e.geoCookieType||o()},function(e){s(e)}))}),i.em.subscribe(i.em.GEOLOCATION_CHANGED,function(e){Array.isArray(e.areas)&&void 0!==e.areas&&1<e.areas.length&&(e={type:e.type,locality:e.locality,postalCode:e.postalCode,countryIso2:e.countryIso2,countryIso3:e.countryIso3,country:e.country,disqualified:e.disqualified,areas:e.areas[e.areas.length-1]},t(e))}),i.em.subscribe(i.em.GEOLOCATION_REFUSED,function(){r.get("https://abs.proxistore.com/v3/cookie/geo/untrack").then(function(e){e=JSON.parse(e),loc={type:e.geoCookieType,locality:e.locality,postalCode:e.postalCode,countryIso2:e.countryIso2,countryIso3:e.countryIso3,country:e.country,disqualified:e.disqualified,areas:e.areas},i.em.publish(i.em.GEOLOCATION_CHANGED,loc)},function(e){s(e)})}),t=function(e){var t,n={cmp:0,pa:"22509",si:function(e){switch(e){case"be":return"1";case"fr":return"2";case"es":return"3";default:return"4"}}(e.countryIso2.toLowerCase()),uf_postal_code:e.postalCode,user_country:e.countryIso2.toLowerCase(),user_city:e.locality,user_lat:"",user_long:"",user_iris:"",user_nis9:"",custom_segment:"",rand:(new Date).getTime()},o=("IRIS CODE"===e.areas.label?n.user_iris=e.areas.code:"NISS CODE"===e.areas.label&&(n.user_nis9=e.areas.code),[]);for(t in n)o.push(t+"="+encodeURIComponent(n[t]));e=document.createElement("script");e.async=!0,e.type="text/javascript",e.src="https://js.cookieless-data.com/GS.d?"+o.join("&"),document.getElementsByTagName("head")[0].appendChild(e)},i}((Proxistore=function(e){return e.Ajax=function(){function n(o,i,r){return e.log("AJAX -",i,o,r||""),new Promise(function(e,t){var n=new XMLHttpRequest;n.onreadystatechange=function(){n.readyState===XMLHttpRequest.DONE&&(200<=n.status&&n.status<300?e(n.responseText):t(Error(n.statusText)))},n.onerror=function(){t(Error("Network Error"))},n.withCredentials=!0,n.open(i,o,!0),n.setRequestHeader("Content-Type","application/json"),n.send(r)})}this.get=function(e){return n(e,"GET")},this.post=function(e,t){return n(e,"POST",t)},this.put=function(e,t){return n(e,"PUT",t)},this.delete=function(e,t){return n(e,"DELETE",t)}},e}((Proxistore=function(e){return e.em=new function(){var o={};this.publish=function(e,t){e=o[e];!1!=!!e&&e.forEach(function(e){e.call(this,t)})},this.subscribe=function(e,t){var n=o[e];-1===(n=!1==!!n?o[e]=[]:n).indexOf(t)&&n.push(t)},this.unsubscribe=function(e,t){e=o[e];!1!=!!e&&-1!==(t=e.indexOf(t))&&e.splice(t)}},e}((Proxistore=function(i){"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e){"use strict";if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o)for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(t[i]=o[i])}return t},writable:!0,configurable:!0});var e={apiRoot:"//abs.proxistore.com",apiVersion:"v3",language:"fr",disableHtml5GeoLocation:!1,googleApiKey:"AIzaSyDRj3mL_PQt-lWdvN3RP1iJwLoB95iJdXg",geoLocationCallback:new function(e){},darkTheme:!1,customSegmentId:null,customClassName:null,widgetIds:[],shortWidgetIds:[],verbose:!1,backLink:"",visible:!0,hasConsent:!1,consentString:null},t=(e.apiRootUrl=e.apiRoot,e.apiRootVersionedUrl=e.apiRootUrl+"/"+e.apiVersion,Object.assign({},e));return i.config=function(e){return e&&((t=Object.assign(t,e)).language.match("fr|nl|es"),t.apiRootUrl=t.apiRoot,t.apiRootVersionedUrl=t.apiRootUrl+"/"+t.apiVersion),t},i.log=function(){var e;t.verbose&&((e=Array.prototype.slice.call(arguments)).splice(0,0,"PROXISTORE -"),console.log.apply(this,e))},i.isAllowedToWriteCookies=function(){return new Promise(function(n,o){"function"!=typeof __tcfapi?n(!0):__tcfapi("getTCData",2,function(e,t){i.config().consentString=e.tcString,t?n(e.purpose.consents[1]&&e.vendor.consents[418]):o(!1)})})},i.isSafari=function(){var e=navigator.userAgent.toLowerCase();return-1!==e.indexOf("safari")&&-1===e.indexOf("chrome")},i.isMobile=function(){let e=!1;var t;return t=navigator.userAgent||navigator.vendor||window.opera,e=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))?!0:e},i.appendSegmentsHtml=function(){var e=document.createElement("style");e.textContent="#px_frame_sir_data {display: none;}",document.head.appendChild(e),(e=document.createElement("iframe")).setAttribute("id","px_frame_sir_data"),e.setAttribute("src","//abs.proxistore.com/sirdata/segments.html"),document.body.appendChild(e)},i}(Proxistore||{}))||{}))||{}))||{}))||{});var Proxistore=function(I){function a(e,t){var n=document.createElement("img");n.setAttribute("src",t),e.appendChild(n)}function s(e,t){e=document.createAttribute(e);return e.value=t,e}function b(e,t,n){e=e,o=t,o=document.getElementById(t),null===(t=document.getElementById("ps-pixelCounter-"+e))&&(t=document.createElement("div"),e=s("id","ps-pixelCounter-"+e),t.setAttributeNode(e),e=s("class","ps-pixelCounter"),t.setAttributeNode(e),e=s("style","display:none"),t.setAttributeNode(e),o.appendChild(t));var o,i=t;if(n.constructor!==Array)a(i,n);else for(var r=n.length;r--;)a(i,n[r])}function w(e,t,n){var o=(new Date).getTime(),i=Math.floor(1e4*Math.random())+1,o=o.toString()+String(i).padStart(4,"0");const r={"{CAMPAIGN_ID}":n.campaignId,"{ADVERTISEMENT_ID}":n.advertisementId,"{CONSENT_STRING}":t,"{RANDOM}":o,"{random}":o};return e.replace(/{ADVERTISER_ID}|{CAMPAIGN_ID}|{ADVERTISEMENT_ID}|{CONSENT_GIVEN}|{CONSENT_STRING}|{RANDOM}|{random}/gi,function(e){return r[e]})}function O(e,t,n,o,i){var r;return t.redirectUrl&&(e.urlRedirection=t.redirectUrl),e.urlRedirection=w(e.urlRedirection,n,e),C(e)?(t=n,n=o,r=(o=e).brandSlug,"d26e6a54-face-4547-85f5-20be1ede1a26"===o.advertiserId&&(r="emilfrey"),i?"https://audience-api.wts-okube.com/redirect?brand_slug="+r+"&module=dclic&campaign_id="+o.prefix+o.advertisementId+"&client_id="+n+"&consent_string="+t+"&redirect_url="+o.urlRedirection:"https://audience-api.wts-okube.com/redirect?brand_slug="+r+"&module=dclic&campaign_id="+o.prefix+o.advertisementId+"&consent_string="+t+"&redirect_url="+o.urlRedirection):e.urlRedirection}function _(e,t,n){clearTimeout(window["ps_infoboxTimeout_"+e]);e=document.getElementById("ps-infobox-"+e);e.style.width="horizontal"===t?0===e.clientWidth||n?"250px":0:0===e.clientWidth||n?"116px":0}function x(e){var t=document.getElementsByTagName("body")[0]||document.body,n=document.createElement("div");n.innerHTML='<img src="'+e+'" width="1" height="1" alt="" style="display:none">',t.appendChild(n)}function C(e){return e.measureStoreVisits||e.alwaysUseRedirect}function d(e){return e.measureStoreVisits||e.alwaysInsertScript}function t(e){var t,n,o,i,r,a=e.advertisement,s=e.consentString,c=a.visuals.map(e=>e.impressionTracker).filter(e=>null!==e),l=a.urlPixelCounters;function u(e,t){var n=document,o=n.createElement("script"),n=n.getElementsByTagName("script")[0];o.src=e,t&&o.addEventListener("load",function(e){t(null,e)},!1),n.parentNode.insertBefore(o,n)}e.inApp&&d(a)?(i="https://audience-api.wts-okube.com/pixel.png?brand_slug="+a.brandSlug+"&module=dprint&campaign_id="+a.prefix+a.advertisementId+"&gdpr_consent="+s,x(i=e.proxistoreId?"https://audience-api.wts-okube.com/pixel.png?brand_slug="+a.brandSlug+"&module=dprint&campaign_id="+a.prefix+a.advertisementId+"&gdpr_consent="+s+"&client_id="+e.uvId:i)):d(a)&&(t=a,n=s,o=e.uvId,i=e.proxistoreId,r=t.brandSlug,"d26e6a54-face-4547-85f5-20be1ede1a26"===t.advertiserId&&(r="emilfrey"),u("https://audience-static.wts-okube.com/rtb.js",i?function(){window.stAudience.launchApp({clientId:o,brandSlug:r,module:"dprint",campaignId:t.prefix+t.advertisementId,consentString:n})}:function(){window.stAudience.launchApp({brandSlug:r,module:"dprint",campaignId:t.prefix+t.advertisementId,consentString:n})})),0<c.length?c.forEach(e=>{x(w(e,s,a))}):l&&0<l.length&&l.forEach(e=>{x(w(e,s,a))}),x(e.viewUrl)}return I.advertisementBox=function(e){t(e),I.box(e.advertisement,e.dealId,e.boxId,e.uvId,e.consentString,e.interstitial,e.proxistoreId)},I.box=function(n,o,e,i,t,r,a){g=document.createElement("link"),E=document.getElementsByTagName("head")[0]||document.documentElement,g.setAttribute("rel","stylesheet"),g.setAttribute("type","text/css"),g.setAttribute("href","https://abs.proxistore.com/assets/css/proxistore.min.css"),E.insertBefore(g,E.firstChild);var s,c,l,u,d,p,m,f,g=n.publisherSpot.publisherSpotReferenceId,h="horizontal",E=n.visuals.map(e=>e.urlVisual),y='<img src="%%CLICK_URL_UNESC%%" alt="googleMacroClick" style="display: none;" />',v=(r&&document.querySelector("body").setAttribute("style","display: flex; justify-content: center; align-items: center; height: 100vh; width: 100vw;"),b(g,e,"https://cm.g.doubleclick.net/pixel?google_cm&google_nid=proxistore&google_hm="+btoa(i)),y);Array.isArray(E)&&-1!==E[0].indexOf(".html")?(E=E[0],v+='<iframe id="pxIframeHtml5"title="titleExample"width="'+n.width+'"height="'+n.height+'"src="'+E+'"marginwidth="0" marginheight="0" hspace="0" vspace="0" scrolling="no" frameborder="0"</iframe>',n.urlPixelCounters&&(w(n.urlRedirection,t,n),b(g,e,n.urlPixelCounters)),p=n,m=o,f=t,setTimeout(function(){document.getElementById("pxIframeHtml5").contentWindow.postMessage({advertisementId:p.advertisementId,campaignId:p.campaignId,publisherSpotReferenceId:p.publisherSpot.publisherSpotReferenceId,dealId:m,canCallSmartTrafik:C(p),consentString:f,urlRedirection:p.urlRedirection},"*")},1e3),document.getElementById(e).innerHTML=v):(v+=y+(E=h,y=g,n.surferCityName,r?"<a id='ps-ad-"+y+"' target='_blank'>   <img id='ps-ad-img-"+y+"' class='ps-ad-img "+E+"'></a>":"<span id='ps-infobox-"+y+"' class='ps-infobox "+E+"'>   <span class='ps-actions "+E+"'>       <a id='ps-store-"+y+"' class='ps-store "+E+"' target='_blank'>           <svg viewBox='0 0 525.16 525.16' width='0'><path d='M517.47,244.07,281.09,7.68a26.12,26.12,0,0,0-37,0L7.68,244.07a26.12,26.12,0,0,0,0,37L244.09,517.47a26.12,26.12,0,0,0,37,0L517.49,281.07C527.71,271.15,527.71,254.52,517.47,244.07ZM315,328.35V262.69H209.89v78.84H157.39V236.45a26.34,26.34,0,0,1,26.24-26.26H315V144.55l91.9,91.9Z'/></svg>       </a>   </span></span><a id='ps-ad-"+y+"' class='ps-ad "+E+"' target='_blank'>   <img id='ps-ad-img-"+y+"' class='ps-ad-img "+E+"'></a>"),document.getElementById(e).innerHTML=v,s=g,y=e,c=n,l=t,u=i,d=a,y=document.getElementById(y),clearInterval(window["ps_interval_"+s]),y.style.width=c.width+"px",y.style.height=c.height+"px",y=c.visuals[0],document.getElementById("ps-ad-img-"+s).src=y.urlVisual,document.getElementById("ps-ad-"+s).href=O(c,y,l,u),1<c.visuals.length&&(window["ps_visualIdx_"+s]=2,window["ps_interval_"+s]=setInterval(function(){document.getElementById("ps-ad-img-"+s).src=c.visuals[window["ps_visualIdx_"+s]].urlVisual,document.getElementById("ps-ad-"+s).href=O(c,c.visuals[window["ps_visualIdx_"+s]],l,u,d),window["ps_visualIdx_"+s]=(window["ps_visualIdx_"+s]+1)%c.visuals.length},3e3)),E=function(e){const t=`https://abs.proxistore.com/tags/click/${n.advertisementId}?publisherSpotReferenceId=${n.publisherSpot.publisherSpotReferenceId}&campaignId=${n.campaignId}${i?"&uniqueVisitorId="+i:""}&dealId=${o}&imgSrc=`+e.target.src.replace("https://images.proxistore.com/","");I.isAllowedToWriteCookies().then(function(e){x(t+"&pxsDoNotTrack="+!e)}).catch(function(e){console.error(e),x(t)})},(document.getElementById("ps-ad-"+n.publisherSpot.publisherSpotReferenceId)||document.getElementById("inlineFrameExample")).addEventListener("click",E),r||(v=function(){_(n.publisherSpot.publisherSpotReferenceId,h,!0)},document.getElementById("ps-infobox-"+n.publisherSpot.publisherSpotReferenceId).addEventListener("mouseover",v))),I.appendSegmentsHtml()},I}(Proxistore||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
