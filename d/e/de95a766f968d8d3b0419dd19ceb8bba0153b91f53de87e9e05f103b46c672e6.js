import{k as e,s as r}from"./rsa-plugins-common.min.js";const t="bugsnag",n=["Bugsnag",t],s="0d96a60df267f4a13f808bbaa54e535c",a=["www.test-host.com","localhost","127.0.0.1","[::1]"],o=["userId","userTraits","groupId","groupTraits","anonymousId","config","instance","eventBuffer","traits"],i=e=>{var r;const t=null===(r=e.source.value)||void 0===r?void 0:r.id;return e=>{try{return!!(e=>{var r;const t=null===(r=e.stacktrace)||void 0===r||null===(r=r[0])||void 0===r?void 0:r.file;if(!t||"string"!=typeof t)return!1;const n=t.includes("js-integrations"),s=t.substring(t.lastIndexOf("/")+1);return n||["rsa"].some((e=>s.startsWith(e)&&s.endsWith(".js")))})(e)&&(((e,r)=>{e.updateMetaData("source",{metadataSource:r,snippetVersion:globalThis.RudderSnippetVersion});const{errorMessage:t}=e;e.context=t,t.includes("error in script loading")&&(e.context="Script load failures"),e.severity="error"})(e,t),!0)}catch(e){return!1}}},l=()=>{const e=globalThis.location.hostname;return e&&a.includes(e)?"development":"beta"},u=d=(r,t)=>{n.every(()&&r.loadJSFile({url:"https://d2wy8f7a9ursnm.cloudfront.net/v6/bugsnag.min.js",id:"rs-bugsnag",callback:r=>{r||null==t||t.error(`${"BugsnagPlugin"}${e}Failed to load the Bugsnag SDK.`)}})},c=(e,r,t,n,a=0)=>{const o=u();if("function"==typeof o){if((e=>{var r;let t=null==e||null===(r=e._client)||void 0===r||null===(r=r._notifier)||void 0===r?void 0:r.version;var n;t||(t=null===(n=e({apiKey:s,releaseStage:"version-test",beforeSend:).notifier)||void 0===n?void 0:n.version);return t&&"6"===t.charAt(0)})(o)){const t=((e,r)=>u()({apiKey:s,appVersion:"3.0.0-beta.17",metaData:{SDK:{name:"JS",installType:"cdn"}},beforeSend:i(e),autoCaptureSessions:!1,collectUserIp:!1,maxEvents:100,maxBreadcrumbs:40,releaseStage:l(),user:{id:e.lifecycle.writeKey.value},logger:r,networkBreadcrumbsEnabled:!1}))(e,n);r(t)}}else a>=1e4?t(new Error(`A timeout ${1e4} ms occurred while trying to load the Bugsnag SDK.`)):globalThis.setTimeout(c,100,e,r,t,n,a+100)},g=e=>{const t=r(e,!1,o);return null!==t?JSON.parse(t):void 0},v="Bugsnag",p=()=>({name:v,deps:[],initialize:e=>{e.plugins.loadedPlugins.value=[...e.plugins.loadedPlugins.value,v]},errorReportingProvider:{init:(e,r,t)=>new Promise(((n,a)=>{var o;(o=s).startsWith("{{")||o.endsWith("}}")||0===o.length?a(new Error(((s))):(d(r,t),c(e,n,a,t))})),notify:(e,r,t,n)=>{null==e||e.notify(r,{metaData:{state:g(t)}})},breadcrumb:(e,r,t)=>{null==e||e.leaveBreadcrumb(r)}}});export{p as Bugsnag,p as default};
//# sourceMappingURL=rsa-plugins-remote-Bugsnag.min.js.map
