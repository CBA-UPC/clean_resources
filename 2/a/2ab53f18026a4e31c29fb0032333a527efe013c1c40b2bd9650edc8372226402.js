!this,function(L){"use strict";try{(function(){L=L&&L.hasOwnProperty("default")?L.default:L;var r=ar s= l=Error),a=);var p=/\{\$([^}]+)}/g;ar e,c=);function u(){}var d,t,f,h,g=((e={})["only-available-in-window"]="This method is available in a Window context.",e["only-available-in-sw"]="This method is available in a service worker context.",e["should-be-overriden"]="This method should be overriden by extended classes.",e["bad-sender-id"]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",e["permission-default"]="The required permissions were not granted and dismissed instead.",e["permission-blocked"]="The required permissions were not granted and blocked instead.",e["unsupported-browser"]="This browser doesn't support the API's required to use the firebase SDK.",e["notifications-blocked"]="Notifications have been blocked.",e["failed-serviceworker-registration"]="We are unable to register the default service worker. {$browserErrorMessage}",e["sw-registration-expected"]="A service worker registration was the expected input.",e["get-subscription-failed"]="There was an error when trying to get any existing Push Subscriptions.",e["invalid-saved-token"]="Unable to access details of the saved token.",e["sw-reg-redundant"]="The service worker being used for push was made redundant.",e["token-subscribe-failed"]="A problem occured while subscribing the user to FCM: {$errorInfo}",e["token-subscribe-no-token"]="FCM returned no token when subscribing the user to push.",e["token-subscribe-no-push-set"]="FCM returned an invalid response when getting an FCM token.",e["token-unsubscribe-failed"]="A problem occured while unsubscribing the user from FCM: {$errorInfo}",e["token-update-failed"]="A problem occured while updating the user from FCM: {$errorInfo}",e["token-update-no-token"]="FCM returned no token when updating the user to push.",e["use-sw-before-get-token"]="The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.",e["invalid-delete-token"]="You must pass a valid token into deleteToken(), i.e. the token from getToken().",e["delete-token-not-found"]="The deletion attempt for token could not be performed as the token was not found.",e["delete-scope-not-found"]="The deletion attempt for service worker scope could not be performed as the scope was not found.",e["bg-handler-function-expected"]="The input to setBackgroundMessageHandler() must be a function.",e["no-window-client-to-msg"]="An attempt was made to message a non-existant window client.",e["unable-to-resubscribe"]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$errorInfo}",e["no-fcm-token-for-resubscribe"]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",e["failed-to-delete-token"]="Unable to delete the currently saved token.",e["no-sw-in-reg"]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",e["incorrect-gcm-sender-id"]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",e["bad-scope"]="The service worker scope must be a string with at least one character.",e["bad-vapid-key"]="The public VAPID key is not a Uint8Array with 65 bytes.",e["bad-subscription"]="The subscription must be a valid PushSubscription.",e["bad-token"]="The FCM Token used for storage / lookup was not a valid token string.",e["bad-push-set"]="The FCM push set used for storage / lookup was not not a valid push set string.",e["failed-delete-vapid-key"]="The VAPID key could not be deleted.",e["invalid-public-vapid-key"]="The public VAPID key must be a string.",e["use-public-key-before-get-token"]="The usePublicVapidKey() method may only be called once and must be called before calling getToken() to ensure your VAPID key is used.",e["public-vapid-key-decryption-failed"]="The public VAPID key did not equal 65 bytes when decrypted.",e),y=new a("messaging","Messaging",g),w=new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110]),m="https://fcm.googleapis.com";d||(d={})).TYPE_OF_MSG="firebase-messaging-msg-type",t.DATA="firebase-messaging-msg-data",(h=f||(f={})).PUSH_MSG_RECEIVED="push-msg-received",h.NOTIFICATION_CLICKED="notification-clicked";var _=function(){eturn e.prototype.getToken=e.prototype.updateToken=e.prototype.deleteToken=e}();ar M="undefined",D="fcm_token_object_Store";ar C=);var O=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.dbName="fcm_token_details_db",e.dbVersion=3,e.objectStoreName="fcm_token_object_Store",e}return i(e,t),e.prototype.onDbUpgrade=e.prototype.getTokenDetailsFromToken=e.prototype.getTokenDetailsFromSWScope=e.prototype.saveTokenDetails=e.prototype.deleteToken=e}(C);ar E=function(t){eturn i(e,t),e.prototype.onDbUpgrade=e.prototype.getVapidFromSWScope=e.prototype.saveVapidDetails=e.prototype.deleteVapidDetails=e}(C),x="messagingSenderId",K=function(){eturn e.prototype.getToken=e.prototype.manageExistingToken=e.prototype.updateToken=e.prototype.getNewToken=e.prototype.deleteToken=e.prototype.deleteTokenFromDB=e.prototype.getPushSubscription=e.prototype.requestPermission=e.prototype.useServiceWorker=function(e){throw y.create("only-available-in-window")},e.prototype.usePublicVapidKey=function(e){throw y.create("only-available-in-window")},e.prototype.onMessage=function(e,t,n){throw y.create("only-available-in-window")},e.prototype.onTokenRefresh=e.prototype.setBackgroundMessageHandler=e.prototype.delete=e.prototype.getNotificationPermission_=e.prototype.getTokenDetailsModel=function(){return this.tokenDetailsModel},e.prototype.getVapidDetailsModel=function(){return this.vapidDetailsModel},e.prototype.getIidModel=e}();var A="FCM_MSG",V=function(n){eturn i(e,n),e.prototype.onPush=function(e){e.waitUntil(this.onPush_(e))},e.prototype.onSubChange=function(e){e.waitUntil(this.onSubChange_(e))},e.prototype.onNotificationClick=e.prototype.onPush_=e.prototype.onSubChange_=e.prototype.onNotificationClick_=e.prototype.getNotificationData_=e.prototype.setBackgroundMessageHandler=e.prototype.getWindowClient_=e.prototype.attemptToMessageClient_=e.prototype.hasVisibleClients_=e.prototype.sendMessageToWindowClients_=e.prototype.getSWRegistration_=e.prototype.getPublicVapidKey_=e}(K);r U,j=function(n){eturn i(e,n),e.prototype.getToken=function(){return b(this,void 0,void 0,function(){return v(this,function(e){switch(e.label){case 0:return this.manifestCheckPromise||(this.manifestCheckPromise=function(){return b(this,void 0,void 0,function(){var t,n;return v(this,})}()),[4,this.manifestCheckPromise];case 1:return e.sent(),[2,n.prototype.getToken.call(this)]}})})},e.prototype.requestPermission=e.prototype.useServiceWorker=e.prototype.usePublicVapidKey=e.prototype.onMessage=function(e,t,n){return"function"==typeof e?this.onMessageInternal(e,t,n):this.onMessageInternal(e)},e.prototype.onTokenRefresh=e.prototype.waitForRegistrationToActivate_=e.prototype.getSWRegistration_=e.prototype.getPublicVapidKey_=e.prototype.setupSWMessageListener_=e}(K);={isSupported:R},L.INTERNAL.registerService("messaging",U)}).apply(this,arguments)}catch(e){throw console.error(e),new Error("Cannot instantiate firebase-messaging - be sure to load firebase-app.js first.")}});
//# sourceMappingURL=firebase-messaging.js.map
