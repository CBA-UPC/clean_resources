(function(window,$,undefined){$.extend(true,$.Mason.settings,{layoutPriorities:{upperPosition:1,shelfOrder:1}});$.Mason.prototype._placeBrick=function(brick){var $brick=$(brick),dir=this.horizontalDirection,colSpan,groupCount,groupY,groupColY;colSpan=Math.ceil($brick.outerWidth(true)/(this.columnWidth+this.options.gutterWidth));colSpan=Math.min(colSpan,this.cols);if(colSpan===1){groupY=this.colYs}else{groupCount=this.cols+1-colSpan;groupY=[];for(var j=0;j<groupCount;j++){groupColY=this.colYs.slice(j,j+colSpan);groupY[j]=Math.max.apply(Math,groupColY);}}
var minimumY=Math.min.apply(Math,groupY);var anchorPoint={top:0}
anchorPoint[dir]=0;var prevBrick=this.styleQueue.slice(-1)[0];if(prevBrick!=undefined){var width=prevBrick.$el.outerWidth(true);var offset=prevBrick.style[dir]-this.offset.x;anchorPoint[dir]=offset+width;anchorPoint.top=prevBrick.style.top;var spaceForBrick=anchorPoint[dir]+colSpan*this.columnWidth;var availableSpace=this.cols*this.columnWidth;if(spaceForBrick>availableSpace){anchorPoint[dir]=0;}}
var priorities=this.options.layoutPriorities;var penalty=[];for(var i=0,len=groupY.length;i<len;i++){var horizontal=Math.abs(anchorPoint[dir]-this.columnWidth*i);var vertical=Math.abs(anchorPoint.top-groupY[i]);var sum_of_powers=Math.pow(horizontal,2)+Math.pow(vertical,2);var distance=Math.round(Math.sqrt(sum_of_powers));var shelfPenalty=priorities.shelfOrder*distance;var upperPenalty=priorities.upperPosition*(groupY[i]-minimumY);penalty[i]=upperPenalty+shelfPenalty;}
var minPenalty=Math.min.apply(null,penalty);for(i=0,len=penalty.length;i<len;i++){if(penalty[i]===minPenalty){shortCol=i;break;}}
var position={top:groupY[shortCol]+this.offset.y};position[dir]=this.columnWidth*shortCol+this.offset.x;this.styleQueue.push({$el:$brick,style:position});var setHeight=groupY[shortCol]+$brick.outerHeight(true),setSpan=this.cols+1-len;for(i=0;i<setSpan;i++){this.colYs[shortCol+i]=setHeight;}}})(window,jQuery);