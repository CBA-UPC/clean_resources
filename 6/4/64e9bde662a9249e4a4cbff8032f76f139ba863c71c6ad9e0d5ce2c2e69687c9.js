const m=typeof PerformanceObserver=="function",g=(()=>{var e,t;return m?!!((t=(e=PerformanceObserver==null?void 0:PerformanceObserver.supportedEntryTypes)==null?void 0:e.includes)!=null&&t.call(e,"paint")):!1})(),P=(()=>{var e,t;return m?!!((t=(e=PerformanceObserver==null?void 0:PerformanceObserver.supportedEntryTypes)==null?void 0:e.includes)!=null&&t.call(e,"largest-contentful-paint")):!1})(),T=.01,l={_appMountedTime:0,_firstRouteLoadTime:0,_firstContentfulPaint:0,_largestContentfulPaint:0,get appMountedTime(){return this._appMountedTime},setAppMounted(){this._appMountedTime||(this._appMountedTime=performance.now())},get firstRouteLoadTime(){return this._firstRouteLoadTime},setRouteLoaded(){this._firstRouteLoadTime||(this._firstRouteLoadTime=performance.now())},get firstContentfulPaint(){return this._firstContentfulPaint},setFirstContentfulPaint(){this._firstContentfulPaint||(this._firstContentfulPaint=performance.now())},get largestContentfulPaintsetLargestContentfulPaint;async function p(e=2e4){const t=performance.now(),a=Math.max(0,e-t);return new Promise(}async function d({performanceTimelineEventName:e,extraWaitTime:t=200}){return new Promise(a=>{(function n(){let i=200;if(l[e]){const o=performance.now()-l[e];if(i=Math.max(0,t-o),!i)return a(`fallback using ${e}`)}setTimeout(n,i)})()})}function w(e){typeof window=="object"&&!window[e]&&(window[e]=!0,typeof CustomEvent=="function"&&window.dispatchEvent(new CustomEvent(e)))}Promise.race([new Promise((e,t)=>{if(console.debug({module:"performanceMonitor",message:"waitForFirstContentfulPaint starting",elapsedTime:performance.now()}),g)try{new PerformanceObserver((n,i)=>{var r,s;const o=(r=n==null?void 0:n.getEntries)==null?void 0:r.call(n),c=(s=o==null?void 0:o.find)==null?void 0:s.call(o,;if(c)return i.disconnect(),e(c)}).observe({type:"paint",buffered:!0})}catch(a){t(a)}else t(new Error("paint not supported"))}).catch(e=>(console.debug({module:"performanceMonitor",message:`waitForFirstContentfulPaint ${e}`,elapsedTime:performance.now()}),d({performanceTimelineEventName:"appMountedTime",extraWaitTime:200}))),p(1e4)]).then(e=>{console.debug({module:"performanceMonitor",message:"waitForAppFirstContentfulPaint complete",elapsedTime:performance.now(),result:e})}).catch(e=>{console.debug({module:"performanceMonitor",message:"waitForAppFirstContentfulPaint complete with errors",elapsedTime:performance.now(),result:e})}).finally(()=>{l.setFirstContentfulPaint(),w("lscoAppFirstContentfulPaint")});const h=(()=>Promise.race([new Promise((e,t)=>{if(console.debug({module:"performanceMonitor",message:"waitForLargestContentfulPaint starting",elapsedTime:performance.now()}),P)try{const a=document.documentElement.clientHeight*document.documentElement.clientWidth;let n=0;new PerformanceObserver((o,c)=>{var f;const r=(f=o==null?void 0:o.getEntries)==null?void 0:f.call(o),s=r==null?void 0:r[r!=null&&r.length?r.length-1:0];n=s.size+n;const u=n/a;if(s&&u>T)return c.disconnect(),e(r)}).observe({type:"largest-contentful-paint",buffered:!0})}catch(a){t(a)}else t(new Error("largest-contentful-paint not supported"))}).catch(e=>(console.debug({module:"performanceMonitor",message:`waitForLargestContentfulPaint ${e}`,elapsedTime:performance.now()}),d({performanceTimelineEventName:"firstRouteLoadTime",extraWaitTime:1e3}))),p(2e4)]).then(e=>{console.debug({module:"performanceMonitor",message:"waitForLargestContentfulPaint complete",elapsedTime:performance.now(),result:e})}).catch(e=>{console.debug({module:"performanceMonitor",message:"waitForLargestContentfulPaint complete with errors",elapsedTime:performance.now(),result:e})}).finally()();export{l,h as w};
