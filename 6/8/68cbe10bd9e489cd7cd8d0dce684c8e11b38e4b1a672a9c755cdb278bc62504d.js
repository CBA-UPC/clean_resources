document.domain = 'myfreecams.com';GetEl('all_offline_friends_link').innerHTML = A('offline_friends') + "All Offline Friends</a>";g_hPlatform.fcsActive = true;var g_hAuth = { "ctx":[], "tkx":"" };var events = new MfcEvents({ wildcard: false, delimiter: '.', newListener: false, maxListeners: 10, verboseMemoryLeak: false});if(typeof(g)=='undefined' ) { g = new MfcGraphics(); }var g_bSFWCheck = ( top.location.search.match(/\Wsfw_checker/) ) ? true : false;g_hIgnoredUsers = {};var g_oCmdQ = new MfcQueue(); g_oCmdQ.Start(); g_UA = new MfcUserAgent();window.onorientationchange = g_UA.DeviceOrientation;var g_hTypeMap = {};var g_bDebug = ( top.location.search.match(/\Wdebug/) ) ? true : false;g_bDebug = ( top.location.search.match(/\Wrxverbose=/) ) ? true : g_bDebug;var g_oChatCommandHistory = {};var g_hCk = {};UpdateCookieHash();var g_hQS = MfcStringUtilities.parse_query_string(location.search + ( g_hCk.qs || '' ) );var g_bFlashEnabled = parseFloat(GetSwfVer() ) > -1 ? true : false;var g_sForcePlayer='';var g_sForcePlayerJSTech='';var g_sForcePlayerJSTechOverride;if(g_hQS.video_player_mode )
{ var sVal = g_hQS.video_player_mode; var aForcePlayer = sVal.split('|'); if(aForcePlayer[0] && aForcePlayer[1] ) { g_sForcePlayer = aForcePlayer[0]; g_sForcePlayerJSTech = aForcePlayer[1]; } else { g_sForcePlayer = sVal; }}else if(g_hQS['videoplayerjs'] ){ g_sForcePlayer = 'videojs';}if(g_hQS.video_player_tech_override ) { g_sForcePlayerJSTechOverride = g_hQS.video_player_tech_override; }if(g_hQS.ngvideo == 1 ) { g_hQS.video_type = 'obs'; }var g_hVideoServerConfig = { platform: g_hPlatform, video_map: w.hVideoMap, server_config: w.hServerConfig, player_type_override: g_sForcePlayer, player_type_override_JSTech: g_sForcePlayerJSTech, player_type_override_JSTech_override: g_sForcePlayerJSTechOverride, fFlashAvailable: function(){ return g_bFlashEnabled; }, fIsBroadcastState: IsBroadcastState, fLog: Log, hfClient: { session_id: function(){ return g_nSessionId; }, passcode:  user_id: }, fGetFcTkx: function(){ return g_hAuth; }, fGetClubshows:  fBannedByUserId:  fGetVersion_PLAYSTATION:  bSnapsVideo: ( g_hQS['iosvideo'] == 'on'),
 bDisableHlsAbr: !! g_hQS['disable_hls_abr'],};var g_default_clientVideo = new MfcClientVideo(g_hVideoServerConfig );var g_fBodyLoaded = false;var g_nZgwLoaded = 0;var g_bLoadChat = 0;var g_hGroupShowInitiators = {};var g_aPreviousMessages = [];var g_nNullTimeArg = 0;var g_nNullTimeArg_Initial = -1;var g_sModelLoadMethod = 'chat';var g_hUsers = g_hUsers || {};var g_hBannedFrom = g_hBannedFrom || {};g_hUsers[0] = { username: g_hPlatform.name, access_level:4 };var g_bNewEncodeScheme = true;var g_hWindows={};var g_nBroadcasterCount = -4;var g_oChatApplet = null;var g_hoPMWindows = {};var g_hoPlayerWindows = {};var g_nSessionId = 0;var g_nConnectingMode = 0;var g_hOnlineBlockHTML = {};var g_hSelf = { show_main_menu: 1, user_notepad_cache: {} };var g_hClubshows = { };var g_bLoginDone = false;var g_bReconnecting = false;var g_nInstanceTime = new Date().getTime();var g_bFCTYPE_DETAILS_Received = false;var g_bFCTYPE_MODELGROUP_Received;var g_Date = new Date();var g_hPost = false;var g_hLogoutTimer = null;var g_sZgwSess = '';var g_nLastStamp = 0;
var g_fConnected = false;var g_nSKey = 0;function ResetSeed() { g_nSKey = Math.floor(100000 + (899999 * Math.random())); }var g_sHash = top.location.hash.substr(1,top.location.hash.length);if(g_sHash.match(/\W/) || g_hQS['load'] ) { g_sHash=''; }g_sHash = g_sHash.toLowerCase();if ( ( g_UA.mobile || g_UA.tablet ) && ( ( g_hQS['mfwd'] == 1 ) || ( ! g_hQS['dfwd'] && g_hPlatform && g_hPlatform.id == PLAT_CAM ) )){ var sNewUrl = (top.location.protocol == 'https:' ? 'https://' : 'http://') + 'm.' + ( g_hPlatform && g_hPlatform.domain ? g_hPlatform.domain : document.domain ) + '/' + ( g_sHash && g_sHash != 'homepage' ? ( 'models/' + g_sHash ) : '' ) + location.search; top.location.href = sNewUrl;}var g_bNoFlash = false;var g_nFlash9 = false;if (DetectFlashVer(9,0,0)) g_nFlash9 = true;var g_sConnectionMode = g_hQS['conn_mode'] || 'none';if (g_sConnectionMode == 'java' ) g_sConnectionMode = 'none';if(g_UA.iOS && navigator.userAgent.match(/(iP\w+) OS 4_[01]/) ){ alert("Your " + RegExp.$1 + " device now supports WebSockets. Please connect your device to iTunes and upgrade your software.");}var g_bChatOverlayMode = (g_hQS['chat_overlay'] ? true : false);var g_fNoPrivateGroupSupport = function(nUserId, clientVideo, sSessType )
{ if(clientVideo && clientVideo.videoProfile ) { if ( clientVideo.videoProfile && clientVideo.videoProfile.player_type == 'livesnaps' ) { return 1; } if(sSessType != 'club_show' ) { var isExtOBS = false; var isOBS = false; if(t.g_hUsers[ nUserId ] && t.g_hUsers[ nUserId ].videoserver ) { isExtOBS = ( clientVideo.IsObsVideo_ext(t.g_hUsers[ nUserId ].videoserver ) ); isOBS = ( clientVideo.IsObsVideo(t.g_hUsers[ nUserId ].videoserver ) ); } if ( isOBS && ! isExtOBS ) { return 3; } } } return 0;};var g_oAnimatedLiveSnaps = new AnimatedLiveSnaps({ getSnapUrl: t.LiveSnapUrl });if ( location.search.indexOf('no_js_splash') == -1 && ( g_sConnectionMode == 'none' || g_sConnectionMode == '' )){ DetermineConnectionMode();}unction DetermineConnectionMode(){ var bPreferWebSocket = false; if ( ! ( navigator.userAgent.match(/MSIE [6789]/) ) && "WebSocket" in window ) { g_sConnectionMode = 'websocket'; } else if (g_nFlash9 == true && ( location.search.indexOf('no_flash') == -1 && ! g_bNoFlash ) ) { g_sConnectionMode = 'flash'; } else { g_sConnectionMode = 'ajax'; } if(g_sConnectionMode == 'websocket' && g_UA.Android && g_UA.Android.indexOf("4.") == 0 ) { if (/Android.+Chrome|CrMo/.test(navigator.userAgent)) g_sConnectionMode = 'websocket'; else g_sConnectionMode = 'ajax'; }}w.name = "top_level";d.name = "top_level";window.onload = window.onunload = function SetupChatConnection(){
 if(g_hCk.al === '0' && g_hCk.user_id && g_hCk.passcode ) { console.log('unverified account, connection not permitted'); LoadAll('purchase',{ target: 'main' }); return; } if ( SetupChatConnection._firstRun ) { LoadServerConfig(); } LoadAll(); var sHtml = ''; var sScript = ''; if (g_sConnectionMode == 'websocket') { g_sWsHost = SelectChatServer('websocket'); sScript = ( window.sCdnHost || '' ) + g_Paths.jsPathWsGw + '?vcc=' + g_nVcc; Log('server_type: ' + g_sConnectionMode + ', server: ' + g_sWsHost + ', Safari? ' + g_UA.Safari + ', Chrome? ' + g_UA.Chrome + ' iOS? ' + g_UA.iOS); } else if (g_sConnectionMode == 'ajax') { var sZgwScript = 'zgw_ajax.html'; var sHost = SelectChatServer('ajax'); var nPort = top.location.protocol == 'https:' ? 8443 : 80; sScript = g_Paths.jsPathZgwProxy; var sSrc = "//" + sHost + "." + t.g_hPlatform.domain + ":" + nPort + "/lib/" + sZgwScript + "?" + Math.random(); Log('server_type: ' + g_sConnectionMode + ', server: ' + sHost + ', Safari? ' + g_UA.Safari + ', Chrome? ' + g_UA.Chrome + ' iOS? ' + g_UA.iOS + "\niframe src: " + sSrc ); sHtml += "<iframe name=ajaxframe id=ajaxframe frameborder=0 border=0 sr"+"c='" + sSrc + "' width=1 height=1><\/iframe>"; } var existingEl = document.getElementById('_chat_connection_html'); if ( existingEl ) { existingEl.parentNode.removeChild(existingEl); } var oChatConnectionHtml = document.createElement('div');
 oChatConnectionHtml.id = '_chat_connection_html'; oChatConnectionHtml.style.width = '0px'; oChatConnectionHtml.style.height = '0px'; if(sScript ) { var oScript = document.createElement('script'); oScript.type = 'text/javascript'; oScript.src = sScript; oChatConnectionHtml.appendChild(oScript); } var oDiv = document.createElement('div'); oDiv.innerHTML = sHtml; oChatConnectionHtml.appendChild(oDiv); document.getElementsByTagName('body')[0].appendChild(oChatConnectionHtml); SetupChatConnection._firstRun = false;}SetupChatConnection.AjaxReconnect = function(options ){ SetupChatConnection.seconds_remaining = 35; var sMsg = "The AJAX chat server connection has been interrupted.<br><br>Reconnect in <span id=SetupChatConnection_seconds_remaining>" + SetupChatConnection.seconds_remaining + "</span> seconds."; DhtmlPrompt({ prompt_type: 'alert', message: sMsg, 'center': 1, 'force': 1 }); setTimeout(SetupChatConnection.AjaxReconnect_Execute, 35000 ); SetupChatConnection.reconnect_timer = setInterval(function() { if(SetupChatConnection.seconds_remaining > 1 ) { SetupChatConnection.seconds_remaining--; var oEl = GetEl('SetupChatConnection_seconds_remaining'); if(oEl ) { oEl.innerHTML = SetupChatConnection.seconds_remaining; } } else { clearTimeout(SetupChatConnection.reconnect_timer ); DhtmlPrompt.oDhtmlPopup.close(); SetupChatConnection.AjaxReconnect_Execute();
 } },1000);};SetupChatConnection.seconds_remaining = 0;SetupChatConnection.AjaxReconnect_Execute = function(){ if (window.frames['ajaxframe']) { top.location.reload(); }};SetupChatConnection._firstRun = true;function LoadServerConfig(oCallback ){ try { var _oCallback = oCallback; var oReq = createRequestObject(); oReq.open("get", g_sCdnHost + g_Paths.jsPathServerconfig + "?nc=" + Math.round(new Date().getTime() / 86400 ) + g_nVcc ); oReq.onreadystatechange = function() { if (oReq.readyState != 4) { return; } var serverConfig = null; if ((serverConfig = ParseJSON(oReq.responseText))) w.hServerConfig = serverConfig; if(_oCallback ) { _oCallback(); } }; oReq.send(null); } catch (oError) { Log('LoadServerConfig ajax open caught exception: ' + oError.description ); }}function SelectChatServer(sConnectionMode ){
 SelectChatServer.sHost = ''; SelectChatServer.sType = ''; SelectChatServer.aHostOptions = hServerConfig['chat_servers']; if(sConnectionMode == 'websocket' ) { SelectChatServer.hWebsocketProtocol = { hybi00: 1, hybi10: 1, rfc6455: 1 }; SelectChatServer.aHostOptions = new Array(); for(var sServer in hServerConfig['websocket_servers'] ) { SelectChatServer.aHostOptions.push(sServer );  } } else if(sConnectionMode == 'ajax' ) { SelectChatServer.aHostOptions = hServerConfig['ajax_servers']; } if(! SelectChatServer.aHostOptions || SelectChatServer.aHostOptions.length == 0 ) { SelectChatServer.aHostOptions = ['chat1','chat2','chat3','chat4'];
 } if(g_hPlatform.id == PLAT_CAM && SelectChatServer.aHostOptions.length > 0 ) { for(var a=0; a < SelectChatServer.aHostOptions.length; a++ ) { if(SelectChatServer.aHostOptions[a].match(/xchat(\d+)/) ) { if(parseInt(RegExp.$1) < 62 ) { SelectChatServer.aHostOptions.splice(a, 1); a--; } } } } if(top.location.search.match(/server=([\w\-]+)/) ) { SelectChatServer.sHost = RegExp.$1; } else { var nIdx = Math.floor(SelectChatServer.aHostOptions.length * Math.random() ); SelectChatServer.sHost = SelectChatServer.aHostOptions[nIdx]; } if(sConnectionMode == 'websocket' && hServerConfig['websocket_servers'][ SelectChatServer.sHost ] ) { SelectChatServer.sType = hServerConfig['websocket_servers'][ SelectChatServer.sHost ]; } if(g_bDebug && typeof(DebugControls) == 'object' && DebugControls.Load ) { DebugControls.Load(); } return SelectChatServer.sHost;}function IsLwsChatServer(sHost){ var retVal = false; if (hServerConfig.hasOwnProperty('wsinfo')) { if (hServerConfig.wsinfo.hasOwnProperty(sHost))
 { retVal = (hServerConfig.wsinfo[ sHost ] === 1); } } return retVal;}function AppendToUserHash(nUserId,hKeyVals){ if ( ! g_hUsers[ nUserId ] ) { g_hUsers[ nUserId ] = {}; g_hUsers[ nUserId ]['state'] = FCS.FCVIDEO_OFFLINE; } for(var sK in hKeyVals) { g_hUsers[ nUserId ][sK] = hKeyVals[sK]; if(nUserId == g_hSelf['user_id'] ) { g_hSelf[ sK ] = hKeyVals[sK]; } }}function TxCmd(nType, nFrom, nTo, nArg1, nArg2, payload, extra ){ if (nType == undefined) nType = 0; if (nFrom == undefined) nFrom = 0; if (nArg1 == undefined) nArg1 = 0; if (nArg2 == undefined) nArg2 = 0; if(typeof(payload) == 'object' ) { payload = JSON.stringify(payload); } if (payload == undefined) payload = ''; var sCommand = nType + " " + nFrom + " " + nTo + " " + nArg1 + " " + nArg2; if (payload != null && payload.length > 0) { sCommand += " " + payload; } if(g_bDebug ) Log("%cTX: " + MfcStringUtilities.char_padding(g_hTypeMap[ nType ],20,' ','right') + " " + sCommand,"font-weight:bold;background-color:#FFFF88;"); if(nType == FCS.FCTYPE_PMESG && top.location.search.match(/pmr=(\d+)/) )
 { nType = RegExp.$1; console.log('converted FCTYPE_PMESG to ' + nType ); } try { var hMsg = {}; hMsg.c = nType; hMsg.f = nFrom; hMsg.t = nTo; hMsg.a1 = nArg1; hMsg.a2 = nArg2; if (payload != null && payload.length > 0) { hMsg.d = payload; } if(g_sConnectionMode == 'ajax' ) zgw_Post([ nType, nFrom, nTo, nArg1, nArg2, payload ]); else zgw_Post(hMsg); } catch(oError) { Log("TXCmd Error: " + oError.description); }}function UpdateCookieHash(){ var aPairs = new Array(); if (aPairs = document.cookie.split("; ")) { for (var i = 0; i < aPairs.length; i++) { g_hCk[ aPairs[i].substring(0,aPairs[i].indexOf('=')) ] = aPairs[i].substring(aPairs[i].indexOf('=')+1,aPairs[i].length); } }}function SetCookie(name,value,expires,path,domain,secure){ path = path || '/'; domain = domain || g_hC['domain']; g_hCk[name] = value;
 if (! value || value == '') { expires = "01-Jan-01 00:00:01 GMT"; value = 1; } else { if (expires != 'session' && ! expires) { expires = "Mon, 25 Oct 2032 19:36:54 UTC"; } } var sNewCookie = ""; sNewCookie += name + "="+value+";"; if(expires && expires != 'session') sNewCookie += "expires="+expires+";"; if(secure) sNewCookie += "secure=" + secure + ";"; if(path) sNewCookie += "path="+path+";"; if(domain) sNewCookie += "domain="+domain+";"; document.cookie = sNewCookie;} MfcNotification.requestPermission = function(){ if(g_UA.IE ) { return; } if (!("Notification" in window)) { DhtmlPrompt({ prompt_type: 'alert', message: 'This browser does not support desktop notifications.' }); return; } else if (Notification.permission !== "denied") { Notification.requestPermission(; }};MfcNotification.new = function(options ){ if(g_UA.IE ) { return; } MfcNotification.requestPermission();
 if(typeof(options) != 'object' || ! options.message ) { return; } if(document.hasFocus() ) { return; } if(MfcNotification.permission != 'granted' ) { return; } var notification = new Notification(options.message, options ); notification.onclick = function(event) { event.preventDefault(); if(DhtmlWindowMode.isActive() ) { parent.focus(); window.focus(); //just in case, older browsers
 } if(typeof(options.onclick) == 'function' ) { options.onclick(); } this.close(); }; setTimeout(notification.close.bind(notification), 5000);};function LoadAll(sResource, hOptions ){ hOptions = hOptions || {}; if(WaitingForGlobal('g_bPlayerJsLoaded',LoadAll,arguments) ) { return; } if(g_hPlatform.id == PLAT_MFC && g_hCk[ 'nmc' + ( t.g_hCk.user_id || 0 ) ] ) { NightMode_Top.enabled = true; NightMode.Load(); } LoginTimer.checkPoint('LoadAll()'); if(location.search.indexOf('no_js_splash') > -1 ) { return; } if (top.g_sSlaveServer) { Log("WWW Client Server: " + top.g_sSlaveServer ); } LoadPersonalMenu.SuspendUpdates = 0; var aMatches = top.location.search.match(/^\?(\w+)\W?/); if(aMatches && g_hResources[ aMatches[1] ] ) { g_hQS['load'] = aMatches[1]; } var sResource = sResource || ( g_hResources[g_hQS['load']] && g_hQS['load'] ) || ''; g_hOnlineBlockHTML = {}; UpdateCookieHash(); LoadLogin(); LoadMenu(); if ( !g_bLoginDone && !hOptions['login_complete'] ) { if(sResource && g_hResources[ sResource ] && g_hResources[ sResource ]['target'] == '_blank' ) { location.href = g_hResources[ sResource ]['page']; return; } else if ( g_hQS['disable_model_notification'] || g_hQS['remove_email_notify'] ) { sResource = 'account'; } else if(g_hQS['buy']) { Load('login' , { verification: g_hQS['buy'], post_load: 'purchase' || '', login_alert: 1 }); return; } else if (g_hQS['code'] || g_hQS['verification'])
 { g_hQS['verification'] = g_hQS['verification'] || g_hQS['code']; g_hQS['post_load'] = sResource; Load('login', g_hQS ); return; } } else { g_hQS['verification'] = ''; g_hQS['code'] = ''; g_hQS['buy'] = ''; g_hQS['load'] = ''; } Log('g_sConnectionMode: ' + g_sConnectionMode); InitialLoadingScreen.updateMessage(null,"LoadAll..."); if (hOptions['login_complete']) { } if(g_hQS['mode'] == "under_construction") { sResource = "under_construction"; } else if(g_hQS['delete']) { sResource = "delete_account"; } if(hOptions['login']) { g_hQS['verification'] = ''; } g_hQS['target'] = 'main'; A_Click(event, { 'resource': sResource || 'homepage',
 'target' : 'main', 'window_params': g_hQS }); if (g_hQS['mode'] == "under_construction") return; setTimeout(FlushCache,1800000); if(Recommend.bIsDisplayed ) { Recommend.Initialize(); } if(CustomAlerts_SideMenu.bIsDisplayed ) { CustomAlerts_SideMenu.Initialize(); } TogglePersonalMenu.Init(); RefreshServerConfig.Poll();}function ClearUserData(){ for(var nK in g_hUsers ) { delete g_hUsers[nK]; }}events.onRx(FCS.FCTYPE_CONNECTING,function(fcMsg) { FcConnecting(fcMsg); });function FcConnecting(fcMsg){ Log('** CONNECTING *** g_nConnectingMode : ' + fcMsg.type + ', count -3'); g_nConnectingMode = fcMsg.type; g_nBroadcasterCount = -3; for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.OnlineBroadcasterList.Refresh('force'); } } if (window.frames['ajaxframe']) { zgw_Server('connecting'); }}events.onRx(FCS.FCTYPE_CONNECTED,function(fcMsg){ FcConnected(fcMsg); });function FcConnected(fcMsg){ Log('** CONNECTING *** g_nConnectingMode : ' + fcMsg.type + ', count -2'); g_nConnectingMode = fcMsg.type; g_nBroadcasterCount = -2; for ( var sK in g_hUsers)
 { if (g_hUsers[sK]) { g_hUsers[sK]['state'] = FCS.FCVIDEO_OFFLINE; } } if (g_sConnectionMode == 'ajax') { sUser = g_hCk['username'] || 'guest'; sPass = g_hCk['passcode'] || 'guest'; if (sPass == 'guest' || sPass == 'undefined') { sUser = sPass = 'guest'; } if (g_hPlatform.fcsActive) zgw_TxLogin(fcMsg.data, g_hPlatform.id + '/' + sUser, sPass); else zgw_TxLogin(fcMsg.data, sUser, sPass); } for(var sK in g_hWindows ) { if(g_hWindows[sK].window && g_hWindows[sK].window.OnlineBroadcasterList ) { g_hWindows[sK].window.OnlineBroadcasterList.Refresh('force'); } }}events.onRx(FCS.FCTYPE_SHUTDOWN,;events.onRx(FCS.FCTYPE_DISCONNECTED,function(fcMsg) { FcDisconnected(fcMsg ); });function FcDisconnected(fcMsg ){ fcMsg = fcMsg || {}; if(g_hCk.al === '0' && g_hCk.user_id && g_hCk.passcode) { console.log('unverified account, connection not permitted'); LoadAll('purchase',{ target: 'main' }); return; }
 g_nConnectingMode = fcMsg.type; g_bReconnecting = true; ClearUserData(); if(g_fConnected == true ) { g_fConnected = false; g_nConnectingMode = FCS.FCTYPE_CONNECTING; g_nSessionId = 0; g_hSelf.sessionid = 0; UCR.hRooms = {}; g_nBroadcasterCount = -3; LoadLogin("Disconnected from " + g_hPlatform.name + ", reconnecting..."); LoadPersonalMenu('disconnected'); zgw_Disconnect(); FcAddFriend.FriendReset(); Bookmarks.Reset(); FriendsList.Load({ force: true }); Bookmarks.Render(); MissMFC.Render(); CustomAlerts_SideMenu.Render(); TrendingRooms.Render(); PopularRooms.Render(); FcSessionState.ModelReset(); Load('homepage'); for(var sK in g_hWindows ) { if(g_hWindows[sK].window.LoadPlayer && g_hWindows[sK].window.opener ) { g_hWindows[sK].window.close(); delete g_hWindows[sK]; } } } for(var sK in g_hWindows ) { if(g_hWindows[sK].window && g_hWindows[sK].window.OnlineBroadcasterList
 ) { g_hWindows[sK].window.OnlineBroadcasterList.Refresh('force'); } }}function Connected(){ g_fConnected = true; g_bReconnecting = false; var sUser = g_hCk['username'] || 'guest'; var sPass = g_hCk['passcode'] || 'guest'; if(sPass == 'guest' ) { sUser = 'guest'; } Log('ZGW: Connected *** Calling zgw_TxLogin(' + sUser + ', ' + sPass + ')'); if(typeof zgw_TxLogin === 'function' ) { if (g_hPlatform.fcsActive) zgw_TxLogin(g_hPlatform.id + '/' + sUser + ':' + sPass); else zgw_TxLogin(sUser + ':' + sPass); }}DebugControls = {};DebugControls.Load = function(){ if(typeof(g_hQS['debug']) == 'string' ) { g_hQS['debug'] = g_hQS['debug'].replace(/"/g,''); } else { g_hQS['debug'] = ''; } if(typeof(g_hQS.rxverbose) == 'undefined' ) { g_hQS.rxverbose = g_hQS['debug'] ? 0 : 1; } var hQS = MfcStringUtilities.parse_query_string(top.location.search + ( g_hCk.qs || '' ) ); var sSelectors=''; var aServerLists = { 'Chat Server': { qs_var: 'server', list: SelectChatServer.aHostOptions } }; for(var sList in aServerLists ) { aOptions = new Array(); for(var nK in aServerLists[sList].list ) { var sServer = aServerLists[sList].list[nK]; var sSortKey = sServer; var aMatches = sServer.match(/(\D+)(\d+)/); if(aMatches && aMatches[1] && aMatches[2] ) { sSortKey = aMatches[1] + MfcStringUtilities.char_padding(aMatches[2], 10, '0', 'left' ); } aOptions.push(sSortKey + "|" + sServer ); } aOptions.sort(); var sPrev; var sPrevTracker; var sNext; var bNextTracker; var sOptions = "<option value=''>Random</option>"; for(var nK=0; nK < aOptions.length; nK++ ) { aHalves = aOptions[nK].split('|'); var sServer = aHalves[1]; if(bNextTracker == true ) { sNext = sServer; bNextTracker = false; } var sSelected=''; if(sList == 'Chat Server' && SelectChatServer.sHost == sServer ) { sSelected='SELECTED'; if(aOptions[ nK - 1 ] ) { sPrev = sPrevTracker; } if(aOptions[ nK + 1 ] ) { bNextTracker = true; } } sPrevTracker = sServer;
 sOptions += "<option value='" + sServer + "' " + sSelected + ">" + sServer + "</option>"; } sSelectors += "<span style=\"white-space:nowrap;\">" + sList; if(SelectChatServer.sType ) { sSelectors += "(" + SelectChatServer.sType + ")"; } sSelectors += ": <select style=\"font-size:10px;\" onChange=\"DebugControls.LoadServer('" + aServerLists[sList].qs_var + "',this.value);\">" + sOptions + "</select>"; if(sPrev ) { sSelectors += "<input type=button style=font-size:10px; onClick=\"DebugControls.LoadServer('" + aServerLists[sList].qs_var + "','" + sPrev + "');\" value='<'>"; } if(sNext ) { sSelectors += "<input type=button style=font-size:10px; onClick=\"DebugControls.LoadServer('" + aServerLists[sList].qs_var + "','" + sNext + "');\" value='>'>"; } sSelectors += "</span> "; } var sHtml = " <div id=\"debug_controls_grip\" style=\"background-color:#dddddd;cursor:move;background-color:#dddddd;height:100%; width: 50px; position: absolute; right: 0px; top: 0px;\"></div> <div id=debug_controls style=\"width:850px; padding:0px 10px; line-height: 22px; \"> debug=<input name=debug type=text id=log_filter value=\"" + ( hQS['debug'] || '' ) + "\" style=\"font-size:10px;width:80px;\" > debugu=<input name=debugu type=text id=debugu value=\"" + ( hQS['debugu'] || '' ) + "\" style=\"font-size:10px;width:50px;\" onKeyUp=\" g_hQS.debugu = parseInt(this.value); \"> <input type=button value='" + ( Log.bLogPause ? 'un-pause' : 'pause' ) + "' onClick=\" if(Log.bLogPause ) { this.value='Pause'; Log.bLogPause=false; } else { this.value='Un-Pause'; Log.bLogPause=true; } \" style=\"width:60px;font-size:10px;\" > "; if(window.console && window.console.clear ) { sHtml += "<input type=button value='console.clear' onClick=' window.console.clear(); ' style=\"font-size:10px;\"> "; } var aRXVerbose = { 0: { desc: "" }, 1: { desc: "Suppress all FC server commands." }, 2: { desc: "Suppress SESSION_STATE,ADD_FRIEND,TAGS,ROOMDATA" }, 3: { desc: "Include all FC server commands." }, 4: { desc: "Include MYWEBCAM,MYCAMSTATE,PREVIEWCHAN" }, 5: { desc: "Include non-ADD_FRIENDS,TAGS,FCTYPE_UEOPT,ROOMDATA" } }; var sVerboseOptions = ''; for(var nK in aRXVerbose ) { var sSelected = g_hQS.rxverbose == nK ? 'SELECTED' : '';
 sVerboseOptions += "<option value='" + nK + "' " + sSelected + ">" + nK + " (" + aRXVerbose[nK].desc + ")</option>"; } sHtml += " <span style=\"white-space:nowrap;\"> rxverbose= <select name=rxverbose style=\"font-size:10px;width:100px;\" onChange=\" g_hQS.rxverbose = parseInt(this.value ); \"> " + nK + ": " + sVerboseOptions + " </select> </span> "; sHtml += "&nbsp;"; sHtml += "<a href=\"javascript:DebugControls.LoadCurrent();\" style='color:blue;'>Reload with current settings</a>"; var c2c_server_set = ''; try { c2c_vserver_set = ( localStorage.getItem('c2cVideoServer') ) ? localStorage.getItem('c2cVideoServer').substring(5) : ''; } catch (e) {} sHtml += "<input style=\"width:45px; height:14px; margin:0 0 2px 12px; font-size:11px;\" type=\"text\" placeholder=\"###\" value=\""+c2c_vserver_set+"\" id=\"c2c_vserver\" /><input style=\"font-size:10px;\" type=\"button\" value=\"Set C2C vserver\" onclick=\"DebugControls.SetC2CServer();\" /><input style=\"font-size:10px;\" type=\"button\" value=\"&#215;\" onclick=\"DebugControls.ResetC2CServer();\" />"; sHtml += "<br>"; var aConnectionMethods = ['ajax','websocket']; var sConnectionOptions = ''; for(var nK in aConnectionMethods ) { var sMethod = aConnectionMethods[nK]; var sSelected = g_sConnectionMode == sMethod ? 'SELECTED' : ''; sConnectionOptions += "<option value='" + sMethod + "' " + sSelected + ">" + sMethod + "</option>"; } sHtml += " <span style=\"white-space:nowrap;\"> conn_mode= <select name=conn_mode style=\"font-size:10px;\" onChange=\"DebugControls.LoadConnectionMethod(this.value);\"> " + sConnectionOptions + " </select> </span> "; if(g_sConnectionMode == 'websocket' ) { var sProtocolOptions = "<option value=''>Auto</option>";  sHtml += " <span style=\"white-space:nowrap;\"> Prot.: <select style=\"font-size:10px;\" onChange=\"DebugControls.LoadWebsocketProtocol(this.value);\"> " + sProtocolOptions + " </select> </span> "; } sHtml += sSelectors; sHtml += " server= <input type=text id=typein_chat_server name=server value='" + ( hQS.server || '' ) + "' onKeyPress=\" if(event.keyCode == 13 ) { DebugControls.LoadServer('server',document.getElementById('typein_chat_server').value); } \" style=\"width:60px;font-size:10px;\" ><input type=button style=font-size:10px; onClick=\"DebugControls.LoadServer('server',document.getElementById('typein_chat_server').value);\" value='Load'> "; sHtml += " video_server= <input type=text name=video_server id=typein_video_server value='" + ( hQS.video_server || DrawVideo.sLastVideoServer || '' ) + "' onKeyDown=\"  if(event.keyCode == 13 ) { DebugControls.LoadVideoServer(document.getElementById('typein_video_server').value); }  if(event.keyCode == 38 ) { DebugControls.LoadVideoServer(parseInt(document.getElementById('typein_video_server').value) + 1 ); }  if(event.keyCode == 40 ) { DebugControls.LoadVideoServer(parseInt(document.getElementById('typein_video_server').value) - 1 ); }  \" style=\"width:35px;font-size:10px;\" > "; sHtml += " <input type=button style=font-size:10px; onClick=\"DebugControls.LoadVideoServer(document.getElementById('typein_video_server').value);\" value='Load'> "; sHtml += "<br>"; sHtml += " test_video= <input type=checkbox name=test_video \
 " + ( g_hQS.test_video ? 'CHECKED' : '' ) + " onClick=\" g_hQS.test_video = this.checked ? 1 : 0; events.emit('player.OnlineBroadcasterList.ClearCacheAndRefresh','force'); \"> "; sHtml += " show_video_type= <input type=checkbox name=show_video_type  " + ( g_hQS.show_video_type ? 'CHECKED' : '' ) + " onClick=\" g_hQS.show_video_type = this.checked ? 1 : 0; events.emit('player.OnlineBroadcasterList.ClearCacheAndRefresh','reset'); \"> "; var aBroadcastModes = [ '', 'obsext', 'webrtc' ]; var sBroadcastOptions = ''; for(var a=0; a < aBroadcastModes.length; a++ ) { sBroadcastOptions += "<option value='" + aBroadcastModes[a] + "' " + ( aBroadcastModes[a]==g_hQS.video_type?'SELECTED':'' ) + ">" + aBroadcastModes[a] + "</option>"; } sHtml += " <span style=\"white-space:nowrap;\"> Only video_type= <select name=video_type style=\"font-size:10px;\" onChange=\" t.g_hQS.video_type = this.value; events.emit('player.OnlineBroadcasterList.ClearCacheAndRefresh','force'); \"> " + sBroadcastOptions + " </select> </span> "; var sK; var hVideoPlayerModes = { '': '', 'videojs': 'VideoPlayer.js', 'videojs|hls': 'VideoPlayer.js HLS', 'videojs|llhls': 'VideoPlayer.js LLHLS', 'videojs|webrtc': 'VideoPlayer.js WebRTC', 'livesnaps': 'livesnaps' }; var sVideoPlayerOptions = ''; for(sK in hVideoPlayerModes ) { sVideoPlayerOptions += "<option value='" + sK + "' " + ( sK===(g_hQS.video_player_mode )?'SELECTED':'' ) + ">" + sK + "</option>"; } sHtml += " <span style=\"white-space:nowrap;\"> video_player_mode= <select name=video_player_mode style=\"font-size:10px;\" onChange=\" DebugControls.ForceVideoPlayer(this.value );\"> " + sVideoPlayerOptions + " </select> </span> ";
 if(typeof(window.VideoPlayer) === 'function' && typeof(VideoPlayer.overridesList) === 'function') { var allOverrides = VideoPlayer.overridesList(); if ( allOverrides.length ) { allOverrides.unshift({key: '', name: 'Enable Overrides'}, {key: '_disable_all_', name: 'Disable Overrides'}, {'optgroup': 'Force Override:'}); var bInGroup = false; var sVideoPlayerTechOverrides = ''; for(sK in allOverrides ) { if(allOverrides[sK].optgroup ) { if(bInGroup ) sVideoPlayerTechOverrides += "</optgroup>"; bInGroup = true; sVideoPlayerTechOverrides += "<optgroup label=\"" + allOverrides[sK].optgroup + "\">"; } else { sVideoPlayerTechOverrides += "<option value='" + allOverrides[sK].key + "' " + ( allOverrides[sK].key===(g_hQS.video_player_tech_override )?'SELECTED':'' ) + ">" + allOverrides[sK].name + (allOverrides[sK].techs ? " [" + allOverrides[sK].techs.join(',') + "]" : "") + "</option>"; } } if(bInGroup ) sVideoPlayerTechOverrides += "</optgroup>"; sHtml += " <span style=\"white-space:nowrap;\"> <select name=video_player_tech_override style=\"font-size:10px;width:75px;\" onChange=\" DebugControls.ForceVideoPlayerTechOverride(this.value );\"> " + sVideoPlayerTechOverrides + " </select> </span> "; } } sHtml += " <input type=button value='TxCmd' onClick=\" DebugControls.OpenTxCmd(); \" style=\"width:;font-size:10px;\" > "; sHtml += " <span id=video_debug_info style=\"white-space:nowrap;\" > </span>\
 "; sHtml += " <div style='color:#000;padding-left:10px;'> </div> <div style='color:#000;padding-left:10px;text-align:left;' id=video_debug></div> <a href=\"javascript:DebugControls.minimize(1);\" style='color:blue;position:absolute;right:55px;bottom:3px;'>Minimize</a> </div> <div id=debug_controls_reveal style=\"display:none;\"> &nbsp; <a href=\"javascript:DebugControls.minimize(0);\" style='color:blue;'>Restore Debug</a> &nbsp;  </div> "; SetHTML('log_controls',sHtml); var oEl = GetEl('log_controls'); oEl.style.display = ''; oEl.style.top = ( Math.max(document.documentElement.clientHeight, window.innerHeight || 0 ) - oEl. offsetHeight - 40 ) + 'px'; oEl.style.left = '30px'; dragElement(GetEl('log_controls'), GetEl('debug_controls_grip') ); DebugControls.sStatus_cache = ''; DebugControls.PlayerStatus(); if(g_hCk.dbg_hide ) { DebugControls.minimize(g_hCk.dbg_hide ); }};DebugControls.LoadCurrent = function() { var sLocation = top.location.href; var oEl = GetEl('debug_controls'); var oEls = []; oEls = oEls.concat(Array.prototype.slice.call(oEl.getElementsByTagName('input'), 0 ) ); oEls = oEls.concat(Array.prototype.slice.call(oEl.getElementsByTagName('checkbox'), 0 ) ); oEls = oEls.concat(Array.prototype.slice.call(oEl.getElementsByTagName('select'), 0 ) ); var sQS=''; for(var i = 0; i < oEls.length; i++) { var oEl = oEls[i]; if(oEl.name ) { if(oEl.value != '' && oEl.type != 'checkbox' ) sLocation = DebugControls.ModifyLocation(sLocation, oEl.name, oEl.value ); if(oEl.type == 'checkbox' ) sLocation = DebugControls.ModifyLocation(sLocation, oEl.name, oEl.checked ? oEl.value : '' ); }
 } top.location = sLocation;};DebugControls.SetC2CServer = function () { var cv = document.getElementById('c2c_vserver'); var v = cv.value; if ( typeof v != 'undefined' && typeof v === 'string' ) { var d = /^\d+$/; if ( d.test(v) ) { v = 'video'+v; } } else { alert('use a number please'); } localStorage.setItem('c2cVideoServer',v); console.log('C2C vserver set as: '+v);};DebugControls.ResetC2CServer = function () { localStorage.removeItem('c2cVideoServer'); var cv = document.getElementById('c2c_vserver'); cv.value = ''; console.log('C2C vserver value reset to none');};DebugControls.ForceVideoPlayerTechOverride = function(sVal ){ g_hVideoServerConfig.player_type_override_JSTech_override = g_sForcePlayerJSTechOverride = sVal; for ( var sK in g_hWindows) { if(g_hWindows[sK].window && g_hWindows[sK].window.LoadVideo && g_hWindows[sK].window.LoadVideo.clientVideo ) { g_hWindows[sK].window.LoadVideo.clientVideo.player_type_override_JSTech_override = g_hVideoServerConfig.player_type_override_JSTech_override; g_hWindows[sK].window.LoadVideo(); } }};DebugControls.ForceVideoPlayer = function(sVal ){ var aForcePlayer = sVal.split('|'); if(aForcePlayer[0] && aForcePlayer[1] ) { g_sForcePlayer = aForcePlayer[0]; g_sForcePlayerJSTech = aForcePlayer[1]; } else { g_sForcePlayer = sVal; g_sForcePlayerJSTech = ''; } g_hVideoServerConfig.player_type_override = g_sForcePlayer; g_hVideoServerConfig.player_type_override_JSTech = g_sForcePlayerJSTech; for ( var sK in g_hWindows) { if(g_hWindows[sK].window && g_hWindows[sK].window.LoadVideo && g_hWindows[sK].window.LoadVideo.clientVideo ) { g_hWindows[sK].window.LoadVideo.clientVideo.player_type_override = g_hVideoServerConfig.player_type_override; g_hWindows[sK].window.LoadVideo.clientVideo.player_type_override_JSTech = g_hVideoServerConfig.player_type_override_JSTech; g_hWindows[sK].window.LoadVideo(); } }};DebugControls.minimize = function(exec){ SetCookie('dbg_hide', exec, 'Tue, 19-Jan-2038 00:00:00 GMT' ); if(exec ) { GetEl('debug_controls').style.display='none'; GetEl('debug_controls_reveal').style.display='block'; } else { GetEl('debug_controls').style.display='block'; GetEl('debug_controls_reveal').style.display='none'; }};DebugControls.PlayerStatus = function(){ var oStatus;
 if(! ( oStatus = document.getElementById('video_debug_info') ) ) { return; } try { var nPlayerModel; if(window.player && player.g_nBroadcasterId ) { nPlayerModel = player.g_nBroadcasterId; } } catch(oError) {} if(oStatus.innerHTML ) { oStatus.innerHTML = ( nPlayerModel ? g_hUsers[nPlayerModel].username : 'Homepage' ) + " TX: " + ( DrawVideo.sLastVideoServer_ModelAssigned || '' ) + ", RX: " + ( DrawVideo.sLastVideoServer || '' ); }};DebugControls.Unload = function(){ GetEl('log_controls').style.display = 'none';};DebugControls.LoadWebsocketProtocol = function(sProtocol ){ sLocation = DebugControls.ModifyLocation(top.location.href, 'ws_protocol', sProtocol ); top.location = sLocation;};DebugControls.LoadConnectionMethod = function(sMethod ){ sLocation = DebugControls.ModifyLocation(top.location.href, 'conn_mode', sMethod ); top.location = sLocation;};DebugControls.LoadVideoServer = DebugControls.LoadServer = function(sType, sServer ){ var sLocation = top.location.href; 
 for(var nPlayerBroadcaster in g_hoPlayerWindows ) { sLocation = DebugControls.ModifyLocation(sLocation, 'load', 'player' ); sLocation = DebugControls.ModifyLocation(sLocation, 'broadcaster_id', nPlayerBroadcaster ); } sLocation = DebugControls.ModifyLocation(sLocation, sType, sServer ); top.location = sLocation;};DebugControls.ModifyLocation = function(sLocation, sKey, sValue ){ var sHash; if(sHash = sLocation.match(/(#.*)$/) ) { sLocation = sLocation.replace(/(#.*)/,''); } if(sLocation.indexOf('?') == -1 ) { sLocation += '?'; } var oRE = new RegExp("([?&])" + sKey + "=[^&]*" ); if(sLocation.match(oRE) ) { sLocation = sLocation.replace(oRE, '$1' + sKey + '=' + sValue ); } else { sLocation = sLocation + '&' + sKey + '=' + sValue; } if(sHash[1] ) { sLocation += sHash[1]; } return sLocation;};DebugControls.OpenTxCmd_Keys = [ 'type', 'from', 'to', 'arg1', 'arg2', 'payload' ];DebugControls.OpenTxCmd_Cmd = {};DebugControls.OpenTxCmd = function(){ if ( ! Log.bBuildFcTypeMap ) { g_hTypeMap = {}; for ( var sK in w) { if (sK.indexOf('FCTYPE') == 0) { g_hTypeMap[ w[sK] ] = sK; } } Log.bBuildFcTypeMap = 1; } if(! DebugControls.OpenTxCmd_Cmd.type ) { for(var i in DebugControls.OpenTxCmd_Keys ) { var key = DebugControls.OpenTxCmd_Keys[i]; DebugControls.OpenTxCmd_Cmd[key] = typeof(g_hQS[key]) != 'undefined' ? g_hQS[key] : ''; }
 } sHtml = " <div class=heading > <b>Manual TxCmd</b> </div> <br> <table height=250 cellspacing=5 > <tr> <td > Type: </td> <td > <input type=text id=OpenTxCmd_type value=\"" + DebugControls.OpenTxCmd_Cmd.type + "\"> </td> </tr> <tr> <td > From: </td> <td > <input type=text id=OpenTxCmd_from value=\"" + DebugControls.OpenTxCmd_Cmd.from + "\"> </td> </tr> <tr> <td > To: </td> <td > <input type=text id=OpenTxCmd_to value=\"" + DebugControls.OpenTxCmd_Cmd.to + "\"> </td> </tr> <tr> <td > Arg 1: </td> <td > <input type=text id=OpenTxCmd_arg1 value=\"" + DebugControls.OpenTxCmd_Cmd.arg1 + "\"> </td> </tr> <tr> <td > Arg 2: </td> <td > <input type=text id=OpenTxCmd_arg2 value=\"" + DebugControls.OpenTxCmd_Cmd.arg2 + "\"> </td> </tr> <tr> <td > String / JSON: </td> <td > <input type=text id=OpenTxCmd_payload value=\"" + DebugControls.OpenTxCmd_Cmd.payload + "\"> </td> </tr> <tr> <td > </td> <td > <input type=button id=OpenTxCmd_send style='width:170px;height:50px;' onClick=\"DebugControls.OpenTxCmd_Send();\" value=\"Send\"> </td> </tr> </table> "; g_oDhtmlPopup.open(sHtml, { top: ( top.document.body.clientHeight -380 ), right: 60, height: 300, width: 350, no_close_on_mouseout: true, provide_close_button: true });
 for(var i in DebugControls.OpenTxCmd_Keys ) { GetEl("OpenTxCmd_" + DebugControls.OpenTxCmd_Keys[i] ).onkeyup = function(event ) { clearTimeout(DebugControls.OpenTxCmd_SaveTimer ); DebugControls.OpenTxCmd_SaveTimer = setTimeout(function() { DebugControls.OpenTxCmd_Save(); }, 100 ); if(event.keyCode == 13 ) { GetEl("OpenTxCmd_send").style.fontWeight = 'bold'; DebugControls.OpenTxCmd_Send(); setTimeout( 300 ); } }; }};DebugControls.OpenTxCmd_Save = function(){ for(var i in DebugControls.OpenTxCmd_Keys ) { var key = DebugControls.OpenTxCmd_Keys[i]; DebugControls.OpenTxCmd_Cmd[ key ] = GetEl("OpenTxCmd_" + key ).value; DebugControls.OpenTxCmd_Cmd[ key ] = DebugControls.OpenTxCmd_Cmd[ key ].replace('^\s+',''); DebugControls.OpenTxCmd_Cmd[ key ] = DebugControls.OpenTxCmd_Cmd[ key ].replace('\s+$',''); }};DebugControls.OpenTxCmd_Send = function(){ if(DebugControls.OpenTxCmd_Cmd.type.match(/[a-zA-Z]/) ) { DebugControls.OpenTxCmd_Cmd.type = DebugControls.OpenTxCmd_Cmd.type.toUpperCase(); for(var sType in g_hTypeMap ) { if(DebugControls.OpenTxCmd_Cmd.type == g_hTypeMap[sType] ) { DebugControls.OpenTxCmd_Cmd.type = sType; break; } } } TxCmd(DebugControls.OpenTxCmd_Cmd.type, DebugControls.OpenTxCmd_Cmd.from, DebugControls.OpenTxCmd_Cmd.to, DebugControls.OpenTxCmd_Cmd.arg1, DebugControls.OpenTxCmd_Cmd.arg2, DebugControls.OpenTxCmd_Cmd.payload );
};DebugControls.VideoStatus = function(clientVideoObj){ var oEl = document.getElementById('video_debug'); if(! oEl ) { return; } if(! clientVideoObj ) { oEl.innerHTML = ''; return; } var sVars; if(clientVideoObj.videoProfile.player_type == 'flash' || clientVideoObj.videoProfile.player_type == 'html5' ) sVars = clientVideoObj.sFlashVars; else if(clientVideoObj.videoProfile.player_type == 'videojs' ) sVars = JSON.stringify(this.jsVideoConfig ); var sStatus = "<b>" + clientVideoObj.broadcaster.username + "</b> (" + clientVideoObj.broadcaster.user_id + "), " + "BCast: <b>" + clientVideoObj.videoProfile.broadcast_type + "</b>, " + "Player: <b>" + clientVideoObj.videoProfile.player_type + "</b> "; if(clientVideoObj.videoProfile.recommended_player != clientVideoObj.videoProfile.player_type ) sStatus += " (would_use " + clientVideoObj.videoProfile.recommended_player + ")"; if(sVars ) { sVars = sVars.replace(/['"]/g,''); sVars = sVars.replace(/[,&]/g,'\n'); sStatus += " (<a href=\"javascript:alert('" + sVars + "');\" title=\"" + sVars + "\" style='color:blue;'>vars</a>) "; } var oCurrentSource; if(clientVideoObj.videoPlayer && ( oCurrentSource = clientVideoObj.videoPlayer.getCurrentSource() ) ) { sStatus += " Tech: <b>" + oCurrentSource.type + "</b> "; if(oCurrentSource.overrides ) { sStatus += "(<b>" + oCurrentSource.overrides + "</b>)"; } sStatus += ", "; if(clientVideoObj.videoProfile.phase ) { sStatus += "Phase:&nbsp;<b>" + clientVideoObj.videoProfile.phase + "</b>"; } if(oCurrentSource.type == 'webrtc' && clientVideoObj.videoProfile.ObsVideo_wz && clientVideoObj.videoProfile.webrtc_video ) sStatus += " (using Sidekick)"; sStatus += " Src: <input type=text style='width:90px;font-size:10px;' value='" + oCurrentSource.src + "'>"; } if(DebugControls.sStatus_cache != sStatus ) { oEl.innerHTML = sStatus; } DebugControls.sStatus_cache = sStatus;};
DebugControls.sStatus_cache = '';function FlushCache(){ g_hOnlineBlockHTML = {}; setTimeout(FlushCache,1800000);}ChatOptions = { contexts: {}, playerRef: null};ChatOptions.register = function(hOptions ){ if(hOptions.context && hOptions.context.name ) { ChatOptions.contexts[ hOptions.context.name ] = { context: hOptions.context }; if(hOptions.updateFunc ) ChatOptions.contexts[ hOptions.context.name ].updateFunc = hOptions.updateFunc; }};ChatOptions.establishPlayerRef = function(hOptions ){ if(window.player && player.g_nBroadcasterId != undefined ) { ChatOptions.playerRef = player; } else { for(var sK in g_hoPlayerWindows) { ChatOptions.playerRef = WindowHandle.Get('player', sK ); break; } }};ChatOptions.FormHTML = function(hOptions ){ if(hOptions.playerRef ) ChatOptions.playerRef = hOptions.playerRef; else ChatOptions.playerRef = ChatOptions.establishPlayerRef(); hOptions = hOptions || {}; hOptions.omit = hOptions.omit || {};
 if(! t.g_hSelf.display_pm_inline ) { t.g_hSelf.display_pm_inline = 0; } var hSelectDisplayPmInline = { 0: "Only when using the /whisper or /pm chat command.", 1: "Only from the " + t.g_hPlatform.performer + " whose room I am in.", 3: "Display all PMs along side chat." }; var sSelectDisplayPmInline = ''; for(var nK in hSelectDisplayPmInline ) { sSelectDisplayPmInline += " <input type=radio name=display_pm_inline id=display_pm_inline_" + nK + " value=" + nK + " " + ( t.g_hSelf.display_pm_inline == nK ? 'CHECKED' : '' ) + " onClick=\" t.UserExtensions.Write('display_pm_inline', this.value, 0 );\"> " + hSelectDisplayPmInline[nK] + "<br> "; } hTopTipperOptions = { 0: "Below Friends", 1: "Above Friends", 2: "Do Not Show" }; var aTopTipperOptions = []; for(var nK in hTopTipperOptions ) { aTopTipperOptions.push("<option " + ( t.g_hSelf.room_list_tippers_first == nK ? 'SELECTED' : '' ) + " value=" + nK + ">" + hTopTipperOptions[nK] + "</option>"); } var aShades = new Array('FFFFFF', 'F9F9F9', 'F3F3F3', 'EDEDED', 'E7E7E7', 'E1E1E1', 'DBDBDB', 'D5D5D5', 'CFCFCF', 'B9B9B9' ); var sColorSelector = ''; for(var nK in aShades ) { sColorSelector += "<input type=radio id=chat_bg_color" + aShades[nK] + " "; sColorSelector += ( t.g_hSelf.chat_bg_color == aShades[nK] ? 'CHECKED' : '' ); sColorSelector += " name=chat_bg_color value=" + aShades[nK] + " onClick=\" t.ChatOptions.ChangeChatBGSetting('" + aShades[nK] + "'); \">"; sColorSelector += "<span style=\"cursor:pointer;border:1px solid #DDDDDD;background-color:#"
 + ( t.NightMode_Top.enabled ? NightMode.HexInvert(aShades[nK] ) : aShades[nK] ) + ";\" onClick=\" GetEl('chat_bg_color" + aShades[nK] + "').checked = true; t.ChatOptions.ChangeChatBGSetting('" + aShades[nK] + "'); \">"; sColorSelector += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br>"; if(nK == 4 ) { sColorSelector += "</td><td>"; } } var sHtml = ''; if(! hOptions.no_header ) { sHtml = " <div class=mini_popup_header_container > <span class=mini_popup_header>Chat Options</span> <span style=\"font-size:11px;font-color:black;font-weight:normal;\"> [ <a href='javascript: t.ChatOptions.RestoreDefaults(window); '>Restore Defaults</a> " + ( t.g_hSelf.access_level >= FCS.FCLEVEL_BASIC ? " | More " + t.A('user_settings') + "Personal Options</a>" : '' ) + " ] </div> "; } sHtml += " <table> <tr> <td width=460 valign=top> "; if(hOptions.window && hOptions.window.GetBroadcasterId ) { var nUserId = hOptions.window.GetBroadcasterId(); if(hOptions.popup_player ) { var bDhtmlMode = t.g_hSelf.window_mode & w.WINDOW_MODE_DESKTOP_DHTML; var bDefaultChecked = hOptions.window.g_sWindowType == 'iframe'? !bDhtmlMode : bDhtmlMode; sHtml += ` <div class=model_list_settings_box_on_white style="font-size:12px;"> <table> <tr> <td> <a href=# class="pm_popup_type_toggle" onClick=" t.g_hoPlayerWindows[${ nUserId }].window.ChangePlayerPopupType.toggle(); "><img style="padding: 5px;" src="${t.g_hPlatform.image_url_cdn}files/images/icons/png/popup.12x12.png" ></a> </td> <td nowrap> Switch to <a href=# class="pm_popup_type_toggle" onClick=" t.g_hoPlayerWindows[${ nUserId }].window.ChangePlayerPopupType.toggle(); ">` + ( hOptions.window.g_sWindowType == 'iframe' ? 'native' : 'in-browser' ) + `</a> or the <a href=# class="pm_popup_type_toggle" onClick=" t.g_hoPlayerWindows[${ nUserId }].window.ChangePlayerPopupType.toggle('main_window'); ">main</a> window. </td> <td> <input type=checkbox onChange=" t.DhtmlWindowMode.Set(${ hOptions.window.g_sWindowType == 'iframe' ? this.checked : !this.checked }) " ${ bDefaultChecked ? 'checked' : ''} >
 </td> <td nowrap> ${ hOptions.window.g_sWindowType == 'iframe' ? 'Native' : 'In-browser' } windows open by default </td> </tr> </table> </div> `; } else { sHtml += ` <div class=model_list_settings_box_on_white style="font-size:12px;"> <table> <tr> <td> <img style="padding: 5px;" src="${t.g_hPlatform.image_url_cdn}files/images/icons/png/popup.12x12.png" >&nbsp; </td> <td nowrap> Move this Chat Room to a <a href=# class="pm_popup_type_toggle" onClick=" t.g_hoPlayerWindows[${ nUserId }].window.ChangePlayerPopupType.toggle('native_window'); " title="A native popup window opens in new browser window.">native</a> or <a href=# class="pm_popup_type_toggle" onClick=" t.g_hoPlayerWindows[${ nUserId }].window.ChangePlayerPopupType.toggle('dhtml_window'); " title="An in-browser popup window will remain inside of this web browser.">in-browser</a> popup window? </td> </tr> </table> </div> `; } } sHtml += " <div class=model_list_settings_box_on_white style=\"font-size:12px;\"> <table width=100%> <tr> <td valign=top width=40%> <table cellpadding=2 cellspacing=0> "; if(! hOptions.omit.hide_video ) { sHtml += " <tr id=option_popup_hide_video class=toggle_checkbox> <td> <input class=option_popup_hide_video_checkbox type=checkbox " + ( hOptions.video_is_off ? 'checked':'' ) + " onClick=\"t.ChatOptions.playerCall('ToggleVideo.HideAll',['toggle',this.checked]); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.playerCall('ToggleVideo.HideAll',['toggle',!document.getElementsByClassName('option_popup_hide_video_checkbox')[0].checked]);t.ChatOptions.Update(window);\"> " + ( hOptions.video_is_off ? 'Un-':'' ) + "Hide Video </td> </tr> "; }
 sHtml += " <tr id=option_popup_hide_chat class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf.hide_chat ? 'checked':'' ) + " onClick=\"t.ChatOptions.playerCall('ToggleChat.Toggle',[ ! t.g_hSelf.hide_chat ]); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.playerCall('ToggleChat.Toggle', [ ! t.g_hSelf.hide_chat ] ); t.ChatOptions.Update(window);\"> Hide Chat Room </td> </tr> <tr id=option_popup_hide_people class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['hide_people'] ? 'checked':'' ) + " onClick=\"t.ChatOptions.playerCall('PeopleBoxHelper.Toggle',[this.checked ? 1 : 0]); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.playerCall('PeopleBoxHelper.Toggle',[ ! t.g_hSelf.hide_people ]); t.ChatOptions.Update(window);\"> Hide People List </td> </tr> "; if(! hOptions.popup_player ) { sHtml += " <tr id=option_hide_online_models class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['hide_online_models'] ? 'checked':'' ) + " onClick=\"t.ChatOptions.playerCall('ModelMenuBar.HideOnlineBroadcasters', [ ! t.g_hSelf['hide_online_models'] ]); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.playerCall('ModelMenuBar.HideOnlineBroadcasters',[ ! t.g_hSelf['hide_online_models'] ]);t.ChatOptions.Update(window);\"> Hide Online " + g_hPlatform.Performer + "s</td> </tr> "; } sHtml += " <tr id=option_popup_show_chat_header_topic class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['show_chat_header_topic'] ? '':'checked' ) + " onClick=\" t.ChatOptions.playerCall('RoomTopic.show_topic',[! this.checked ]); t.ChatOptions.Update(window); \"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.playerCall('RoomTopic.show_topic',[ ! t.g_hSelf['show_chat_header_topic'] ]);t.ChatOptions.Update(window); \"> Hide Room Topic </td> </tr> <tr id=option_popup_mute_guests class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['mute_guests'] ? 'checked':'' ) + " onClick=\"t.ChatOptions.ToggleMuteGuests('toggle_mute_guests'); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.ToggleMuteGuests('toggle_mute_guests');t.ChatOptions.Update(window);\"> Hide Chat of Guests</td> </tr> <tr id=option_popup_mute_regs class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['mute_regs'] ? 'checked':'' ) + " onClick=\"t.ChatOptions.ToggleMuteGuests('toggle_mute_regs'); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.ChatOptions.ToggleMuteGuests('toggle_mute_regs');t.ChatOptions.Update(window);\"> Hide Chat of Basics </td> </tr> <tr id=option_popup_hide_people class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['show_main_menu'] ? '':'checked' ) + " onClick=\"t.TogglePersonalMenu.Execute({ display: this.checked ? 1 : 0 }); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" onClick=\"t.TogglePersonalMenu.Execute({ display: TogglePersonalMenu.nDisplay ? 0 : 1 });t.ChatOptions.Update(window);\"> Hide Personal Menu </td> </tr> </table> </td> <td valign=top > <table cellpadding=2 cellspacing=0> "; if(! hOptions.popup_player ) { sHtml += " <tr id=option_single_page_scroll class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['single_page_scroll'] ? 'checked':'' ) + " onClick=\"t.ChatOptions.SetSinglePageScrolling(this.checked ? 1 : 0 ); t.ChatOptions.Update(window);\"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\"t.ChatOptions.SetSinglePageScrolling(! t.g_hSelf['single_page_scroll'] );t.ChatOptions.Update(window);\"> Combine scroll for chat/" + t.g_hPlatform.performer + " list. </td>\
 </tr> "; } sHtml += " <tr id=option_highlight_friends_chat class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['highlight_friends_chat'] ? 'checked':'' ) + " onClick=\" t.UserExtensions.Write('highlight_friends_chat', t.g_hSelf.highlight_friends_chat ? 0 : 1 ); t.ChatOptions.playerCall('HighlightChat',['reset']); t.ChatOptions.Update(window); \"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\" t.UserExtensions.Write('highlight_friends_chat', t.g_hSelf.highlight_friends_chat ? 0 : 1 ); t.ChatOptions.playerCall('HighlightChat',['reset']); t.ChatOptions.Update(window);\"> Highlight Chat of Friends </td> </tr> <tr id=option_highlight_chat_users class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['highlight_chat_users'] ? 'checked':'' ) + " onClick=\" t.UserExtensions.Write('highlight_chat_users', t.g_hSelf.highlight_chat_users ? 0 : 1 ); t.ChatOptions.Update(window); \"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\" t.UserExtensions.Write('highlight_chat_users', t.g_hSelf.highlight_chat_users ? 0 : 1 ); t.ChatOptions.Update(window);\"> Highlight Chat with Mouse-Over </td> </tr> <tr id=option_room_list_alpha_sort class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['room_list_alpha_sort'] ? 'checked':'' ) + " onClick=\" t.UserExtensions.Write('room_list_alpha_sort', t.g_hSelf.room_list_alpha_sort ? 0 : 1 ); t.ChatOptions.playerCall('PeopleBox.RefreshHTML'); t.ChatOptions.Update(window); \"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\" t.UserExtensions.Write('room_list_alpha_sort', t.g_hSelf.room_list_alpha_sort ? 0 : 1 ); t.ChatOptions.playerCall('PeopleBox.RefreshHTML'); t.ChatOptions.Update(window);\"> List names alphabetically </td> </tr>\<!-- <tr id=option_avatars_in_chat_1 class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['avatars_in_chat'] & 1 ? 'checked':'' ) + " onChange=\" t.ChatOptions.Toggle_AvatarsInChat(1, this.checked ); \"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\" t.ChatOptions.Toggle_AvatarsInChat(1, ! t.g_hSelf.avatars_in_chat & 1 ); t.ChatOptions.Update(window);\"> Show Avatars in Chat Rooms </td> </tr> <tr id=option_avatars_in_chat_2 class=toggle_checkbox> <td> <input type=checkbox " + ( t.g_hSelf['avatars_in_chat'] & 2 ? 'checked':'' ) + " onChange=\" t.ChatOptions.Toggle_AvatarsInChat(2, this.checked ); \"></td> <td style=\"font-size:11px;\" class=toggle_checkbox onClick=\" t.ChatOptions.Toggle_AvatarsInChat(2, ! t.g_hSelf.avatars_in_chat & 2 ); t.ChatOptions.Update(window);\"> Show Avatars in PM Windows </td> </tr>\--> <tr > <td colspan=2 style=\"font-size:11px;padding: 6px 0px 0px 6px;\"> Recent tippers: <select style=\"font-size:11px;\" onChange=\" t.UserExtensions.Write('room_list_tippers_first', this.value ); t.ChatOptions.playerCall('PeopleBox.RefreshHTML'); \"> " + aTopTipperOptions.join('') + " </select> </td> </tr> </table> </td> </tr> </table> </div> "; if(! hOptions.window ) { sHtml += " <div class=model_list_settings_box_on_white> <div class=model_list_settings_box_title>Chat Commands</div> <div class=model_list_content> Type <b>/help</b> or <b>/?</b> in any chat room for a <a href=http://wiki." + t.g_hPlatform.domain + "/wiki/Chat_Commands target=_blank>list of chat commands</a>. <br>\
 </div> </div> "; } sHtml += " <div class=model_list_settings_box_on_white> <div class=model_list_settings_box_title>Display Private Messages in Chat Rooms</div> <div class=model_list_content> You can opt to have private messages you send and receive displayed alongside chat room text. <b>Other users DO NOT see this chat</b>. <br><br> " + sSelectDisplayPmInline + " </div> </div> "; if(! g_UA.mobile && hOptions.columns == 2 ) { sHtml += " </td> <td width=240 valign=top> "; } var hFontSizes = { 'x-small': 'Smallest', 'small': 'Small', '': 'Normal', 'large': 'Large', 'x-large': 'Largest' }; var sFontOpts=''; t.g_hSelf.font_size_chatroom = t.g_hSelf.font_size_chatroom || ''; for(var val in hFontSizes ) { sFontOpts += "<option style=\"font-size:" + val + ";\" " + ( t.g_hSelf.font_size_chatroom == val ? 'SELECTED' : '' ) + " value=" + val + ">" + hFontSizes[val] + "</option>"; } sHtml += " <div class=model_list_settings_box_on_white> <div class=model_list_settings_box_title>Fonts & Images</div> <div class=model_list_content> Font size: <select onChange=\" t.ChatOptions.SetFontSize(this.value,'chatroom'); \"> " + sFontOpts + " </select> <br><br> </div> <div class=model_list_content>\
 <input type=checkbox id=hide_usernames_chatroom " + ( t.g_hSelf.hide_usernames_chatroom ? 'CHECKED' : '' ) + " onClick=\"t.ChatOptions.HideChatElement('hide_usernames_chatroom', this.checked ? 1 : 0 );\" > Hide Usernames </div> <div class=model_list_content> <input type=checkbox id=hide_avatars_chatroom " + ( t.g_hSelf.hide_avatars_chatroom ? 'CHECKED' : '' ) + " onClick=\"t.ChatOptions.HideChatElement('hide_avatars_chatroom', this.checked ? 1 : 0 );\" > Hide Avatars </div> <div class=model_list_content> <input type=checkbox id=chat_text_ignore " + ( t.g_hSelf.chat_text_ignore ? 'CHECKED' : '' ) + " onClick=\"t.UserExtensions.Write('chat_text_ignore', this.checked ? 1 : 0 );\" > Ignore Custom Font Styles </div> <div class=model_list_content> <input type=checkbox id=allow_user_images " + ( t.g_hSelf.allow_user_images == 0 ? 'CHECKED' : '' ) + " onClick=\" t.UserExtensions.Write('allow_user_images', this.checked ? 0 : 1 ); \" > Do not display Chat Images </div> <div class=model_list_content> <input type=checkbox id=no_emote_preview " + ( t.g_hSelf.no_emote_preview == 1 ? 'CHECKED' : '' ) + " onClick=\" t.UserExtensions.Write('no_emote_preview', this.checked ? 1 : 0 ); g_oParseEmoteInput.inlineEmotePreview_renderPreviewImage(); \" > Do not auto preview Emotes </div> </div> <div class=model_list_settings_box_on_white> <div class=model_list_settings_box_title>Chat Backgrounds</div> <div class=model_list_content> <!-- You may use the selector below to select a plain white background or a grey background (if you find it easier on the eyes). <br><br> --> <input type=radio id=chat_bg_color name=chat_bg_color onClick=\" t.ChatOptions.ChangeChatBGSetting(''); \" " + ( ! t.g_hSelf.chat_bg_color ? 'CHECKED' : '' ) + " > <span style=\"cursor:pointer;\" onClick=\" GetEl('chat_bg_color').checked = true; t.ChatOptions.ChangeChatBGSetting('');\">Show Chat Background Image</span><br><br> Display this color:<br><br> <table border=0> <tr> <td> " + sColorSelector + " </td>\
 </tr> </table> <br> </div> </div> </td> </tr> </table> </div> "; return sHtml; };ChatOptions.SetFontSize = function(val, type ){ if(val == 'normal' ) { val = ''; } t.UserExtensions.Write('font_size_' + type, val ); events.emit('ChatOptions.SetFontSize');};ChatOptions.HideChatElement = function(key, val ){ t.UserExtensions.Write(key, val ); events.emit('ChatOptions.HideChatElement',{ container_class: 'chat_contents', key: key, hide_class: key })};ChatOptions.playerCall = function(aFuncPath, aArgs ){ if(typeof(aFuncPath == 'string' ) ) { aFuncPath = aFuncPath.split('.'); } for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { var func = oPlayerWindow; var context = oPlayerWindow; for(var a=0; a < aFuncPath.length; a++ ) { if(func[ aFuncPath[a] ] ) { func = func[ aFuncPath[a] ]; if(typeof(func) == 'object' ) context = func; } else { break; } }
 func.apply(context, aArgs ); } }};ChatOptions.Update = function(context){ if(context && context.name && ChatOptions.contexts[context.name] && ChatOptions.contexts[context.name].context ) { if(ChatOptions.contexts[context.name].updateFunc ) ChatOptions.contexts[context.name].updateFunc(); var hHighlight = { 'option_popup_hide_chat': t.g_hSelf.hide_chat == true, 'option_hide_online_models': t.g_hSelf['hide_online_models'] == true, 'option_popup_hide_people': t.g_hSelf['hide_people'] == true, 'option_popup_mute_guests': t.g_hSelf['mute_guests'] == true, 'option_popup_mute_regs': t.g_hSelf['mute_regs'] == true, 'option_single_page_scroll': t.g_hSelf['single_page_scroll'] == true, 'option_popup_show_chat_header_topic': ! t.g_hSelf['show_chat_header_topic'] }; var el; for(var key in hHighlight ) { if(el = ChatOptions.contexts[context.name].context.GetEl(key) ) { if(hHighlight[key] ) el.classList.add('highlight_bg'); else el.classList.remove('highlight_bg'); } } }
};ChatOptions.ChangeChatBGSetting = function(sValue ){ if(! sValue ) { sValue = ''; } t.UserExtensions.Write('chat_bg_color', sValue ); for(var sK in t.g_hoPlayerWindows ) { if(oPlayerHandle = t.WindowHandle.Get('player', sK ) ) { if(oPlayerHandle.LoadBackground ) oPlayerHandle.LoadBackground(); } }};ChatOptions.ToggleMuteGuests = function(sType,nOverride){ if(sType == 'toggle_mute_guests' ) sType = 'guests'; else if(sType == 'toggle_mute_regs' ) sType = 'regs'; else sType = 'guests'; var bMute = nOverride != undefined ? nOverride : t.g_hSelf['mute_' + sType] == '1' ? 0 : 1; if(bMute != t.g_hSelf['mute_' + sType] ) { t.UserExtensions.Write('mute_' + sType, bMute ); } for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.DrawMuteGuests(); } }};ChatOptions.SetSinglePageScrolling = function(nValue ){ if(nValue != undefined ) t.UserExtensions.Write('single_page_scroll', nValue ); for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(! oPlayerWindow.g_bPopupPlayer && oPlayerWindow.g_sPlayerMode == 'player' ) { oPlayerWindow.ProcessSinglePageScrolling(); } } }};ChatOptions.RestoreDefaults = function(context )
{ t.UserExtensions.Write('chat_text_ignore',0); t.UserExtensions.Write('hide_chat',0); t.UserExtensions.Write('allow_user_images',1); t.UserExtensions.Write('hide_online_models',0); t.UserExtensions.Write('show_main_menu',1); t.UserExtensions.Write('highlight_friends_chat',0); t.UserExtensions.Write('room_list_alpha_sort',0); t.UserExtensions.Write('hide_people',0); t.UserExtensions.Write('hide_chat',0); t.UserExtensions.Write('show_chat_header_topic',1); t.UserExtensions.Write('hide_usernames_chatroom',0); t.UserExtensions.Write('hide_avatars_chatroom',0); t.UserExtensions.Write('display_pm_inline', 0 ); TogglePersonalMenu.Execute({'render_only':true}); t.ChatOptions.ChangeChatBGSetting(); t.ChatOptions.ToggleMuteGuests('toggle_mute_guests',0); t.ChatOptions.ToggleMuteGuests('toggle_mute_regs',0); t.ChatOptions.SetSinglePageScrolling(0); for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(oPlayerWindow.g_sPlayerMode == 'player' ) { oPlayerWindow.ToggleVideo.HideAll('toggle',0); oPlayerWindow.RoomTopic.show_topic(true ); oPlayerWindow.PeopleBoxHelper.Toggle(0); oPlayerWindow.ToggleChat.Toggle(0); oPlayerWindow.PeopleBoxHelper.MenuHighlight(); oPlayerWindow.ModelMenuBar.HideOnlineBroadcasters(false); oPlayerWindow.ModelMenuBar.HideRevealOnlineBroadcasters(); } } } ChatOptions.Update(context); };var FilterSortOptions = {
 hSelectLimits: { 'auto_update_livesnaps_persec_homepage': [1,5,10,30,50,100,300,500,10000], 'auto_update_livesnaps_persec_player': [1,5,10,30,50,100,300,500,10000], 'model_list_mre_limit': [0,1,2,3,4,5,6,7,8,9,10,12,15,20,30], 'model_list_popular_limit': [0,1,2,3,4,5,6,7,8,9,10,12,15,20,30], 'model_list_trending_limit': [0,1,2,3,4,5,6,7,8,9,10,12,15,20,30], 'model_list_history_limit': [0,1,2,3,4,5,6,7,8,9,10,12,15,20,30], 'model_list_missmfc_limit': [10,20,50,100,250,500,1000], 'model_list_custom_alert_limit': [1,2,3,4,5,10,20,50,100,250] }};FilterSortOptions.FormHTML = FilterSortOptions.FormHTML_getOptionHtml = function(){ var hOptionHtml = {}; for(var sKey in FilterSortOptions.hSelectLimits ) { hOptionHtml[sKey] = []; for(var nK=0; nK< FilterSortOptions.hSelectLimits[sKey].length; nK++ ) { var nLimit = FilterSortOptions.hSelectLimits[sKey][nK]; var sDisplay=''; if(sKey.indexOf('auto_update_livesnaps_persec_') > -1 && nLimit == 10000 ) { sDisplay = 'Max'; } else { sDisplay = nLimit; } hOptionHtml[sKey].push("<option value=" + nLimit + " " + ( nLimit == t.g_hSelf[sKey] ? 'SELECTED' : '' ) + ">" + sDisplay + "</option>"); } } return hOptionHtml;};FilterSortOptions.FormHTML_RegionsHTML = function(hOptions ){ var sHighlightTop = ''; if(hOptions.highlight_top ) { sHighlightTop = "background-color:#FFFF0088;"; } var sHighlightHidden = ''; if(hOptions.highlight_hidden ) { sHighlightHidden = "background-color:#FFFF0088;"; } var aRegions = []; for(var sK in g_hRegionConfig ) { var nBit = g_hRegionConfig[sK]['bit']; var sTopBox = "\
 <input type=checkbox name=regions class=regions_top_" + sK + " value='" + sK + "'  onClick=\" t.FilterSortOptions.DataCollectTopRegionCheckboxes('top',this);\" > "; var sHideBox = " <input type=checkbox name=regions class=regions_hide_" + sK + " value='" + sK + "'  onClick=\" t.FilterSortOptions.DataCollectRegionCheckboxes('hide',this);\" > "; var sShowBox = " <input type=checkbox name=regions class=regions_show_" + sK + " value='" + sK + "'  onClick=\" t.FilterSortOptions.DataCollectRegionCheckboxes('show',this); \" > "; aRegions.push(" <tr> <td style=\"font-size:11px;padding-right:10px;\" nowrap > " + g_hRegionConfig[sK]['name'] + " </td> <td align=center style=\"font-size:11px; " + sHighlightTop + "\"> " + sTopBox + " </td> <td align=center style=\"font-size:11px;" + sHighlightHidden + "\"> " + sHideBox + " </td> <td align=center> " + sShowBox + " </td> </tr> "); } var sHtml = " <table cellpadding=0 cellspacing=0 border=0> <tr> <td valign=center class=model_list_settings_box_title style=\"margin:0px;padding:0px;\"> Filter By Region: </td> <td valign=center class=model_list_settings_box_title style=\"margin:0px;padding:0px;font-size: 10px; width: 40px; text-align: center; " + sHighlightTop + " \"> Show on Top </td> <td valign=center class=model_list_settings_box_title style=\"margin:0px;padding:0px;font-size: 10px; width:45px; text-align:center; " + sHighlightHidden + "\"> Hide </td> <td valign=center align=center class=model_list_settings_box_title style=\"margin:0px;padding:0px;font-size: 10px; width:45px;\" nowrap> Only<br>Show </td>\
 </tr> " + aRegions.join('') + " </table> "; return sHtml;};FilterSortOptions.FormHTML = function(hOptions ){ hOptions = hOptions || {}; var sInstance = hOptions.instance || ''; FilterSortOptions.sRefreshMode = sInstance == 'embedded' ? "'reset',{scroll_to_bottom:1}" : "'reset'"; t.g_hSelf['online_model_selection'] = t.g_hSelf['online_model_selection'] || 'custom'; t.g_hSelf['online_model_sort'] = t.g_hSelf['online_model_sort'] || ( g_hPlatform.id == PLAT_CAM ? 'popular_room' : 'rating' ); t.g_hSelf['online_model_regions'] = t.g_hSelf['online_model_regions'] || 0; hOptions.player_mode = hOptions.player_mode || (( window.player && player.g_nBroadcasterId > 0 ) ? 'player' : 'homepage' ); var sOnlinePatternKey = 'online_model_pattern' + (( window.player && player.g_nBroadcasterId > 0 ) ? '_player' : '' ); var nPattern = t.g_hSelf[ sOnlinePatternKey ]; var hSort = { rating: 'CamScore', popular_room: 'Number of People', alphabetical: 'Alphabetically', newest_login: 'Order Logged In', creation_date: 'Newest on Site', random: 'Random' }; var aSort = []; var nC = 0; for(var sK in hSort ) { if(g_hPlatform.id == PLAT_CAM && sK == 'rating' ) { continue; } aSort.push("<div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_sort','" + sK + "');\" class=toggle_checkbox><input type=radio name=online_model_sort value=" + sK + " " + ( t.g_hSelf['online_model_sort'] == sK ? 'CHECKED' : '' ) + ">" + hSort[sK] + "</div>"); if(nC++ == 2 ) { aSort.push("</td><td class=model_list_settings_value valign=top style='vertical-align:top;'>"); } } var hSelection = { custom: ( 'All ' + g_hPlatform.Performer + 's' ), friends_bookmarked: 'Friends/Bookmarked', public: 'Public Chat' }; { hSelection.highlighted = "Highlighted Rooms"; } var aSelection = []; for(var sK in hSelection ) { if(sK == 'public' ) aSelection.push("</td><td valign=top class=model_list_settings_value>"); aSelection.push("<div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_selection','" + sK + "');\" class=toggle_checkbox><input type=radio name=online_model_selection value=" + sK + " " + ( t.g_hSelf['online_model_selection'] == sK ? 'CHECKED' : '' ) + ">" + hSelection[sK] + "</div>"); } var aOnlineModelMobilePattern = []; if(g_UA.mobile ) { var hOnlineModelMobilePattern = { 6: 'Avatars, Small (optimized for touch devices)', 7: 'Avatars, Large (optimized for touch devices)' }; for(var sK in hOnlineModelMobilePattern ) { aOnlineModelMobilePattern.push("<div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'" + sOnlinePatternKey + "','" + sK + "');\" class=toggle_checkbox><input type=radio class=" + sOnlinePatternKey + " value=" + sK + " " + ( nPattern == sK ? 'CHECKED' : '' ) + ">" + hOnlineModelMobilePattern[sK] + "</div>"); } aOnlineModelMobilePattern.push("<br>"); } var sHtml = " <div style=\"position:relative;padding-top:0px;\"> "; if(! t.g_hSelf['model_list_refresh_seconds'] ) { t.g_hSelf['model_list_refresh_seconds'] = 30; } var aModelListRefreshSeconds = new Array(); var aSeconds = [15,30,60,120,300,600]; for(var nK=0; nK<aSeconds.length; nK++ ) {
 aModelListRefreshSeconds.push("<option value=" + aSeconds[nK] + " " + ( t.g_hSelf.model_list_refresh_seconds == aSeconds[nK] ? 'SELECTED' : '' ) + ">" + aSeconds[nK] + " Seconds</option>"); } var hModelListPaging = { scroll: 'Dynamic Scroll', page: 'Multiple Pages' }; var aModelListPaging = []; for(var sMode in hModelListPaging ) { aModelListPaging.push("<option value=" + sMode + " " + ( t.g_hSelf.model_list_mode == sMode ? 'SELECTED' : '' ) + ">" + hModelListPaging[sMode] + "</option>"); } var hOptionHtml = FilterSortOptions.FormHTML_getOptionHtml(); FilterSortOptions.aNewModelDays = []; var aNewModelDayOptions = []; var hNewModelDays = { 0: 'Never', 3: '3 days', 7: '7 days', 14: '14 days', 30: '30 days', 60: '60 days', 90: '90 days' }; for(var nK in hNewModelDays ) { FilterSortOptions.aNewModelDays.push(nK ); aNewModelDayOptions.push("<option value=" + nK + " " + ( nK == t.g_hSelf.new_model_days ? 'SELECTED' : '' ) + ">" + hNewModelDays[nK] + "</option>" ); } var hModelListPaging = { scroll: 'Dynamic Scroll', page: 'Multiple Pages' }; var aModelListPagingRadios = []; for(var sMode in hModelListPaging ) { aModelListPagingRadios.push(" <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_mode','" + sMode + "');\" class=toggle_checkbox><input type=radio name=model_list_mode id=model_list_mode_radio_" + sMode + " value='" + sMode + "'  " + ( t.g_hSelf.model_list_mode == sMode ? 'CHECKED' : '' ) + " >" + hModelListPaging[sMode] + "</span> "); }
 var DisplayTypeRadioChecked={}; if(nPattern == 4 || nPattern == 5 ) { if ( t.g_hSelf['auto_update_livesnaps'] & ( hOptions.player_mode == 'player' ? 2 : 1 ) ) DisplayTypeRadioChecked['animation'] = true; else DisplayTypeRadioChecked['previews'] = true; } else if(nPattern == 1 || nPattern == 2 ) { DisplayTypeRadioChecked['avatars'] = true; } else if(nPattern == 3 ) DisplayTypeRadioChecked['text_list'] = true; else if(nPattern == 8 ) DisplayTypeRadioChecked['previews_avatars'] = true; if(nPattern == 2 || nPattern == 5 ) DisplayTypeRadioChecked['large'] = true; else if(nPattern == 1 || nPattern == 4 ) DisplayTypeRadioChecked['small'] = true; var sFollowedTagsToolTip = "You can follow models with a given tag and have them appear at the top of the homepage. "; if(Tags && Tags.getFollowedTags ) { var followedTags = Tags.getFollowedTags() || []; var list = Object.keys(followedTags ); if(list.length ) { sFollowedTagsToolTip += " You are following these tags: " + list.join(', '); } } var sFollowedTopicWordsToolTip = "You can follow models with toom topics containing your search words and have them appear at the top of the homepage. "; if(TopicWords && TopicWords.getFollowedTopicWords ) { var followedTopicWords = TopicWords.getFollowedTopicWords() || []; var list = Object.keys(followedTopicWords ); if(list.length ) { sFollowedTopicWordsToolTip += " You are following these topic words: " + list.join(', '); } } sHtml += " <div class=mini_popup_header_container> <span class=mini_popup_header><img src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/settings-2.svg\" style=\"height:24px;width:24px;opacity:0.5;\"> " + t.g_hPlatform.Performer + " List Settings</span> <i>&nbsp; <a href='javascript: t.FilterSortOptions.RestoreDefaults(this); '>" + ( g_hPlatform.id == PLAT_CAM ? 'Restore ' : '' ) + "Defaults</a> &nbsp; <a href='http://wiki." + t.g_hPlatform.domain + "/wiki/Model_List_Settings' target=_blank>Help</a> &nbsp; </i> </div> <table cellpadding=0 cellspacing=0> <tr>\
 <td valign=top> <table cellpadding=0 cellspacing=0> <tr> <td> <div class=model_list_settings_box_on_white> <table cellpadding=0 cellspacing=0 border=0> <tr> <td colspan=2 class=model_list_settings_box_title> Show at the top of the " + t.g_hPlatform.performer + " list: </td> </tr> <tr> <td class=model_list_settings_value valign=top> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_friends_first');\" class=toggle_checkbox > <span class=\"model_list_friend\"> <input type=checkbox value=1 " + ( t.g_hSelf['online_model_friends_first'] == 1 ? 'CHECKED' : '' ) + "></span> <img src='" + t.g_hPlatform.image_url_cdn + "images/svg/heart.svg' class=icon style='height:10px;width:10px;filter:invert(0.7);'> Friends </span> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_bookmarked_models_first');\" class=toggle_checkbox > <span class=\"model_list_bookmark\"> <input type=checkbox value=1 " + ( t.g_hSelf['online_bookmarked_models_first'] == 1 ? 'CHECKED' : '' ) + "></span> <img src='" + t.g_hPlatform.image_url_cdn + "images/svg/bookmark.svg' class=icon style='height:10px;width:10px;filter:invert(0.7);'> Bookmarks </span> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_recommendations_first');\" class=toggle_checkbox> <span class=\"model_list_recommend\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_recommendations_first'] == 1 ? 'CHECKED' : '' ) + "></span> Models You May Like </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_popular_rooms_first');\" class=toggle_checkbox> <span class=\"model_list_popular\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_popular_rooms_first'] == 1 ? 'CHECKED' : '' ) + "></span> Most Popular Rooms </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_trending_rooms_first');\" class=toggle_checkbox> <span class=\"model_list_trending\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_trending_rooms_first'] == 1 ? 'CHECKED' : '' ) + "></span> Trending Rooms </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_followed_tags_first');\" class=toggle_checkbox title=\"" + sFollowedTagsToolTip + "\"> <span class=\"model_list_followed_tags\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_followed_tags_first'] == 1 ? 'CHECKED' : '' ) + "></span> Followed Tags </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_followed_topic_words_first');\" class=toggle_checkbox title=\"" + sFollowedTopicWordsToolTip + "\"> <span class=\"model_list_followed_topic_words\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_followed_topic_words_first'] == 1 ? 'CHECKED' : '' ) + "></span> Followed Topic Words </div> </td> <td class=model_list_settings_value valign=top> <div class=toggle_checkbox > <span class=\"model_list_custom_alert\"> <input onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_custom_alert_matches_first'); t.CustomAlerts.poll(); \"  class=show_custom_alert_matches_first type=checkbox value=1 " + ( t.g_hSelf['show_custom_alert_matches_first'] == 1 ? 'CHECKED' : '' ) + "></span> <a href=\"javascript:t.FilterSortOptions.CustomAlerts_openPopup(this);\">Custom Selection</a>\
 </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_model_history_first');\" class=toggle_checkbox> <span class=\"model_list_history\"> <input type=checkbox value=1 " + ( t.g_hSelf['show_model_history_first'] == 1 ? 'CHECKED' : '' ) + "></span> Recently Visited </div> <div class=toggle_checkbox> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_with_notes_first');\" > <input type=checkbox value=1 " + ( t.g_hSelf['show_with_notes_first'] == 1 ? 'CHECKED' : '' ) + "> Models with </span>" + t.A('user_notepad') + "Notes</a> </div> <div onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'new_models_first');\" class=toggle_checkbox> <input type=checkbox value=1 " + ( t.g_hSelf['new_models_first'] == 1 ? 'CHECKED' : '' ) + "> <span style='font-weight:bold;background-color:#FF0;' class='primary_heading_color'>*NEW*</span> Models </div> <div> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_missmfc_first');\" class=toggle_checkbox title='Below you can set the number of Top Miss MFC models to show.'> <input type=checkbox value=1 " + ( t.g_hSelf['model_list_missmfc_first'] == 1 ? 'CHECKED' : '' ) + "> Miss MFC </span> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'show_with_crowns_first');\" class=toggle_checkbox title='Models that finished Top 3 Miss MFC any month.'> <input type=checkbox value=1 " + ( t.g_hSelf['show_with_crowns_first'] == 1 ? 'CHECKED' : '' ) + "> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/crown.16x16.png\"> </span> </div> "; if(g_hPlatform.id != PLAT_CAM ) { sHtml += " <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_order',true,MODELORDER_GRP);\" class=toggle_checkbox> <input type=checkbox value=1 " + ( t.g_hSelf['online_model_order'] & w.MODELORDER_GRP ? 'CHECKED' : '' ) + "> Groups  </span> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_order',true,MODELORDER_PVT);\" class=toggle_checkbox> <input type=checkbox value=1 " + ( t.g_hSelf['online_model_order'] & w.MODELORDER_PVT ? 'CHECKED' : '' ) + "> Privates </span> "; } sHtml += " </td> </tr> </table> </div> </td> </tr> <tr> <td> <div class=model_list_settings_box_on_white style=\"margin-bottom:10px;\" > <table cellpadding=0 cellspacing=0 border=0 > <tr> <td class=model_list_settings_box_title style=\"padding:0px;width:130px;height:23px;\"> Highlighted Rooms\
 </td> <td class=model_list_settings_box_title style=\"padding:0px;font-size:10px;width:55px;\"> Models </td> <td class=model_list_settings_box_title style=\"padding:0px;font-size:10px;\"> Icon/Color? </td> </tr> <tr> <td style=\"white-space:nowrap;font-size:10px;height:23px;\" > <a href=\"javascript:t.FilterSortOptions.CustomAlerts_openPopup(this);\">Custom Selection</a> </td> <td > <select style=\"font-size:11px;\" onChange=\" t.FilterSortOptions.ToggleSelect('model_list_custom_alert_limit',this.value); \" > " + ( hOptionHtml['model_list_custom_alert_limit'] && hOptionHtml['model_list_custom_alert_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/svg/check_box.svg\" style=\"opacity:0.4;margin-right:-2px;\" height=16> <span class=\"toggle_checkbox model_list_custom_alert\">&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_CUSTOM_ALERTS); t.CustomAlerts.poll(); \" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_CUSTOM_ALERTS ? 'SELECTED' : '' ) + ">Yes</option> </select> </span> </td> </tr> <tr> <td class=toggle_checkbox style=\"white-space:nowrap;font-size:10px;height:23px;\" onClick=\" t.FilterSortOptions.ToggleSelect('model_list_mre_limit'); \"> Models You May Like </td> <td > <select style=\"font-size:11px;\" onChange=\" t.FilterSortOptions.ToggleSelect('model_list_mre_limit',this.value); \"> " + ( hOptionHtml['model_list_mre_limit'] && hOptionHtml['model_list_mre_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/png/thumb_up_v2_black.16x16.png\"> <span class=\"toggle_checkbox model_list_recomment\">&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_RECOMMEND);\" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_RECOMMEND ? 'SELECTED' : '' ) + ">Yes</option> </select> </span> </td> </tr> <tr> <td class=toggle_checkbox style=\"white-space:nowrap;font-size:10px;height:23px;\" onClick=\" t.FilterSortOptions.ToggleSelect('model_list_popular_limit'); \"> Most Popular Rooms </td>\
 <td > <select style=\"font-size:11px;\" id=model_list_popular_limit onChange=\" t.FilterSortOptions.ToggleSelect('model_list_popular_limit',this.value); \" > " + ( hOptionHtml['model_list_popular_limit'] && hOptionHtml['model_list_popular_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/popular_rooms_overlay.png\"> <span class=\"toggle_checkbox model_list_popular\">&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_POPULAR);\" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_POPULAR ? 'SELECTED' : '' ) + ">Yes</option> </select> </span> </td> </tr> <tr> <td class=toggle_checkbox style=\"white-space:nowrap;font-size:10px;height:23px;\" onClick=\" t.FilterSortOptions.ToggleSelect('model_list_trending_limit'); \"> Trending Rooms</span>  </td> <td > <select style=\"font-size:11px;\" id=model_list_trending_limit onChange=\" t.FilterSortOptions.ToggleSelect('model_list_trending_limit',this.value); \" > " + ( hOptionHtml['model_list_trending_limit'] && hOptionHtml['model_list_trending_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/svg/trend_light.svg\" width=19 > <span class=\"toggle_checkbox trending\">&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_TRENDING);\" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_TRENDING ? 'SELECTED' : '' ) + ">Yes</option> </select> </span> </td> </tr> <tr> <td class=toggle_checkbox style=\"white-space:nowrap;font-size:10px;height:23px;\" onClick=\" t.FilterSortOptions.ToggleSelect('model_list_history_limit'); \"> Recently Visited</span>  </td> <td > <select style=\"font-size:11px;\" id=model_list_history_limit onChange=\" t.FilterSortOptions.ToggleSelect('model_list_history_limit',this.value); \" > " + ( hOptionHtml['model_list_history_limit'] && hOptionHtml['model_list_history_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/png/go_back.16x16.png\"> <span class=\"toggle_checkbox model_list_history\">&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_RECENT);\" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_RECENT ? 'SELECTED' : '' ) + ">Yes</option> </select>\
 </span> </td> </tr> <tr> <td class=toggle_checkbox style=\"white-space:nowrap;font-size:10px;height:23px;\" onClick=\" t.FilterSortOptions.ToggleSelect('model_list_missmfc_limit'); \"> Top Miss MFC Ranks </td> <td > <select style=\"font-size:11px;\" id=model_list_missmfc_limit onChange=\" t.FilterSortOptions.ToggleSelect('model_list_missmfc_limit',this.value); \"> " + ( hOptionHtml['model_list_missmfc_limit'] && hOptionHtml['model_list_missmfc_limit'].join('') ) + " </select> </td> <td class=model_list_settings_value style=\"text-align:right;\"> <span style=\"vertical-align:20%;font-weight:bold;font-size:10px;color:white ! important;font-weight:bold;text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\">#1</span> <span id=model_list_icon_missmfc class=toggle_checkbox>&nbsp; <select onChange=\"t.FilterSortOptions.ToggleCheckbox(this,'model_list_icon_bitmask',this.value,MODEL_LIST_ICON_MISSMFC);\" style=\"font-size:11px;\"> <option value=0>No</option> <option value=1 " + ( t.g_hSelf['model_list_icon_bitmask'] & MODEL_LIST_ICON_MISSMFC ? 'SELECTED' : '' ) + ">Yes</option> </select> </span> </td> </tr> </table> </div> </td> </tr> <tr> <td class=region_checkboxes> <div class=model_list_settings_box_on_white style=\"position:relative;padding-top:16px;margin-bottom:0px;\"> " + FilterSortOptions.FormHTML_RegionsHTML(hOptions) + " <div style=\"font-size:10px;padding-top:4px;padding-left:187px;\"> <a href=\"javascript:t.FilterSortOptions.ClearRegions(this); \"><i>Clear All</i></a> </div> </div> </td> </tr> </table> "; if(! g_UA.mobile && hOptions.columns != 1 ) { sHtml += " </td> <td valign=top> "; } else { sHtml += "<br>"; } sHtml += "\
 <div class=model_list_settings_box_on_white style=\"margin-right:0px;\"> <div style=\"font-size:10px;padding:0px 0px 10px 2px; white-space:nowrap;\"> <span style=\"font-size:11px;\"><b>Models are</b>&nbsp; <span style='font-weight:bold;background-color:#FF0;' class='primary_heading_color'>*NEW*</span> for </span>  <select onChange=\"t.FilterSortOptions.ChangeNewModelDays(this.value);\" style='font-size:11px;'> " + ( aNewModelDayOptions && aNewModelDayOptions.join('') ) + " </select> (<span class=new_model_display_count>" + FilterSortOptions.CountNewModels() + "</span> new) </div> <table width=100%> <tr> <td class=model_list_settings_box_title style=\"position:relative;font-size:11px;padding-right:10px;padding:0px 10px 1px 0px; vertical-align:middle;\" nowrap> Display Type: <span style='font-weight:normal;font-size:10px;'>(" + ( window.player && player.g_sPlayerMode == 'player' ? 'Below Chat Room':'On Homepage') + ")</span> </td> </tr> <tr> <td style=\"position:relative;font-size:10px;white-space:nowrap;padding-bottom:12px;\"> " + ( aOnlineModelMobilePattern && aOnlineModelMobilePattern.join('') ) + " <table cellpadding=0 cellspacing=0 border=0> <tr> <td colspan=2 class=model_list_settings_value valign=top style=\"\"> <span onClick='t.FilterSortOptions.ToggleCheckbox(this,\"display_animation\",null,null," + JSON.stringify(hOptions) + ");' class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=display_combined " + ( DisplayTypeRadioChecked['animation'] ? 'CHECKED' : '' ) + "> <!--<img class=\"svg_icon\" src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/video-1.svg\">--> Animations at </span> <select style='font-size:11px;' onchange=\" t.FilterSortOptions.ToggleSelect('auto_update_livesnaps_persec_" + hOptions.player_mode + "', this.value ); \"> " + ( hOptionHtml['auto_update_livesnaps_persec_' + hOptions.player_mode ] && hOptionHtml['auto_update_livesnaps_persec_' + hOptions.player_mode ].join('') ) + " </select> per second. </td> </tr> <tr> <td class=model_list_settings_value valign=top style=\"\"> <span onClick='t.FilterSortOptions.ToggleCheckbox(this,\"display_still_previews\",null,null," + JSON.stringify(hOptions) + ");' class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=display_combined " + ( DisplayTypeRadioChecked['previews'] ? 'CHECKED' : '' ) + "> <!--<img class=\"svg_icon\" src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/camera-3.svg\">--> Still Previews </span> </td> <td class=model_list_settings_value valign=top style=\"\"> <span class=toggle_checkbox onClick=\"t.FilterSortOptions.ToggleSelect('model_list_overlay_avatar',null,[1,0]);\"> Overlay Avatar: </span> <select onChange=\" t.FilterSortOptions.ToggleSelect('model_list_overlay_avatar_" + hOptions.player_mode + "',this.value);OnlineBroadcasterList.Refresh('reset');\" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['model_list_overlay_avatar_' + hOptions.player_mode ] ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( ! t.g_hSelf['model_list_overlay_avatar_' + hOptions.player_mode ] ? 'SELECTED' : '' ) + ">No</option> </select> </td>\
 </tr> <tr> <td class=model_list_settings_value valign=top style=\"\"> <span onClick='t.FilterSortOptions.ToggleCheckbox(this,\"display_avatars\",null,null," + JSON.stringify(hOptions) + ");' class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=display_combined " + ( DisplayTypeRadioChecked['avatars'] ? 'CHECKED' : '' ) + "> <!--<img class=\"svg_icon\" src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/profile-1.svg\">--> Avatars </span> </td> <td class=model_list_settings_value valign=top style=\"\"> <span class=toggle_checkbox onClick=\"t.FilterSortOptions.ToggleSelect('model_list_overlay_avatar',null,[1,0]);\"> Overlay Preview: </span> <select onChange=\" t.FilterSortOptions.ToggleSelect('model_list_overlay_preview_" + hOptions.player_mode + "',this.value);OnlineBroadcasterList.Refresh('reset');\" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['model_list_overlay_preview_'+hOptions.player_mode] ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( ! t.g_hSelf['model_list_overlay_preview_'+hOptions.player_mode] ? 'SELECTED' : '' ) + ">No</option> </select> </td> </tr> <tr> <td class=model_list_settings_value valign=top style=\"\"> <span onClick='t.FilterSortOptions.ToggleCheckbox(this,\"online_model_pattern\",3);' class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=display_combined " + ( DisplayTypeRadioChecked['text_list'] ? 'CHECKED' : '' ) + "> Text List </span> </td> <td class=model_list_settings_value valign=top style=\"\">\<!-- <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'online_model_pattern',8);\" class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=size_combined " + ( DisplayTypeRadioChecked['previews_avatars'] ? 'CHECKED' : '' ) + "> Cam Preview & Avatar </span>\--> </td> </tr> <tr> <td class=model_list_settings_value valign=top style=\"padding-top:10px;\"> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'display_small');\" class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=size_combined " + ( DisplayTypeRadioChecked['small'] ? 'CHECKED' : '' ) + "> <!--<img class=\"svg_icon\" src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/grid-2.svg\">--> Small Images </span> </td> <td class=model_list_settings_value valign=top style=\"padding-top:10px;\"> <span onClick=\"t.FilterSortOptions.ToggleCheckbox(this,'display_large');\" class=toggle_checkbox style=\"position:relative;\" > <input type=radio name=size_combined " + ( DisplayTypeRadioChecked['large'] ? 'CHECKED' : '' ) + "> <!--<img class=\"svg_icon\" src=\"" + t.g_hPlatform.image_url_cdn + "images/flat/solid/svg_green/grid-1.svg\">--> Large Images </span> </td>\
 </tr> </table> </td> </tr> <tr> <td style=\"font-size:11px;padding-right:10px;padding:0px 0px 10px 0px;cursor:pointer;\" nowrap> <span class=toggle_checkbox onClick=\"t.FilterSortOptions.ToggleSelect('show_room_counts',null,[1,0]);\"> Show Room Count: </span> <select onChange=\" t.FilterSortOptions.ToggleSelect('show_room_counts',this.value); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['show_room_counts'] ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( ! t.g_hSelf['show_room_counts'] ? 'SELECTED' : '' ) + ">No</option> </select> <span class=toggle_checkbox onClick=\"t.FilterSortOptions.ToggleSelect('model_list_show_topic',null,[1,0]);OnlineBroadcasterList.Refresh('reset');\">Topics:</span> <select onChange=\" t.FilterSortOptions.ToggleSelect('model_list_show_topic',this.value); OnlineBroadcasterList.Refresh('reset'); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['model_list_show_topic'] == '1' ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( t.g_hSelf['model_list_show_topic'] == '0' ? 'SELECTED' : '' ) + ">No</option> </select> </td> </tr>\<!-- <tr> <td style=\"font-size:11px;padding-right:10px;padding:0px 0px 10px 0px;cursor:pointer;\" nowrap> "; if(hOptions.player_mode == 'homepage' ) { sHtml += " <span class=toggle_checkbox onClick=\"t.FilterSortOptions.ToggleSelect('model_list_show_links',null,[1,0]);OnlineBroadcasterList.Refresh('reset');\">Show Links:</span> <select onChange=\" t.FilterSortOptions.ToggleSelect('model_list_show_links',this.value); OnlineBroadcasterList.Refresh('reset'); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['model_list_show_links'] == '1' ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( t.g_hSelf['model_list_show_links'] == '0' ? 'SELECTED' : '' ) + ">No</option> </select> "; } sHtml += " </td> </tr>\--> "; sHtml += " <tr> <td class=model_list_settings_box_title style=\"padding-right:10px;padding:0px 10px 1px 0px;vertical-align:top;font-size:11px;\" nowrap> Sort models by: </td> </tr> <tr> <td style=\"font-size:10px;white-space:nowrap;padding-bottom:12px;\">\
 <table cellpadding=0 cellspacing=0 style=\"padding-bottom:10px;\"> <tr> <td class=model_list_settings_value> " + ( aSort && aSort.join('') ) + " </td> </tr> </table> "; if(g_hPlatform.id != PLAT_CAM ) { sHtml += " <div class=toggle_checkbox style=\"font-size:10px;cursor:pointer;\" nowrap > <span onClick=\"t.FilterSortOptions.ToggleSelect('group_models_by_state',null,[1,0]); \">Show Public models first?</span>  <select id=group_models_by_state onChange=\" t.FilterSortOptions.ToggleSelect('group_models_by_state',this.value); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['group_models_by_state'] == '1' ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( t.g_hSelf['group_models_by_state'] == '0' ? 'SELECTED' : '' ) + ">No</option> </select> </div> "; } sHtml += " </td> </tr> <tr> <td> <table " + ( g_UA.IE && g_UA.IE < 10 ? '' : 'width=100%' ) + " cellpadding=0 cellspacing=0> <tr> <td class=model_list_settings_box_title style=\"padding-right:10px;padding:0px 10px 1px 0px;vertical-align:top;font-size:11px;\" nowrap> Show which models: </td> </tr> </table> </td> </tr> <tr> <td style=\"font-size:10px;white-space:nowrap;padding-bottom:12px;\"> <table cellpadding=0 cellspacing=0> <tr> <td class=model_list_settings_value> " + ( aSelection && aSelection.join('') ) + " </td> </tr> </table> </td> </tr> <tr> <td style=\"padding-right:10px;padding:0px 10px 14px 0px;vertical-align:top;\" nowrap> <span class=model_list_settings_box_title>Paging:</span>\
 <span style=\"font-size:10px;\">" + ( aModelListPagingRadios && aModelListPagingRadios.join('') ) + "</span> </td> </tr> <tr> <td class=model_list_settings_box_title style=\"padding-right:10px;padding:0px 10px 1px 0px;vertical-align:top;font-size:11px;\" nowrap> " + t.g_hPlatform.Performer + " list refresh rate: <span style='font-weight:normal;font-size:10px;'> <select style='font-size:11px;' onChange=\" t.FilterSortOptions.ChangeRefreshSeconds(this.value);\"> " + ( aModelListRefreshSeconds && aModelListRefreshSeconds.join('') ) + " </select></span> </td> </tr> </table> </div> <div class=model_list_settings_box_on_white style=\"margin-right:0px;\"> <table> "; if(t.g_hSelf.access_level < FCS.FCLEVEL_PREMIUM ) { sHtml += " <tr> <td class=toggle_checkbox style=\"font-size:11px;padding-right:10px;padding:0px 10px 1px 0px;cursor:pointer;\" onClick=\"t.FilterSortOptions.ToggleSelect('show_room_muting',null,[1,0]);\" nowrap> Show if " + ( t.g_hSelf.access_level == FCS.FCLEVEL_BASIC ? 'Basics' : 'Guests' ) + " can chat? </td> <td> <select onChange=\" t.FilterSortOptions.ToggleSelect('show_room_muting',this.value); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['show_room_muting'] ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( ! t.g_hSelf['show_room_muting'] ? 'SELECTED' : '' ) + ">No</option> </select> </td> </tr> "; } sHtml += " <tr> <td class=toggle_checkbox style=\"font-size:11px;padding-right:10px;padding:0px 10px 1px 0px;cursor:pointer;\" onClick=\"t.FilterSortOptions.ToggleSelect('show_text_list_link',null,[1,0]);\" nowrap> Show <b><a href=\"javascript: if(PopModelIndex ) { PopModelIndex({ mode:'full' }); } \" title='Show Text List of Models'>Text List</a></b> link at the top? </td> <td> <select onChange=\"t.UserExtensions.Write('show_text_list_link',this.value); \" style='font-size:11px;'> <option value=\"1\" " + ( t.g_hSelf['show_text_list_link'] ? 'SELECTED' : '' ) + ">Yes</option> <option value=\"0\" " + ( ! t.g_hSelf['show_text_list_link'] ? 'SELECTED' : '' ) + ">No</option> </select> </td> </tr> "; sHtml += "\
 <tr> <td class=toggle_checkbox style=\"font-size:11px;padding-right:10px;padding:0px 10px 1px 0px;cursor:pointer;\" onClick=\"t.FilterSortOptions.ToggleSelect('single_page_website',null,[0,1]); \" nowrap> " + t.g_hPlatform.Performer + " list has <b>separate scroll bar</b>? </td> <td> <select onChange=\"t.FilterSortOptions.ToggleSelect('single_page_website',this.value);\" style='font-size:11px;'> <option value=\"0\">Yes</option> <option value=\"1\" " + ( t.g_hSelf['single_page_website'] == 1 ? 'SELECTED' : '' ) + ">No</option> </select> </td> </tr> "; if(1 || top.location.search.match(/auto_scroll=1/) ) { sHtml += " <tr> <td class=toggle_checkbox style=\"font-size:11px;padding-right:10px;padding:0px 10px 1px 0px;cursor:pointer;\" onClick=\"t.FilterSortOptions.ToggleSelect('enable_auto_scroll_control',null,[0,1]); \" nowrap> Enable auto-scrolling controls? </td> <td> <select onChange=\"t.FilterSortOptions.ToggleSelect('enable_auto_scroll_control',parseInt(this.value));\" style='font-size:11px;'> <option value=0 " + ( ! t.g_hSelf['enable_auto_scroll_control'] ? 'SELECTED' : '' ) + ">No</option> <option value=1 " + ( t.g_hSelf['enable_auto_scroll_control'] ? 'SELECTED' : '' ) + ">Yes</option> </select> </td> </tr> "; }  
 sHtml += " </table> </div> </td> </tr> </table> </div> "; return sHtml;};FilterSortOptions.RestoreDefaults = function(oEl ){ if(! oEl ) { return; } doc = oEl && oEl.ownerDocument; var hDefaults = { model_list_mode: 'scroll', online_model_selection: 'custom', online_model_sort: ( g_hPlatform.id == PLAT_CAM ? 'popular_room' : 'rating' ), online_model_regions: 0, online_model_regions_top: 0, group_models_by_state: 1, online_model_friends_first: 1, online_bookmarked_models_first: 1, show_followed_tags_first: 1, show_followed_topic_words_first: 1, hd_webcams_first: 0, online_model_order: 5, online_model_pattern: 1, online_model_pattern_player: 1, show_room_muting: 0, show_room_counts: 0, show_text_list_link: 0, model_list_refresh_seconds: 30, model_list_missmfc_limit: null, new_models_first: null, show_text_list_link: null, online_bookmarked_models_first: null, show_recommendations_first: null, new_model_days: null, model_list_mre_limit: null, model_list_popular_limit: null, model_list_trending_limit: null, show_popular_rooms_first: null, show_trending_rooms_first: null, show_model_history_first: null, model_list_history_limit: null, model_list_icon_bitmask: null,
 model_list_show_topic: null, show_custom_alert_matches_first: null, model_list_custom_alert_limit: null }; var nDelay = 0; for(var sK in hDefaults ) { with({ sK: sK }) { if(t.UserExtensions.hExtNamesToIds[sK] ) { g_hSelf[ sK ] = t.UserExtensions.hExtNamesToIds[sK].default_value; UserExtensions.Write(sK, t.UserExtensions.hExtNamesToIds[sK].default_value ); } else { g_hSelf[ sK ] = hDefaults[ sK ]; setTimeout( nDelay ); nDelay += 100; } } } setTimeout(, nDelay + 100 ); var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(oPlayerWindow.OnlineBroadcasterList ) oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); if(oPlayerWindow.mfcBroadcasterDisplay ) { oPlayerWindow.mfcBroadcasterDisplay.hCurrentPattern['homepage'] = t.g_hSelf.online_model_pattern; oPlayerWindow.mfcBroadcasterDisplay.hCurrentPattern['player'] = t.g_hSelf.online_model_pattern_player; } setTimeout( ,nDelay + 100); var els = oPlayerWindow.document.getElementsByClassName('new_model_display_count'); for(var a=0; a < els.length; a++ ) { els[a].innerHTML = FilterSortOptions.CountNewModels(); } } } if(t.g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { t.UserExtensions.LocalStorage_Clear(); }};FilterSortOptions.CountNewModels = function(nValue ){ var nNewModels = 0; for(var nUserId in t.g_hUsers ) { var hUser = t.g_hUsers[nUserId]; if(hUser.access_level == FCS.FCLEVEL_MODEL && hUser.state < FCS.FCVIDEO_RX_IDLE && hUser.new_model && hUser.new_model <= t.g_hSelf.new_model_days ) { nNewModels++; } } return FilterSortOptions.nNewModels = nNewModels;};FilterSortOptions.ChangeNewModelDays = function(nValue ){ t.UserExtensions.Write('new_model_days', nValue ); var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) { oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); var els = oPlayerWindow.document.getElementsByClassName('new_model_display_count'); for(var a=0; a < els.length; a++ ) { els[a].innerHTML = FilterSortOptions.CountNewModels(); } } }};FilterSortOptions.ChangeRefreshSeconds = function(nValue ){ t.UserExtensions.Write('model_list_refresh_seconds', nValue ); FilterSortOptions.UpdateForms();
 if(ModelMenuBar.RefreshModelList ) { ModelMenuBar.RefreshModelList(); }};FilterSortOptions.UpdateForms = function(){ for(var sK in g_hWindows ) { if(g_hWindows[sK].window && g_hWindows[sK].window.FilterSortOptions && g_hWindows[sK].window.FilterSortOptions.UpdateForm ) { g_hWindows[sK].window.FilterSortOptions.UpdateForm(); } if(g_hWindows[sK].window && g_hWindows[sK].window.FilterSortOptions_Player && g_hWindows[sK].window.FilterSortOptions_Player.UpdateForm ) { g_hWindows[sK].window.FilterSortOptions_Player.UpdateForm(); } }};FilterSortOptions.ToggleSelect = function(sKey, sValue, aPossibleValues ){ if(! sKey ) { return; } if(typeof(sValue) != 'undefined' && sValue !== null ) { t.g_hSelf[ sKey ] = sValue; } if(! sValue && ! aPossibleValues && FilterSortOptions.hSelectLimits[sKey] ) aPossibleValues = FilterSortOptions.hSelectLimits[sKey]; if(aPossibleValues ) { var nCurrentValuePosition = 0; for(var nK=0; nK < aPossibleValues.length; nK++ ) { if(t.g_hSelf[ sKey ] == aPossibleValues[ nK ] ) { nCurrentValuePosition = nK; break; } } t.g_hSelf[ sKey ] = aPossibleValues[ nCurrentValuePosition == ( aPossibleValues.length -1 ) ? 0 : ( nCurrentValuePosition + 1 ) ];
 } if(t.UserExtensions.hExtNamesToIds[sKey] ) { t.UserExtensions.Write(sKey,t.g_hSelf[ sKey ]); } else { t.SaveSetting(sKey,t.g_hSelf[ sKey ]); } var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(oPlayerWindow.mfcBroadcasterDisplay ) { oPlayerWindow.mfcBroadcasterDisplay._ClearBroadcasterHtmlCache(); } if(sKey == 'single_page_website' && oPlayerWindow.LayoutSizing ) { oPlayerWindow.LayoutSizing.SetSinglePageWebsite(t.g_hSelf.single_page_website ); } else if(( sKey == 'show_text_list_link' || sKey == 'model_list_overlay_avatar' || sKey == 'enable_auto_scroll_control' ) && oPlayerWindow.ModelMenuBar ) { oPlayerWindow.ModelMenuBar.Refresh(); } } } if(window.player && player.OnlineBroadcasterList) { player.OnlineBroadcasterList.Refresh('reset'); } else { OnlineBroadcasterList.Refresh('reset'); } FilterSortOptions.UpdateForms();};FilterSortOptions.ToggleCheckbox = function(oElement, sKey, sValue, nBitMask, hOptions ){ hOptions = hOptions || {}; var sOnlinePatternKey = 'online_model_pattern' + (( window.player && player.g_sPlayerMode == 'player' ) ? '_player' : '' ); var nNewPattern; if(sKey == 'online_model_pattern' ) { sKey = sOnlinePatternKey; } if(! g_UA.mobile ) { if(sKey == 'display_avatars' && ( t.g_hSelf[sOnlinePatternKey] == 1 || t.g_hSelf[sOnlinePatternKey] == 2 ) ) sKey = 'display_previews'; else if(sKey == 'display_previews' && ( t.g_hSelf[sOnlinePatternKey] == 4 || t.g_hSelf[sOnlinePatternKey] == 5 ) ) sKey = 'display_avatars'; else if(sKey == 'display_small' && ( t.g_hSelf[sOnlinePatternKey] == 1 || t.g_hSelf[sOnlinePatternKey] == 4 ) ) sKey = 'display_large'; else if(sKey == 'display_large' && ( t.g_hSelf[sOnlinePatternKey] == 2 || t.g_hSelf[sOnlinePatternKey] == 5 ) ) sKey = 'display_small'; } if(sKey == 'online_model_pattern' && sValue == 8 ) { g_hSelf.auto_update_livesnaps = 1; } else if(sKey == 'display_animation' ) { var nNewPattern = t.g_hSelf[sOnlinePatternKey] == 2 || t.g_hSelf[sOnlinePatternKey] == 5 ? 5 : 4; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); FilterSortOptions.ToggleCheckbox(oElement, 'auto_update_livesnaps',g_hSelf.auto_update_livesnaps | ( hOptions.player_mode == 'player' ? 2 : 1 ) ); return; } else if(sKey == 'display_avatars' ) { var nNewPattern = t.g_hSelf[sOnlinePatternKey] == 5 || t.g_hSelf[sOnlinePatternKey] == 2 ? 2 : 1; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); } else if(sKey == 'display_previews' || sKey == 'display_still_previews' ) { var nNewPattern = t.g_hSelf[sOnlinePatternKey] == 2 || t.g_hSelf[sOnlinePatternKey] == 5 ? 5 : 4; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); if(sKey == 'display_still_previews' && g_hSelf.auto_update_livesnaps & ( hOptions.player_mode == 'player' ? 2 : 1 ) ) { FilterSortOptions.ToggleCheckbox(oElement, 'auto_update_livesnaps',g_hSelf.auto_update_livesnaps & ~ ( hOptions.player_mode == 'player' ? 2 : 1 ) );
 } } else if(sKey == 'display_previews' || sKey == 'display_avatars' ) { if(sKey == 'display_previews' ) { nNewPattern = t.g_hSelf[sOnlinePatternKey] == 2 || t.g_hSelf[sOnlinePatternKey] == 5 ? 5 : 4; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); } else { nNewPattern = t.g_hSelf[sOnlinePatternKey] == 2 || t.g_hSelf[sOnlinePatternKey] == 5 ? 2 : 1; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); } if(g_hSelf.auto_update_livesnaps & ( hOptions.player_mode == 'player' ? 2 : 1 ) ) FilterSortOptions.ToggleCheckbox(oElement, 'auto_update_livesnaps',g_hSelf.auto_update_livesnaps ^ ( hOptions.player_mode == 'player' ? 2 : 1 ) ); return; } if(sKey == 'display_small' ) { nNewPattern = t.g_hSelf[sOnlinePatternKey] == 1 || t.g_hSelf[sOnlinePatternKey] == 2 ? 1 : 4; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); return; } else if(sKey == 'display_large' ) { nNewPattern = t.g_hSelf[sOnlinePatternKey] == 1 || t.g_hSelf[sOnlinePatternKey] == 2 ? 2 : 5; FilterSortOptions.ToggleCheckbox(oElement, sOnlinePatternKey, nNewPattern ); return; } var oPlayerWindow; var bChecked; if(nBitMask ) { if(t.g_hSelf[ sKey ] & nBitMask ) { bChecked = ! sValue; sValue = t.g_hSelf[ sKey ] ^ nBitMask; } else { bChecked = sValue ? true : false; sValue = t.g_hSelf[ sKey ] | nBitMask;
 } } else if(! sValue ) { sValue = parseInt(t.g_hSelf[ sKey ] ) ? 0 : 1; bChecked = sValue ? true : false; } else { if(sKey == 'online_model_sort' && sValue == 'random' ) { for(var sK in g_hoPlayerWindows) if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.mfcBroadcasters ) oPlayerWindow.mfcBroadcasters.bGeneratedRandomAssignments = false; } else if(sKey == 'online_model_pattern_player' || sKey == 'online_model_pattern' ) { for(var sK in g_hoPlayerWindows) { if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.mfcBroadcasterDisplay ) { oPlayerWindow.mfcBroadcasterDisplay.hCurrentPattern[hOptions.player_mode] = sValue; } } } bChecked = true; } if(t.g_hSelf[sKey] != sValue ) { if(t.UserExtensions.hExtNamesToIds[sKey] ) { UserExtensions.Write(sKey,sValue); } else { SaveSetting(sKey,sValue); } } if(oElement && oElement.getElementsByTagName ) { aNodes = oElement.getElementsByTagName('input'); if(aNodes && aNodes[0] ) { aNodes[0].checked = bChecked; } } if(sKey == 'online_model_pattern_player' || sKey == 'online_model_pattern' ) { for(var sK in g_hoPlayerWindows) { if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.ModelMenuBar ) { with({oPlayerWindow:oPlayerWindow}) { setTimeout( 0); } } } } else if(sKey == 'model_list_overlay_preview_' + hOptions.player_mode || sKey == 'model_list_overlay_avatar_' + hOptions.player_mode ) { var sClass=''; if(sKey == 'model_list_overlay_preview_' + hOptions.player_mode ) { sClass = 'overlay_cam_snap'; } else if(sKey == 'model_list_overlay_avatar_' + hOptions.player_mode ) { sClass = 'avatar_overlay'; } var bReveal = g_hSelf[sKey]; for(var sK in g_hoPlayerWindows) if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) with({oPlayerWindow:oPlayerWindow}) setTimeout(function() { oPlayerWindow.mfcBroadcasterDisplay.HideRevealElement({ class: sClass, reveal: bReveal, with_classnames: true }); oPlayerWindow.ModelMenuBar.Refresh(); } ,0 ); } else if(sKey == 'model_list_mode' || sKey == 'model_list_show_topic' || ( sKey == 'model_list_icon_bitmask' && nBitMask == MODEL_LIST_ICON_NEW_MODEL ) || ( sKey == 'model_list_icon_bitmask' && nBitMask == MODEL_LIST_ICON_MISSMFC ) ) { ModelMenuBar.Refresh(); for(var sK in g_hoPlayerWindows) if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) with({oPlayerWindow:oPlayerWindow}) setTimeout(function() { oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); }, 0 ); } else { for(var sK in g_hoPlayerWindows) if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) with({oPlayerWindow:oPlayerWindow}) setTimeout(function() { oPlayerWindow.OnlineBroadcasterList.Refresh('force'); }, 0 ); } if ( sKey === 'model_list_show_links_'+hOptions.player_mode ) { ModelMenuBar.Refresh(); }
 if(sKey == 'model_list_missmfc_first' && bChecked && ! ( t.g_hSelf.model_list_icon_bitmask & MODEL_LIST_ICON_MISSMFC ) ) { UserExtensions.Write('model_list_icon_bitmask', t.g_hSelf['model_list_icon_bitmask'] | MODEL_LIST_ICON_MISSMFC ); } FilterSortOptions.UpdateForms(); t.FilterSortOptions.UpdateRegionCheckboxes(oElement.ownerDocument );};FilterSortOptions.DataCollectTopRegionCheckboxes = function(sMode,oEl){ var oParent = oEl; var limit=0; do { oParent = oParent.parentNode; if(limit++ > 100 ) { break; } } while(oParent.className != 'region_checkboxes' ); if(oParent.className != 'region_checkboxes' ) { return; } var nTopMask = 0; for(var sK in g_hRegionConfig ) { var el = oParent.getElementsByClassName("regions_top_" + sK )[0]; if(el.checked ) { nTopMask = nTopMask | g_hRegionConfig[sK]['bit']; } } if(nTopMask != t.g_hSelf['online_model_regions_top'] ) { t.UserExtensions.Write('online_model_regions_top', nTopMask ); } FilterSortOptions.UpdateRegionCheckboxes(oEl.ownerDocument ); var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) { var el = oPlayerWindow.document.getElementById('online_broadcasters_container'); var bScrollDown = ( ( el.scrollHeight - ( el.scrollTop + el.offsetHeight ) ) < 400 ); setTimeout(function() { oPlayerWindow.OnlineBroadcasterList.Refresh('reset',{ scroll_to_bottom: bScrollDown }); }, 0 ); } }};FilterSortOptions.DataCollectRegionCheckboxes = function(sMode,oEl){ var oParent = oEl; var limit=0; do { oParent = oParent.parentNode; if(limit++ > 100 ) { break; } } while(oParent.className != 'region_checkboxes' );
 if(oParent.className != 'region_checkboxes' ) { return; } var nTopMask = 0; var nRegionMask = 0; var bInUse = 0; if(sMode == 'hide' ) { bInUse = 0; for(var sK in g_hRegionConfig ) { var el = oParent.getElementsByClassName("regions_hide_" + sK )[0]; if(el.checked ) { nTopMask = nTopMask | g_hRegionConfig[sK]['bit']; } if(el.checked ) { nRegionMask = nRegionMask | g_hRegionConfig[sK]['bit']; bInUse++; } } } else if(sMode == 'show' ) { bInUse = 0; for(var sK in g_hRegionConfig ) { bInUse++; } for(var sK in g_hRegionConfig ) { var el = oParent.getElementsByClassName("regions_show_" + sK )[0]; if(el.checked ) { nTopMask = nTopMask | g_hRegionConfig[sK]['bit']; } if(! el.checked ) { nRegionMask = nRegionMask | g_hRegionConfig[sK]['bit']; bInUse--; } } } if(bInUse == 0 ) { nRegionMask = 0; sMode = 'hide'; } if(nRegionMask != t.g_hSelf['online_model_regions'] ) { BlockedModelRegionCheck.ClearCache(); t.UserExtensions.Write('online_model_regions', nRegionMask ); }
 if(sMode != t.g_hSelf['online_model_regions_mode'] ) { BlockedModelRegionCheck.ClearCache(); t.UserExtensions.Write('online_model_regions_mode', sMode ); } FilterSortOptions.UpdateRegionCheckboxes(oEl.ownerDocument ); var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.OnlineBroadcasterList ) { var el = oPlayerWindow.document.getElementById('online_broadcasters_container'); var bScrollDown = ( ( el.scrollHeight - ( el.scrollTop + el.offsetHeight ) ) < 400 ); setTimeout(function() { oPlayerWindow.OnlineBroadcasterList.Refresh('reset',{ scroll_to_bottom: bScrollDown }); }, 0 ); } }};FilterSortOptions.ClearRegions = function(oEl ){ doc = oEl && oEl.ownerDocument; BlockedModelRegionCheck.ClearCache(); var nRegionMask = 0; t.UserExtensions.Write('online_model_regions', 0 ); t.UserExtensions.Write('online_model_regions_top', 0 ); t.UserExtensions.Write('online_model_regions_mode', '' ); FilterSortOptions.UpdateForms(); var oPlayerWindow; for(var sK in g_hoPlayerWindows) { if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(oPlayerWindow.OnlineBroadcasterList ) { var el = oPlayerWindow.document.getElementById('online_broadcasters_container'); var bScrollDown = ( ( el.scrollHeight - ( el.scrollTop + el.offsetHeight ) ) < 400 ); setTimeout( 0 ); } } }};FilterSortOptions.UpdateRegionCheckboxes = function(doc ){
 doc = doc || document; var aForms=[]; if(doc.getElementsByClassName ) { aForms = doc.getElementsByClassName('region_checkboxes'); } for(var a=0; a < aForms.length; a++ ) { if(! aForms[a].getElementsByClassName("regions_show_NA" )[0] ) { continue; } for(var sK in g_hRegionConfig ) { if(t.g_hSelf['online_model_regions_top'] & g_hRegionConfig[sK]['bit'] ) aForms[a].getElementsByClassName("regions_top_" + sK )[0].checked = true; else aForms[a].getElementsByClassName("regions_top_" + sK )[0].checked = false; } if(t.g_hSelf['online_model_regions'] == 0 ) { for(var sK in g_hRegionConfig ) { aForms[a].getElementsByClassName("regions_show_" + sK )[0].checked = false; aForms[a].getElementsByClassName("regions_show_" + sK )[0].disabled = false; aForms[a].getElementsByClassName("regions_hide_" + sK )[0].checked = false; aForms[a].getElementsByClassName("regions_hide_" + sK )[0].disabled = false; } } else if(t.g_hSelf['online_model_regions_mode'] == 'hide' ) { var bInUse = 0; for(var sK in g_hRegionConfig ) { if(t.g_hSelf['online_model_regions'] & g_hRegionConfig[sK]['bit'] ) { aForms[a].getElementsByClassName("regions_show_" + sK )[0].checked = false; aForms[a].getElementsByClassName("regions_hide_" + sK )[0].checked = true; bInUse = 1; } else { aForms[a].getElementsByClassName("regions_show_" + sK )[0].checked = true; aForms[a].getElementsByClassName("regions_hide_" + sK )[0].checked = false; }
 } for(var sK in g_hRegionConfig ) { var oShow = aForms[a].getElementsByClassName("regions_show_" + sK )[0]; var oHide = aForms[a].getElementsByClassName("regions_hide_" + sK )[0]; if(bInUse ) { oShow.disabled = true; } else { oHide.disabled = false; oShow.disabled = false; oShow.checked = false; } } } else if(t.g_hSelf['online_model_regions_mode'] == 'show' ) { var bInUse = 0; for(var sK in g_hRegionConfig ) { if(t.g_hSelf['online_model_regions'] & g_hRegionConfig[sK]['bit'] ) { bInUse = 1; aForms[a].getElementsByClassName("regions_hide_" + sK )[0].checked = true; aForms[a].getElementsByClassName("regions_show_" + sK )[0].checked = false; } else { aForms[a].getElementsByClassName("regions_hide_" + sK )[0].checked = false; aForms[a].getElementsByClassName("regions_show_" + sK )[0].checked = true; } } for(var sK in g_hRegionConfig ) { var oHide = aForms[a].getElementsByClassName("regions_hide_" + sK )[0]; if(bInUse ) { oHide.disabled = true; } else { oHide.disabled = false;
 oHide.checked = false; } } } }};var CustomAlerts={};FilterSortOptions.CustomAlerts_openPopup = function(oEl ){ var doc = ( oEl && oEl.ownerDocument ) || oEl; var sHtml = ''; var alerts=''; if(t.CustomAlerts && t.CustomAlerts.customAlertSummary ) { var checked = {}; var show_custom_alert_matches = t.g_hSelf.show_custom_alert_matches.toString().split(','); for(var a=0; a < show_custom_alert_matches.length; a++ ) { checked[ show_custom_alert_matches[a] ] = 1; } for(var id in t.CustomAlerts.customAlertSummary ) { var name = t.CustomAlerts.customAlertSummary[id].alert_name; if(name ) { name = name.replace(/</g,''); } if(! name ) { name = "<span style='color:gray'>(unnamed)</span>"; } alerts += " <input type=checkbox id=CustomAlerts_checkbox_" + id + " value=" + id + " onclick=\"t.FilterSortOptions.CustomAlerts_processCheckboxes(this);\" " + ( checked[id] ? 'CHECKED' : '' ) + "> " + name + "<br> "; } } if(! alerts ) { if(t.g_hSelf.access_level == FCS.FCLEVEL_GUEST ) { window.open('../html/custom_alerts.html','_blank','height=900,width=930,status=0,'); return; } else { alerts = "<div style='color:gray;font-style:italic;padding:10px 0px;'>No configured selections.</div>"; } }
 sHtml += " <div class=mini_popup_header>Custom Selection</div> <div class=mini_popup_content> " + alerts + " </div> <br> " + t.A('custom_alerts') + "Manage Custom Selections</a> "; doc.CustomAlerts_processCheckboxes_oDhtmlPopup = new MfcDhtmlPopup({ mfcMouseTracker: g_oMouseTracker, mfcGraphics: g } ); doc.CustomAlerts_processCheckboxes_oDhtmlPopup.open(sHtml, { width: 200 } );};FilterSortOptions.CustomAlerts_processCheckboxes = function(){ if(! t.CustomAlerts || ! t.CustomAlerts.customAlertSummary ) { return; } var newList=[]; for(var id in t.CustomAlerts.customAlertSummary ) { var cb = GetEl('CustomAlerts_checkbox_' + id ); if(cb.checked ) { newList.push(id); } } t.UserExtensions.Write('show_custom_alert_matches', newList.join() ); t.CustomAlerts.poll(); var oPlayerWindow; for(var sK in g_hoPlayerWindows ) if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.ModelMenuBar ) with({oPlayerWindow:oPlayerWindow}) setTimeout(function() { oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); }, 1000 );};var MissMFC = { aRank: [], nModelsPerPage: 10, nModelHeight: 42, nPopupPage: 1, nSidePage: 1, sSelector: 'miss_mfc', bIsDisplayed: false, timer: null};MissMFC.Initialize = function(){ MissMFC.Render();
};MissMFC.Render = function(){ if(! g_bLoginDone ) { setTimeout(MissMFC.Render, 1000 ); return; } var miss_mfc_height = ExtraMenuSelector.sSelectedFeature != 'miss_mfc' ? g_hSelf.miss_mfc_height : -1; if(miss_mfc_height > 0 ) MissMFC.nModelsPerPage = Math.floor(miss_mfc_height / MissMFC.nModelHeight ); clearInterval(MissMFC.timer ); if(MissMFC.bIsDisplayed ) MissMFC.timer = setInterval(MissMFC.Render, 30000 ); else return; var sHtml = MissMFC.GetHTML(); var sPrevNext=''; if(MissMFC.aRank.length >= MissMFC.nModelsPerPage ) { if(MissMFC.nSidePage > 1 ) sPrevNext += " <a href=\"javascript: MissMFC.nSidePage--; MissMFC.Render(); \">&lt;&lt; Previous</a> "; else sPrevNext += " <span>&lt;&lt; Previous</a> "; sPrevNext += " | "; if(( MissMFC.nSidePage * MissMFC.nModelsPerPage ) < MissMFC.aRank.length ) sPrevNext += " <a href=\"javascript: MissMFC.nSidePage++; MissMFC.Render(); \">Next &gt;&gt;</a> "; else sPrevNext += " <span>Next &gt;&gt;</a> "; sPrevNext = "<div>" + sPrevNext + "</div>"; } var sH = "<div class=\"simenu_content simenu_missmfc\">" + "<div id=miss_mfc_scroll style=\"height:" + ( miss_mfc_height > 0 ? ( miss_mfc_height + 'px' ) : 'auto' ) + ";\">" + sHtml + "</div>" + "<div class=\"simenu_prevnext\">" + sPrevNext + "</div>" + "<div class=\"simenu_full\">" + A('miss_mfc') + "View Full Miss MFC List</a></div>"; SetHTML(MissMFC.sSelector, sH );};
MissMFC.GetHTML = function(hOptions ){ hOptions = hOptions || {}; MissMFC.aRank=[]; for(var nUserId in g_hUsers ) { var hUser = g_hUsers[ nUserId ]; if(hUser.access_level == FCS.FCLEVEL_MODEL && hUser.missmfc_rank && hUser.state < FCS.FCVIDEO_OFFLINE ) { MissMFC.aRank.push(MfcStringUtilities.char_padding(hUser.missmfc_rank,10,0) + ":" + nUserId ); } } MissMFC.aRank.sort(); var nModelsPerlPage = hOptions.popup_mode ? 18 : MissMFC.nModelsPerPage; var nPage = hOptions.popup_mode ? MissMFC.nPopupPage : MissMFC.nSidePage; { nStart = ( nPage- 1 ) * nModelsPerlPage; nStop = nPage * nModelsPerlPage; } var aRooms = []; for(var a=nStart; a < nStop; a++ ) { if(! MissMFC.aRank[a] ) { break; } var nUserId = parseInt(MissMFC.aRank[a].split(':')[1] ); aRooms.push(MissMFC.ModelItem(g_hUsers[nUserId], hOptions, a ) ); } return " <div class=\"MissMFCcells\"> " + aRooms.join('') + " </div> ";};MissMFC.ModelItem = function(hUser, hOptions, iteration ){ hOptions = hOptions || {}; var sUserFont = MfcCustomFonts.prototype.get_style(hUser );
 var sClass = iteration % 2 ? 'emphasized_bg' : ''; if(! hUser ) { return ''; } var nUserId = hUser.user_id; var nColor = 255 - parseInt(hUser.missmfc_rank * 3 ); if ( nColor < 0 ) { nColor = 0; } var sColor = nColor.toString(16) + "3333"; var sLinks = "<a href=\"javascript:popUserMenu.open(" + hUser.user_id + ",g_oDhtmlPopup);\">Menu</a> " + A("pm_friend",{ user_id: hUser.user_id, load_video:true, title:("Open a new Private Message window.")}) + "PM</a> "; if(hOptions.popup_mode ) sLinks += A("bio",{ user_id: hUser.user_id, username: hUser.username }) + "Profile</a> "; var sHtml = " <div class=\"model_cell_small mcs_missmfc\"> <i"+"mg draggable=\"true\" ondragstart=\" t.nDragUserId=" + hUser.user_id + ";\" class=\"cpo_listeners mcs_avatar\" sr"+"c=" + AvatarUrl(hUser.user_id ,30) + " data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\" > <div onMouseDown=\" popUserMenu.right_click_open(event,"+hUser.user_id+",g_oDhtmlPopup); \"> <span class=\"mcs_rank\" style=\"color:#" + sColor + ";\">#" + hUser.missmfc_rank + "</span> " + t.A('player',{broadcaster_id:hUser.user_id}) + "<span class='user_style username' style=\"" + sUserFont + "\">" + hUser['username'] + "</span></a> <div class=\"mcs_links\"> " + sLinks + "</div> <div draggable=\"true\" ondragstart=\" t.nDragUserId=" + hUser.user_id + ";\" class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(hUser.user_id,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(hUser.user_id) + "/></div></div> </div> </div> "; return sHtml;};MissMFC.openPopup = function(){ MissMFC.popup = new MfcDhtmlPopup({ mfcMouseTracker: g_oMouseTracker, mfcGraphics: g, parentClass: 'MissMFCPopup' }); MissMFC.popup.zIndex = g_oDhtmlPopup.zIndex - 1; MissMFC.popup.open(MissMFC.getPopupHTML(), { height:320,width:570,no_close_on_mouseout:1,provide_close_button:1 });};MissMFC.updatePopup = MissMFC.getPopupHTML = function(){ var sHtml = MissMFC.GetHTML({ popup_mode: true }); var aMonths = new Array("January","February","March","April","May","June","July","August","September","October","November","December"); var d = new Date(); var sPrevNext=''; if(MissMFC.aRank.length >= 18 ) {
 if(MissMFC.nPopupPage > 1 ) sPrevNext += " <a href=\"javascript: MissMFC.nPopupPage--; MissMFC.updatePopup(); \">&lt;&lt; Previous</a>"; else sPrevNext += " <span>&lt;&lt; Previous</span>"; sPrevNext += " | "; if(( MissMFC.nPopupPage * 18 ) < MissMFC.aRank.length ) sPrevNext += " <a href=\"javascript: MissMFC.nPopupPage++; MissMFC.updatePopup(); \">Next &gt;&gt;</a>"; else sPrevNext += " <span>Next &gt;&gt;</span>"; sPrevNext = " <div class=\"MissMFCPopup_foot\"> <div class=\"MissMFCPopup_full\"> " + t.A('online_miss_mfc') + "Full List of Top Miss MFC Models Online Now</a> </div> <div class=\"MissMFCPopup_prevnext\"> " + sPrevNext + " </div> </div> "; } var sH = "<span class=\"primary_heading_color\"><img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/crown.16x16.png\">Miss " + t.g_hPlatform.name + "</span>" + "<div class=\"MissMFCPopup_desc\">Online models from Top 1000 " + A('miss_mfc') + "Miss " + g_hPlatform.name + "</a> for " + aMonths[ d.getMonth() ] + " " + ( 1900 + d.getYear() ) + "</div>" + sHtml + sPrevNext ; return sH;};var CustomAlerts_SideMenu = { nModelHeight: 41, nDivisionHeight: 48, sSelector: 'custom_alerts', bIsDisplayed: false};CustomAlerts_SideMenu.Initialize = function(){ if(! CustomAlerts_SideMenu.bIsDisplayed ) { return; } CustomAlerts_SideMenu.GetData(); CustomAlerts_SideMenu.Render();};CustomAlerts_SideMenu.GetData = function(){
 CustomAlerts.poll();};CustomAlerts_SideMenu.GetData_Callback = function(){ CustomAlerts_SideMenu.Render();};CustomAlerts_SideMenu.Render = function(){ var aRooms=[]; var nCaCx=0; var nTotalCx=0; var checked = {}; var custom_alert_sidebar_max_results = g_hSelf.custom_alert_sidebar_max_results; var nAlertCx=0; for(var m in CustomAlerts.customAlerts ) { nAlertCx++; } var custom_alerts_height = ExtraMenuSelector.sSelectedFeature != 'custom_alerts' ? g_hSelf.custom_alerts_height : -1; if(custom_alerts_height > 0 && nAlertCx > 0 ) custom_alert_sidebar_max_results = Math.floor(( ( ( custom_alerts_height - ( nAlertCx * CustomAlerts_SideMenu.nDivisionHeight ) ) / nAlertCx ) / CustomAlerts_SideMenu.nModelHeight ) ); if(typeof g_hSelf.show_custom_alert_matches_sidebar === 'undefined' ) { return; } var show_custom_alert_matches_sidebar = g_hSelf.show_custom_alert_matches_sidebar.toString().split(','); for(var a=0; a < show_custom_alert_matches_sidebar.length; a++ ) { checked[ show_custom_alert_matches_sidebar[a] ] = 1; } var bHasSelections = false; for(var ca in CustomAlerts.customAlerts ) { bHasSelections = true; if(g_hSelf.show_custom_alert_matches_sidebar == '-1' ) { checked[ca] = 1; } if(! checked[ca] ) { continue; } if(CustomAlerts.customAlerts[ca].list.length ) { nCaCx++; } var customAlertTitle = CustomAlerts.customAlerts[ca].customAlert.alert_name ? 'View full list for ' + CustomAlerts.customAlerts[ca].customAlert.alert_name.replace(/</g, "&lt;").replace(/>/g, "&gt;") : "unnamed"; aRooms.push(" <div class=\"simenu_custom_alert\" title=\"" + customAlertTitle + "\"> " + A('custom_alerts',{ customAlertId: ca }) + " " + ( CustomAlerts.customAlerts[ca].customAlert.alert_name ? CustomAlerts.customAlerts[ca].customAlert.alert_name.replace(/</g, "&lt;").replace(/>/g, "&gt;") : "<span class=\"fcdis\">(unnamed)</span>" ) + "\
 </a> </div> "); var nWorkingMax = CustomAlerts.customAlerts[ca].list.length; var sExtra = ''; if(nWorkingMax > custom_alert_sidebar_max_results ) { sExtra = "(" + A('custom_alerts',{ customAlertId: ca }) + ( nWorkingMax - custom_alert_sidebar_max_results ) + " more " + t.g_hPlatform.performer + "s</a>)"; nWorkingMax = custom_alert_sidebar_max_results; } for(var a=0; a < nWorkingMax; a++ ) { var hUser = CustomAlerts.customAlerts[ca].sets[ CustomAlerts.customAlerts[ca].list[a] ]; aRooms.push(CustomAlerts_SideMenu.ModelItem(hUser, a ) ); nTotalCx++; } if(CustomAlerts.customAlerts[ca].list.length == 0 ) { sExtra = "<div class=\"no_models\">No results</div>"; } if(sExtra ) { aRooms.push("<div class=\"simenu_foot mb20\">" + sExtra + "</div>"); } } var sDescription = '<div class=\"simenu_desc\">'; if(nTotalCx > 0 ) { var sResultCxOptions=''; for(var a=1; a <= 20; a++ ) { sResultCxOptions += "<option " + ( a == g_hSelf.custom_alert_sidebar_max_results ? 'SELECTED' : '' ) + ">" + a + "</option>"; } if(ExtraMenuSelector.sSelectedFeature == 'custom_alerts' ) { sDescription += " <a href=\"javascript:CustomAlerts_SideMenu.SelectionMenu();\">Selection</a>: <select onChange=\"CustomAlerts_SideMenu.ChangeSidebarCount(this.value);\" style=\"font-size:10px;\">" + sResultCxOptions + "</select> models."; } } else { if(bHasSelections ) sDescription += "<a href=\"javascript:CustomAlerts_SideMenu.SelectionMenu();\">Choose a Selection</a>"; else sDescription += A('custom_alerts') + "Create a Selection</a>";
 } sDescription += '</div>'; SetHTML(CustomAlerts_SideMenu.sSelector," <div class=\"simenu_desc\"> " + sDescription + " </div> <div class=\"simenu_content simenu_custom\" id=\"custom_alerts_scroll\" style=\"height:" + ( custom_alerts_height > 0 ? ( custom_alerts_height + 'px' ) : 'auto' ) + "; \"> " + aRooms.join('') + " </div> <div class=\"simenu_foot\" data-refresh_options> </div> ");};CustomAlerts_SideMenu.ChangeSidebarCount = CustomAlerts_SideMenu.SelectionMenu = function(hData, iteration ){ var sHtml = ''; var checked = {}; var show_custom_alert_matches_sidebar = g_hSelf.show_custom_alert_matches_sidebar.toString().split(','); for(var a=0; a < show_custom_alert_matches_sidebar.length; a++ ) { checked[ show_custom_alert_matches_sidebar[a] ] = 1; } var alerts=''; if(CustomAlerts && CustomAlerts.customAlertSummary ) { for(var id in CustomAlerts.customAlertSummary ) { if(g_hSelf.show_custom_alert_matches_sidebar == '-1' ) { checked[id] = 1; } var name = CustomAlerts.customAlertSummary[id].alert_name; if(name ) { name = name.replace(/</g,''); } if(! name ) { name = "<span style='color:gray'>(unnamed)</span>"; } alerts += " <input type=checkbox id=CustomAlerts_checkbox_" + id + " value=" + id + " onclick=\"CustomAlerts_SideMenu.processCheckboxes(this);\" " + ( checked[id] ? 'CHECKED' : '' ) + "> " + name + "<br> "; } } if(! alerts ) {
 if(g_hSelf.access_level == FCS.FCLEVEL_GUEST ) { window.open('../html/custom_alerts.html','_blank','height=900,width=930,status=0,'); return; } else { alerts = "<div style='color:gray;font-style:italic;padding:10px 0px;'>No configured selections.</div>"; } } sHtml += " <div class=\"mini_popup_header mb20\">Custom Selection</div> <div class=\"mini_popup_content mb20\"> " + alerts + " </div> " + A('custom_alerts') + "Manage Custom Selections</a> "; g_oDhtmlPopup_child.open(sHtml, { width: 200 } );};CustomAlerts_SideMenu.processCheckboxes = function(){ if(! t.CustomAlerts || ! t.CustomAlerts.customAlertSummary ) { return; } var newList=[]; for(var id in t.CustomAlerts.customAlertSummary ) { var cb = GetEl('CustomAlerts_checkbox_' + id ); if(cb.checked ) { newList.push(id); } } if(! newList.length ) { newList.push(' '); } t.UserExtensions.Write('show_custom_alert_matches_sidebar', newList.join() ); t.CustomAlerts.poll(); setTimeout(function() { CustomAlerts_SideMenu.Render(); }, 1000 );};CustomAlerts_SideMenu.ModelItem = function(hData, iteration ){ var hUser = g_hUsers[ hData.user_id ]; if(! hUser || typeof hUser['username'] === 'undefined' ) { return ''; } var nUserId = hUser.user_id; var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sIcon = "<i"+"mg sr"+"c=" + AvatarUrl(nUserId,30) + " class=cpo_listeners data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\" >";
 var sImg = "<div draggable=\"true\" ondragstart=\"t.nDragUserId=" + nUserId + ";\" class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(nUserId,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + " /></div></div>"; var sHtml = " <div class=\"model_cell_small mcs_popular\"> <div class=\"mcs_avatar\" draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; \">" + sIcon + "</div> <div onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup); \" > <div class=\"mcs_handle\"> " + t.A('player',{broadcaster_id:nUserId}) + "<span class='user_style username' style=\"" + sUserFont + "\" >" + hUser['username'] + "</a> </div> <div class=\"mcs_info\"> " + ( ( g_hUsers[ nUserId ]['state'] >= 90 ) ? '<span>Offline</span> ' : "<a href=\"javascript:popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\">Menu</a> " ) + " " + A('pm_friend',{ user_id: nUserId, load_video:true, title:("Open a new Private Message window.")}) + "PM</a> [<a class=\"fwb\" href=\"javascript:t.ModelHistory.RemoveModel(" + nUserId + ");\" title=\"Delete this entry\">&times;</a>] </div> " + sImg + " </div> </div> "; return sHtml;};var TrendingRooms = { paging: {}, nModelsPerPage: 10, nModelHeight: 42, nLookback: 60, nRefresh: 30, trending_room_lookback: 60, trending_room_sortby: 60, sSelector: 'menu_extras_4', bIsDisplayed: false};TrendingRooms.Initialize = function(){ TrendingRooms.paging = new MfcPaging(" TrendingRooms.Render(); ", TrendingRooms.nModelsPerPage, { prefix_pattern: "Pages: ", numeric_link_count: 5, compact: 1 } ); TrendingRooms.mfcTrendingRooms = new MfcTrendingRooms(); TrendingRooms.GetData();
};TrendingRooms.GetData = function(){ if(TrendingRooms.nRefresh == 0 ) { return; } if(! TrendingRooms.bIsDisplayed || ! GetEl(TrendingRooms.sSelector)) { return; } TrendingRooms.mfcTrendingRooms.getCounts({ callback: TrendingRooms.MfcTrendingRooms_getCounts_Callback, lookback: TrendingRooms.trending_room_lookback });};TrendingRooms.MfcTrendingRooms_getCounts_Callback = function(oRes ){ TrendingRooms.mfcTrendingRooms_order = oRes.order; TrendingRooms.mfcTrendingRooms_data = oRes.data; TrendingRooms.Render(); clearTimeout(TrendingRooms.nRenderTimer ); TrendingRooms.nRenderTimer = setTimeout(TrendingRooms.GetData, TrendingRooms.nRefresh * 1000 );};TrendingRooms.Render = function(){ if(TrendingRooms.sSelector == 'menu_extras_4' && ExtraMenuSelector.sSelectedFeature != 'trending_rooms' ) { return false; } var trending_rooms_height = ExtraMenuSelector.sSelectedFeature != 'trending_rooms' ? g_hSelf.trending_rooms_height : -1; if(trending_rooms_height > 0 ) TrendingRooms.nModelsPerPage = Math.floor(trending_rooms_height / TrendingRooms.nModelHeight ); var aRank = []; for(var nUserId in TrendingRooms.mfcTrendingRooms_data ) { var hData = TrendingRooms.mfcTrendingRooms_data[ nUserId ]; if(! hData || ! t.g_hUsers[ nUserId ] || t.g_hUsers[ nUserId ].platform_id != t.g_hPlatform.id || ! hData.prev ) { continue; } var nChange; if(TrendingRooms.trending_room_sortby == 300 ) nChange = hData.curr - hData.fiveago; else nChange = hData.curr - hData.prev ; aRank.push(MfcStringUtilities.char_padding(nChange,10,0) + ":" + nUserId ); }
 aRank.sort(); aRank.reverse(); var nLow = ( TrendingRooms.paging.nPage - 1 ) * TrendingRooms.nModelsPerPage; var nHigh = TrendingRooms.nModelsPerPage; if ( nHigh > aRank.length ) { nHigh = aRank.length; } var nRank = 0; var aNewSort=[]; for(nRank=nLow; nRank < nHigh; nRank++ ) { var nUserId = parseInt(aRank[nRank].split(':')[1] ); aNewSort.push(nUserId ); } if(TrendingRooms.trending_room_sortby == -1 ) { aRank=[]; for(nRank=nLow; nRank < aNewSort.length; nRank++ ) { var nUserId = aNewSort[nRank]; var hData = TrendingRooms.mfcTrendingRooms_data[ nUserId ]; aRank.push(MfcStringUtilities.char_padding(hData.curr,10,0) + ":" + nUserId ); } aRank.sort(); aRank.reverse(); aNewSort=[]; for(nRank=nLow; nRank < aRank.length; nRank++ ) { var nUserId = aRank[nRank].split(':')[1]; aNewSort[ nRank ] = nUserId; } } var aRooms=[]; for(nRank=nLow; nRank < aNewSort.length; nRank++ ) { var nUserId = aNewSort[nRank]; aRooms.push(TrendingRooms.ModelItem(nUserId, nRank ) ); } var sDescription = "Top " + TrendingRooms.nModelsPerPage + " " + t.A('trending_rooms') + "Trending Rooms</a>"; SetHTML(TrendingRooms.sSelector," <div class=\"simenu\"> <div class=\"simenu_desc\">" + sDescription + "</div> <div class=\"simenu_content\" id=\"trending_rooms_scroll\" style=\"height:" + ( trending_rooms_height > 0 ? ( trending_rooms_height + 'px' ) : 'auto' ) + ";\">\
 " + aRooms.join('') + " </div> <div class=\"simenu_foot\" data-refresh_options> </div> </div> "); TrendingRooms.LoadRefreshOptions();};TrendingRooms.LoadRefreshOptions = function(nSec ){ oEl = GetEl(TrendingRooms.sSelector); var sRefresh=''; var aRefreshOpts = { ' 30': '30s', ' 60': '60s', ' 120': '2m', ' 0': 'Pause' }; for(var nSec in aRefreshOpts ) { if(TrendingRooms.nRefresh == parseInt(nSec) ) sRefresh += "<b>" + aRefreshOpts[nSec] + "</b> "; else sRefresh += "<a href='javascript:' data-refresh" + parseInt(nSec) + ">" + aRefreshOpts[nSec] + "</a> "; } oRefreshOptions = FindDataTag(oEl,'div','data-refresh_options'); oRefreshOptions.innerHTML = "<a data-refresh href='javascript:'>Refresh</a>: " + sRefresh ; oRefreshLink = FindDataTag(oRefreshOptions,'a','data-refresh'); oRefreshLink.onclick = TrendingRooms.GetData; for(var nSec in aRefreshOpts ) { oRefreshLink = FindDataTag(oEl,'a','data-refresh' + parseInt(nSec) ); if(oRefreshLink ) { oRefreshLink.onclick =  parseInt(nSec ) ); } }};TrendingRooms.ChangeRefresh = function(nSec ){ TrendingRooms.nRefresh = nSec; TrendingRooms.LoadRefreshOptions(); clearTimeout(TrendingRooms.nRenderTimer ); if(TrendingRooms.nRefresh > 0 )
 { clearTimeout(TrendingRooms.nRenderTimer ); TrendingRooms.nRenderTimer = setTimeout(TrendingRooms.GetData, TrendingRooms.nRefresh * 1000 ); }};TrendingRooms.ModelItem = function(nUserId, nRank ){ var hUser = t.g_hUsers[nUserId]; var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sImg = "<div draggable=\"true\" ondragstart=\"t.nDragUserId=" + nUserId + ";\" class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(nUserId,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + "/></div></div>"; var sIcon = "<i"+"mg sr"+"c=" + AvatarUrl(nUserId,30) + " class=cpo_listeners data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\">"; var sChange = TrendingRooms.mfcTrendingRooms_data[ nUserId ].diff; var sColorClass = ( sChange > 60 ) ? 'mcs_hl1' : ( sChange > 45 ) ? 'mcs_hl2' : ( sChange > 30 ) ? 'mcs_hl3' : ''; if(sChange > 0 ) { sChange = '+' + sChange; } var sHtml = " <div class=\"model_cell_small mcs_trending\"> <div class=\"mcs_avatar\" draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; \" >" + sIcon + "</div> <div onMouseDown=\"popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup); \"> <div class=\"mcs_info\"> " + t.A('player',{broadcaster_id:nUserId}) + "<span class=\"mcs_handle user_style username\" style=\"" + sUserFont + "\" >" + hUser['username'] + "</span> <span class=\"mcs_trank " + sColorClass + "\" onClick=\"TopLoadPlayer({broadcaster_id:" + nUserId + "});\"> <b>" + sChange + "</b> / " + ( hUser['room_count'] || '' ) + " </span></a> </div> " + sImg + " </div> </div> "; return sHtml;};var OnlineModelSoundNotification = { oRequest: createRequestObject(), modelSubscriptionIds: []};OnlineModelSoundNotification.getSubscriptionIds = function(){ if ( g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { return; } var apiUrl = ( ( MfcClientRes && MfcClientRes.apiUrl ) || ( '//api-edge.' + t.g_hPlatform.domain ) ) + '/lists/status_messaging?service=sound'; OnlineModelSoundNotification.oRequest.open('GET', apiUrl); OnlineModelSoundNotification.oRequest.withCredentials = true;
 OnlineModelSoundNotification.oRequest.setRequestHeader("Content-type","application/x-www-form-urlencoded"); OnlineModelSoundNotification.oRequest.onreadystatechange = function() { if (OnlineModelSoundNotification.oRequest.readyState != 4) return; var respJSON = ParseJSON(OnlineModelSoundNotification.oRequest.responseText) || []; OnlineModelSoundNotification.modelSubscriptionIds = []; if (respJSON && respJSON.data) { for(var i=0; i<respJSON.data.length; i++) { var notifObj = respJSON.data[i]; if (notifObj && notifObj.model_id) { OnlineModelSoundNotification.modelSubscriptionIds[notifObj.model_id] = 1; } } } }; OnlineModelSoundNotification.oRequest.send();};OnlineModelSoundNotification.qualifySound = function(model){ if(g_hSelf.disable_model_sound_notification ) return false; if(model && OnlineModelSoundNotification.modelSubscriptionIds[model['user_id']] && OnlineModelSoundNotification.modelSubscriptionIds[model['user_id']] > 0 ) { return true; } else if(model.friend && model.bookmarked && model.bookmarked && OnlineModelSoundNotification.modelSubscriptionIds[ -3 ] ) { return true; } else if(model.friend && OnlineModelSoundNotification.modelSubscriptionIds[ -1 ] ) { return true; } else if(model.bookmarked && OnlineModelSoundNotification.modelSubscriptionIds[ -2 ] ) {
 return true; }};OnlineModelSoundNotification.playSound = function(model){ NotificationHistory("<span class=\"top_notification logged_in\"><a href=\"javascript:popUserMenu.open(" + model.user_id + ",g_oDhtmlPopup); \">" + model.username + "</a> has logged in.</span>",null,'sound_email_notification_model_login'); Sound('sound_email_notification_model_login'); OnlineModelSoundNotification.modelSubscriptionIds[model['user_id']] = 0;};var TagsTopics = { nVisibleHeight: 200, aClickHistory: [], oRequest: createRequestObject(), sSelector: 'menu_extras_4', hContents: { tags:'', topics:'' }, nVisibleHeight: 200, nShowMoreHeight: 500, sMode: 'tags'};TagsTopics.Initialize = function(){ if(! TagsTopics.hContents[ TagsTopics.sMode ] ) { TagsTopics.Get(); return; } else { TagsTopics.Render(); }};TagsTopics.ChangeMode = TagsTopics.Get = function(){ var apiUrl = ( ( MfcClientRes && MfcClientRes.apiUrl ) || ( '//api-edge.' + t.g_hPlatform.domain ) ); apiUrl += ( TagsTopics.sMode == 'tags' ) ? '/tags/models' : '/topics'; apiUrl += '?limit=1500&sort=count'; TagsTopics.oRequest.open('GET', apiUrl); TagsTopics.oRequest.withCredentials = true; TagsTopics.oRequest.setRequestHeader("Content-type","application/x-www-form-urlencoded"); TagsTopics.oRequest.onreadystatechange = function() { if (TagsTopics.oRequest.readyState != 4) { return; }
 var respJSON = ParseJSON(TagsTopics.oRequest.responseText) || []; var resRes = ( TagsTopics.sMode == 'topics' ) ? 'topic_words' : TagsTopics.sMode; if(respJSON && respJSON.result[ resRes ] ) { TagsTopics.hContents[ TagsTopics.sMode ] = respJSON.result[ resRes ]; TagsTopics.Render(); } }; TagsTopics.oRequest.send();};TagsTopics.Render = function(){ var hModes = { 'tags': 'Tags', 'topics': 'Topic Words' }; var hModeLinks = {}; for(var sK in hModes ) { if(sK == TagsTopics.sMode ) hModeLinks[sK] = "<span class=\"highlight_bg\">" + hModes[sK]+ "</span>"; else hModeLinks[sK] = "<a href=\"javascript:TagsTopics.ChangeMode('" + sK + "');\">" + hModes[sK]+ "</a>"; } if(ExtraMenuSelector.sSelectedFeature != 'tags_topics' && g_hSelf.tags_topics_height > 0 ) { TagsTopics.nVisibleHeight = g_hSelf.tags_topics_height; } var aTags = TagsTopics.hContents[ TagsTopics.sMode ]; var mode_count = ( TagsTopics.sMode == 'topics' ) ? 'word_count' : 'tag_count'; var max_count=0; for(var n=0; n < aTags.length; n++ ) { if(max_count < aTags[n][mode_count] ) { max_count = aTags[n][mode_count]; } } var aHtml=['','']; for(var n=0; n < aTags.length; n++ ) { var hTag = aTags[n]; var sVal = ( TagsTopics.sMode == 'topics' ) ? 'trimmed_word' : 'trimmed_tag'; if(! hTag[sVal] || typeof(hTag[sVal] ) != 'string' ) { continue; } var clicked = TagsTopics.aClickHistory.indexOf(hTag[sVal]) > -1; var font_size = Math.round(10 + (( hTag[mode_count] / max_count ) * 3 )); aHtml[ clicked ? 0 : 1 ] += "<a href=\"#\" onClick=\"TagsTopics.Click(this,'" + hTag[sVal] + "');\" class=\"side_menu_cloud_word " + ( clicked ? " highlight_bg" : "" ) + "\" style=\"font-size:" + font_size + "px;\">" + hTag[sVal] + "</a> "; } SetHTML(TagsTopics.sSelector,"\
 <div class=\"simenu_desc emphasized_bg tac\" style=\"padding:2px 0;border-radius:4px;\"> " + hModeLinks.tags + " | " + hModeLinks.topics + " </div> <div class=\"simenu_content simenu_tags\" id=\"tags_topics_scroll\" style=\"height:" + TagsTopics.nVisibleHeight + "px;\"> <div id=\"TagsTopics_inner\"> " + aHtml[0] + " " + aHtml[1] + " </div> </div> ");};TagsTopics.Click = function(oEl, sString ){ if(oEl ) { oEl.classList.add('highlight_bg'); } TagsTopics.aClickHistory.push(sString); var bFallbackToPopup = false; if(window.player && player.ModelMenuBar && player.ModelMenuBar.Search ) { if(window.player && player.IframeContent.resource != 'models' ) { bFallbackToPopup = true; } else if(window.player && player.g_sPlayerMode == 'player' && t.g_hSelf['hide_online_models'] ) { bFallbackToPopup = true; } else { player.ModelMenuBar.Search.sQuery = sString; player.ModelMenuBar.Search.Execute('execute',sString,{ scroll_to: TagsTopics.sMode }); if(TagsTopics.sMode == 'tags' ) { player.TagsHandlers.scroll_to_on_load = true; } } } if(bFallbackToPopup && typeof(g_hResources['model_tags']) == 'object' ) { A('model_tags',{ word_source: TagsTopics.sMode, selected_field: sString, do_click: true }); }
};var PopularRooms = { paging: null, nModelsPerPage: 10, nModelHeight: 42, nPage: 1, nRenderTimer: 0, sSelector: 'menu_extras_4', bIsDisplayed: false};PopularRooms.Initialize = function(){ if(g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { PopularRooms.nModelsPerPage = 25; } PopularRooms.paging = new MfcPaging(" PopularRooms.Render(); ", PopularRooms.nModelsPerPage, { prefix_pattern: "Pages: ", numeric_link_count: 5, compact: 1 } ); PopularRooms.nRenderTimer = setTimeout(PopularRooms.Render, 500 ); return false;};PopularRooms.Render = function(){ if(PopularRooms.sSelector == 'menu_extras_4' && ExtraMenuSelector.sSelectedFeature != 'popular_rooms' ) { return false; } var popular_rooms_height = ExtraMenuSelector.sSelectedFeature != 'popular_rooms' ? g_hSelf.popular_rooms_height : -1; if(popular_rooms_height > 0 ) PopularRooms.nModelsPerPage = Math.floor(popular_rooms_height / PopularRooms.nModelHeight ); if(! PopularRooms.bIsDisplayed || ! GetEl(PopularRooms.sSelector) ) { return; } clearTimeout(PopularRooms.nRenderTimer ); PopularRooms.nRenderTimer = setTimeout(PopularRooms.Render, 30000 ); if(GetEl(PopularRooms.sSelector) && (
 RoomData.bDone == false || ( FetchRemoteObject.aRequestedObjects.indexOf(FCS.FCTYPE_MANAGELIST+':'+FCS.FCL_CAMS) > -1 && FetchRemoteObject.aReceivedObjects.indexOf(FCS.FCTYPE_MANAGELIST+':'+FCS.FCL_CAMS) == -1 ) || ( FetchRemoteObject.aRequestedObjects.indexOf(FCS.FCTYPE_ROOMDATA+':'+FCS.FCL_NULL) > -1 && FetchRemoteObject.aReceivedObjects.indexOf(FCS.FCTYPE_ROOMDATA+':'+FCS.FCL_NULL) == -1 ) ) ) { if(g_nBroadcasterCount == 0 ) { SetHTML(PopularRooms.sSelector,""); } return; } var aHtml = new Array(); var aRank = new Array(); for(var nUserId in t.g_hUsers ) { if(g_hUsers[nUserId].access_level != FCS.FCLEVEL_MODEL || t.g_hUsers[ nUserId ].platform_id != t.g_hPlatform.id || g_hUsers[nUserId].hidden || ! IsBroadcastState(g_hUsers[nUserId].state ) ) { continue; } if(! t.g_hUsers[nUserId].room_count ) { t.g_hUsers[nUserId]['room_count'] = 0; } aRank.push(MfcStringUtilities.char_padding(t.g_hUsers[nUserId]['room_count'],10,0) + ":" + nUserId ); } aRank.sort(); aRank.reverse(); var sPaging = PopularRooms.paging.GetHTML(50 ); var nLow = ( PopularRooms.paging.nPage - 1 ) * PopularRooms.nModelsPerPage; var nHigh = ( ( PopularRooms.paging.nPage ) * PopularRooms.nModelsPerPage ) - 1; var nRank = 0; for(var nRank=nLow; nRank <= nHigh; nRank++ ) { if(! aRank[ nRank ] || typeof(aRank[nRank] ) != 'string' ) { break; } aPair = aRank[nRank].split(':'); aHtml.push(PopularRooms.ModelItem(aPair[1], nRank ) ); }
 var sDescription; if(PopularRooms.paging.nPage == 1 ) { sDescription = "Top " + PopularRooms.nModelsPerPage + " " + A('top_rooms') + "Popular Rooms</a>"; } else { sDescription = A('top_rooms') + "Popular Rooms</a> " + ( ( ( PopularRooms.paging.nPage - 1 ) * PopularRooms.nModelsPerPage ) + 1 ) + " - " + ( PopularRooms.paging.nPage * PopularRooms.nModelsPerPage ) + " "; } SetHTML(PopularRooms.sSelector," <div class=\"simenu_content simenu_popular\"> <div class=\"simenu_desc\">" + sDescription + "</div> <div id=popular_rooms_scroll style=\"height:" + ( popular_rooms_height > 0 ? ( popular_rooms_height + 'px' ) : 'auto' ) + ";\"> " + aHtml.join('') + " </div> <div class=\"simenu_foot\">" + sPaging + "</div> </div> ");};PopularRooms.ModelItem = function(nUserId, nRank ){ var hUser = t.g_hUsers[nUserId]; var nColorClass = ( hUser['room_count'] > 1000 ) ? 'mcs_hl1 fwb' : ( hUser['room_count'] > 500 ) ? 'mcs_hl2' : ( hUser['room_count'] > 300 ) ? 'mcs_hl3' : ''; if(hUser['room_count'] > 1000 ) sFontWeight = 'bold'; var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sIcon = "<i"+"mg sr"+"c=" + AvatarUrl(nUserId,30) + " class=cpo_listeners data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\">"; var sImg = "<div draggable=\"true\" ondragstart=\"t.nDragUserId=" + nUserId + ";\" class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(nUserId,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + " /></div></div>"; var sHtml = " <div class=\"model_cell_small mcs_popular\"> <div class=\"mcs_avatar\" >" + sIcon + "</div> <div onClick=\" if(event.button==2 ) { popUserMenu.open("+nUserId+",g_oDhtmlPopup); } else { TopLoadPlayer({ broadcaster_id:" + nUserId + "}); } \" draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; \" style=\"cursor:pointer;\"> <div class=\"mcs_handle\"><span class='user_style username' style=\"" + sUserFont + "\" >" + hUser['username'] + "</span></a></div> <div class=\"mcs_info\"> <span class=\"" + ( ( !/Lounge/i.test(hUser['username']) ) ? nColorClass : '' ) + "\">" + ( hUser['room_count'] >= 1 ? ( hUser['room_count'] + " people" ) : '---' ) + "</span> </div> " + sImg + " </div> </div> "; return sHtml;};
events.onRx(FCS.FCTYPE_BOOKMARKS,);var Bookmarks = {};Bookmarks.Reset = function() { Bookmarks.hBookmarkedUsers = {}; Bookmarks.bPresentationDelay = true; Bookmarks.bBookmarksLoaded = false;};Bookmarks.Reset();events.onRx(FCS.FCTYPE_SESSIONSTATE,function(fcMsg){ var nUserId = fcMsg.arg2; var hUser = g_hUsers[ nUserId ]; if(hUser && hUser.bookmarked && ! hUser.friend && hUser.state != hUser.previous_state ) { var el; if(document.getElementsByClassName('bookmarks_list_entry').length ) { Bookmarks.UpdateEntry(g_hUsers[ nUserId ] ); } else { Bookmarks.Render({ priority: 'low' }); } }});Bookmarks.Initialize = Bookmarks.FcHandler = function(fcMsg ){ if(fcMsg.obj ) { if(!!fcMsg.obj.bookmarks ) { for(var a=0; a<fcMsg.obj.bookmarks.length; a++ ) { Bookmarks.hBookmarkedUsers[ fcMsg.obj.bookmarks[a].uid ] = true; if(! g_hUsers[ fcMsg.obj.bookmarks[a].uid ] ) { StoreUserHash(fcMsg.obj.bookmarks[a], { update_collection: 1 } ); } g_hUsers[ fcMsg.obj.bookmarks[a].uid ].bookmarked = 1; } Bookmarks.bBookmarksLoaded = true;
 } else if ( fcMsg.obj.op == 'add' && !!fcMsg.obj.uid ) { if(g_hUsers[ fcMsg.obj.uid ] ) { if(g_hUsers[ fcMsg.obj.uid ].access_level != FCS.FCLEVEL_MODEL ) { return; } g_hUsers[ fcMsg.obj.uid ].bookmarked=true; } Bookmarks.hBookmarkedUsers[ fcMsg.obj.uid ] = true; } else if ( fcMsg.obj.op == 'del' && !!fcMsg.obj.uid ) { if(g_hUsers[ fcMsg.obj.uid ] ) { delete g_hUsers[ fcMsg.obj.uid ].bookmarked; } delete Bookmarks.hBookmarkedUsers[ fcMsg.obj.uid ]; } Update_popUserMenu(fcMsg.obj.uid ); } FriendsList.Load(); Bookmarks.Render({ force: true, bookmark:'del' }); setTimeout( 10000 ); };Bookmarks.Add = function(nUserId ){ TxCmd(FCS.FCTYPE_BOOKMARKS, g_nSessionId, 0, 0, 0, JSON.stringify({"op":"add","uid": parseInt(nUserId ) } ) ); };Bookmarks.Delete = function(nUserId ){ TxCmd(FCS.FCTYPE_BOOKMARKS, g_nSessionId, 0, 0, 0, JSON.stringify({"op":"del","uid": parseInt(nUserId ) } ) ); if(g_hUsers[ nUserId ] ) { delete g_hUsers[ nUserId ].bookmarked; } delete Bookmarks.hBookmarkedUsers[ nUserId ]; Bookmarks.Render(); Update_popUserMenu(nUserId ); FriendsList.Load({ force: true });};Bookmarks.UpdateEntry = function(hUser ){ var nUserId = hUser.user_id; var el; if(el = GetEl('online_bookmark_' + nUserId ) ) if(! el ) { console.log('no bookmark list entry for ' + hUser.username ); return; } if(hUser.state >= FCS.FCVIDEO_RX_IDLE ) { if(el && typeof(el.parentNode ) == 'object' ) {
 el.classList.add('remove_friend'); Bookmarks.RemoveBookmarkTimeout = setTimeout(function(){ if(el && el.parentNode ) { el.parentNode.removeChild(el); } },4000); } return; } var sH = FriendsList.BuildEntry(nUserId,{ mode: 'bookmark', special_class: 'insert_friend' }); if(el = GetEl('online_bookmark_' + nUserId ) ) { el.innerHTML = sH; } else { var container = GetEl('bookmarks_list'); var el = document.createElement('div'); el.innerHTML = sH; el = el.firstChild; while(el != null && el.nodeType == 3 ) { //sometimes there is a textnode
 el = el.nextSibling; } var els = container.getElementsByClassName('bookmarks_list_entry'); var inserted = false; for(var a=0; a<els.length; a++ ) { var lcun = els[a].getAttribute('data-lcun'); var res = lcun.localeCompare(hUser.username.toLowerCase() ); if(res == 1 ) { container.insertBefore(el,els[a]); inserted = true; break; } } if(! inserted ) { container.appendChild(el ); } setTimeout(function(){el.classList.remove('insert_friend');},10000); }};Bookmarks.Render = function(hOptions ){ hOptions = hOptions || {};
 if(FnRateLimit('Bookmarks.Render',2500,{ debug:0 }) ) { return; } if(! GetEl("bookmarks_list_wrapper") ) { return; } var aTmp = new Array(); var aList = SortedUserKeys('username'); var nCount = 0; var nBookFriends = 0; var aBookmarkHtml = []; for(var nK=0; nK < aList.length; nK++ ) { var nUserId = aList[nK]; var hUser; if(! ( hUser = g_hUsers[ nUserId ] ) ) { continue; } if(! hUser.bookmarked || hUser.state > FCS.FCVIDEO_RX_IDLE || typeof(hUser.state) == 'undefined' ) { continue; } if(hUser.bookmarked && hUser.friend ) { nBookFriends++; continue; } var sImg=''; if(hUser.state < 90 ) sImg = "<img height=27 width=48 class=tiny_livesnap_border src=\"" + t.LiveSnapUrl(nUserId,100) + "\" style=\"cursor:pointer;\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + ">"; var sIcon = "<i"+"mg height=20 width=20 sr"+"c=" + AvatarUrl(nUserId,30) + " style=\"border-radius:3px;border:1px solid #bbbbbb;\">"; aBookmarkHtml.push(FriendsList.BuildEntry(nUserId,{ mode: 'bookmark' }) ); nCount++; } if(aBookmarkHtml.length ) { aTmp.push(aBookmarkHtml.join('') ); } else { var sMsg = "No bookmarks online. "; if(nBookFriends > 1 ) { sMsg += "<br>" + nBookFriends + " Bookmarked Friends are online."; } else if(nBookFriends == 1 ) { sMsg += "<br>One Bookmarked Friend is online."; } aTmp.push(" <div class=\"no_models\" ondragover=\" event.preventDefault();\
 if(! Bookmarks.drag && t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg');\" > " + sMsg + " <br> " + ( g_UA.draggable ? "<br>(You may drag " + t.g_hPlatform.performer + "s into this window.)" : '' ) + "</div>" ); } var oEl = GetEl('bookmarks_list'); if(oEl ) { SetHTML(oEl, aTmp.join('') ); } else { var sH = " <div class=\"posr\"> <img class=\"simenu_toggle_preview\" src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/png/person_profile_gray.png\" id=bookmarks_list_view_mode_icon onClick=\"Bookmarks.ToggleViewMode();\" title=\"Toggle cam previews on or off.\"> </div> <div id=\"bookmarks_list_scroll\" class=\"simenu_content simenu_bookmarks_list\" > <div class='chat_friends bookmarks' id=\"bookmarks_list\" ondragover=\" event.preventDefault(); if(! Bookmarks.drag && t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg');\" > " + aTmp.join('') + " </div> </div> "; sH += " <div class=\"simenu_foot\"> " + A('manage_lists',{'anchor':'bookmarks'}) + "Manage Bookmarks</a> <div  ondrop=\" event.preventDefault(); this.classList.remove('highlight_bg'); if(t.nDragUserId ) { Bookmarks.Delete(t.nDragUserId ); t.nDragUserId=0; } \" class=\"simenu_trashdrop\" ondragover=\" event.preventDefault(); this.firstChild.style.opacity=1; this.classList.add('highlight_bg');\" ondragleave=\" this.firstChild.style.opacity=0.5; this.classList.remove('highlight_bg'); \" title=\"Drag Bookmarks here to remove them from your Bookmarks List.\" onClick=\" DhtmlPrompt({ prompt_type: 'alert', message: 'Drag Bookmarks here to remove them from your Bookmarks List.' }); \" ><img class=\"simenu_trash\" src='" + t.g_hPlatform.image_url_cdn + "files/images/svg/trash.svg'></div> "; sH += " </div> "; SetHTML('bookmarks_list_wrapper', sH ); } var oEl = GetEl('bookmarks_count');
 if(oEl ) { oEl.innerHTML = nCount ? '<span title=\"Bookmarks Online\">' + nCount + '</span>' : ''; } FriendsList.RefreshChatIcons(); var oEl = GetEl('bookmarks_list_view_mode_icon'); if(oEl ) { oEl.src = t.g_hPlatform.image_url_cdn + 'files/images/icons/png/' + ( g_hSelf.bookmarks_list_view_mode == 'previews' ? 'person_profile_gray_x.png' : 'person_profile_gray.png' ); };};Bookmarks.ToggleViewMode = function(sMode ){ if(! sMode ) { sMode = g_hSelf.bookmarks_list_view_mode == 'previews' ? 'slim' : 'previews'; } UserExtensions.Write('bookmarks_list_view_mode', sMode ); Bookmarks.Render({ force: true });};var StatusMessaging = { bServiceWorkerFound: null, oSubscription: null, bSubscriptionFound: null, bConfigFound: null, webPushSubscriptions: {}, oReq: createRequestObject(), oSubscriptionsReq: createRequestObject(), hConfig: {}, hServices: { sound: "Play a Sound", email: "E-Mail Me", push: "Browser Notification" }};StatusMessaging.Initialize = function(){ StatusMessaging.webPushSubscriptions = new WebPushSubscriptions({ client: 'www', containerEl: document.getElementById('webpush_notifications_container') }); StatusMessaging.getConfig();};StatusMessaging.findServiceWorkers = function(){ StatusMessaging.bServiceWorkerFound = null; try { navigator.serviceWorker.ready.then().then(function(sub) { if ( sub ) { StatusMessaging.oSubscription = sub; StatusMessaging.bServiceWorkerFound = true; StatusMessaging.getSubscriptions();
 } else { StatusMessaging.bServiceWorkerFound = false; StatusMessaging.bSubscriptionFound = false; } }); } catch(e) { console.log(e); StatusMessaging.bServiceWorkerFound = false; StatusMessaging.bSubscriptionFound = false; };};StatusMessaging.getSubscriptions = function(){ StatusMessaging.bSubscriptionFound = null; var apiUrl = ( ( MfcClientRes && MfcClientRes.apiUrl ) || ( '//api-edge.' + t.g_hPlatform.domain ) ) + '/webpush/subscription?client=www'; StatusMessaging.oSubscriptionsReq.open('get',apiUrl); StatusMessaging.oSubscriptionsReq.withCredentials = true; StatusMessaging.oSubscriptionsReq.onreadystatechange = function() { if ( StatusMessaging.oSubscriptionsReq.readyState !== 4 ) { return; } var hRes = ParseJSON(StatusMessaging.oSubscriptionsReq.responseText ); StatusMessaging.bSubscriptionFound = false; if(typeof(hRes)=='object' && typeof(hRes.result)=='object' && hRes.result != null ) { for(var a=0; a < hRes.result.length; a++ ) { if(StatusMessaging.oSubscription && hRes.result[a].subscription && hRes.result[a].subscription.endpoint == StatusMessaging.oSubscription.endpoint ) { StatusMessaging.bSubscriptionFound = true; break; } } } }; StatusMessaging.oSubscriptionsReq.send();};StatusMessaging.getConfig = function(){ var apiUrl = ( ( MfcClientRes && MfcClientRes.apiUrl ) || ( '//api-edge.' + t.g_hPlatform.domain ) ) + '/lists/status_messaging'; StatusMessaging.oReq.open('get', apiUrl ); StatusMessaging.oReq.withCredentials = true; StatusMessaging.oReq.onreadystatechange = function() { if ( StatusMessaging.oReq.readyState !== 4 ) { return; }
 var hRes = ParseJSON(StatusMessaging.oReq.responseText ); if(typeof(hRes ) == 'object' && hRes.data ) { StatusMessaging.bConfigFound = true; for(var nUserId in StatusMessaging.hConfig.records ) delete StatusMessaging.hConfig.records[ nUserId ].services; StatusMessaging.hConfig.records = StatusMessaging.hConfig.records || {}; for(var a=0; a < hRes.data.length; a++ ) { StatusMessaging.hConfig.records[ hRes.data[a]['model_id'] ] = StatusMessaging.hConfig.records[ hRes.data[a]['model_id'] ] || {}; StatusMessaging.hConfig.records[ hRes.data[a]['model_id'] ].services = StatusMessaging.hConfig.records[ hRes.data[a]['model_id'] ].services || []; StatusMessaging.hConfig.records[ hRes.data[a]['model_id'] ].services.push(hRes.data[a]['service'] ); } } events.emit("StatusMessaging.getConfig_callback"); }; StatusMessaging.oReq.send();};StatusMessaging.toggleSetting = function(hOptions ){ var hOptions = hOptions || {}; var bRemove = ! hOptions.active; var sUrl = "/php/account.php?ajax_mode=1&submit_messenger=1&token=" + g_hSelf.token; if(StatusMessaging.hConfig.records && StatusMessaging.hConfig.records[ hOptions.user_id ] && StatusMessaging.hConfig.records[ hOptions.user_id ].model_id ) { sUrl += "&service=" + hOptions.service + "&messenger_" + ( bRemove ? 'remove' : 'add' ) + "=" + hOptions.user_id; } else { sUrl += "&multiadd=1" + "&messenger_add_alt=" + hOptions.username + "&service=" + hOptions.service + "&service_" + hOptions.service + "=1" + "&messenger_" + ( bRemove ? 'remove' : 'add' ) + "=" + hOptions.user_id; } StatusMessaging.oReq.open("get", sUrl ); StatusMessaging.oReq.onreadystatechange = function(hOptions )
 { var hOptions = hOptions || {}; if ( StatusMessaging.oReq.readyState !== 4 ) { return; } var hRes = ParseJSON(StatusMessaging.oReq.responseText ); if(typeof(hRes ) != 'object' || hRes.err ) { DhtmlPrompt({ prompt_type: 'alert', message: 'We were unable to save your notification setting. Please contact support if this error persists.' }); } setTimeout(StatusMessaging.getConfig, 1000 ); }; StatusMessaging.oReq.send();};StatusMessaging.getHtml = function(hOpts ){ hOpts = hOpts || {}; if(g_hSelf.access_level == FCS.FCLEVEL_GUEST ) { StatusMessaging.getHtml_callback(hOpts ); return; } if(! StatusMessaging.bSubscriptionFound ) { StatusMessaging.findServiceWorkers(); } StatusMessaging.getConfig(); var nCounter = 0; var Wait = function() { if(nCounter > 500 ) { if(typeof(hOpts.callback) == 'function' ) { hOpts.callback("Notifications are temporarily unavailable."); } } else if(StatusMessaging.bServiceWorkerFound != null && StatusMessaging.bSubscriptionFound != null && StatusMessaging.bConfigFound != null ) { StatusMessaging.getHtml_callback(hOpts ); } else { nCounter++; setTimeout(Wait, 100 ); } }; Wait();};StatusMessaging.getHtml_callback = function(hOpts ){ hOpts = hOpts || {}; var bGuest = g_hSelf.access_level == FCS.FCLEVEL_GUEST; if(WebPushSubscriptions && ! WebPushSubscriptions.isSupported() ) { delete StatusMessaging.hServices['push']; }
 if(typeof(hOpts.user) != 'object' ) { return; } if(hOpts.dhtml_popup ) { t.StatusMessaging.popup = hOpts.dhtml_popup; } var sH = ""; if(bGuest ) { sH += A('register') + "<b>Create a Free Account</b></a> to use this feature:<br><br>"; } sH += " <br><br> Do the following when <span class='user_style username' style=\"" + MfcCustomFonts.prototype.get_style(hOpts.user ) + "\">" + hOpts.user.username + "</span> goes Online: <br><br> "; var aServices = StatusMessaging.servicesByUserId(hOpts.user.user_id ); for(var sService in StatusMessaging.hServices ) { var bChecked = aServices.indexOf(sService ) > -1; sH += "<input type=checkbox  onClick=\" t.StatusMessaging.toggleSetting({ user_id:" + hOpts.user.user_id + ",username:'" + hOpts.user.username + "', service:'" + sService + "', active: this.checked }); \" " + ( bGuest ? 'DISABLED' : '' ) + " " + ( bChecked ? 'CHECKED' : '' ) + " > " + StatusMessaging.hServices[sService]; if(! bGuest && sService == 'push' ) { if(hOpts.dhtml_popup ) { sH += "<span onClick='t.StatusMessaging.popup.close();'>"; } if(! StatusMessaging.bServiceWorkerFound ) sH += " " + A('messenger',{ username: hOpts.user.username }) + "<span style=\"background-color:" + NightMode_Top.higlight_rgb + ";\">Enable for this browser</span></a>"; else if(! StatusMessaging.bSubscriptionFound ) sH += " " + A('messenger',{ username: hOpts.user.username }) + "<span style=\"background-color:" + NightMode_Top.higlight_rgb + ";\">Turn notifications on</span></a>"; sH += "</span>"; } sH += "<br>"; } sH += "<br>"; if(! bGuest ) { if(hOpts.dhtml_popup ) { sH += "<span onClick='t.StatusMessaging.popup.close();'>"; } sH += A('messenger',{ username: hOpts.user.username }) + "Manage Notifications</a></span><br>"; } sH += "<br>"; if(typeof(hOpts.callback) == 'function' )
 hOpts.callback(sH); else return sH;};StatusMessaging.servicesByUserId = function(nUserId ){ return StatusMessaging.hConfig && StatusMessaging.hConfig.records && StatusMessaging.hConfig.records[ nUserId ] && StatusMessaging.hConfig.records[ nUserId ].services || [];};var ModelHistory = { aModelTrail: [], aModelTrail_fromCookie: [], drag: null, sSelector: 'menu_extras_4', bIsDisplayed: false};events.onRx(FCS.FCTYPE_SESSIONSTATE,function(fcMsg){ if(fcMsg.arg1 > 90 && g_hUsers[ fcMsg.arg2 ] && g_hUsers[ fcMsg.arg2 ]['access_level'] == FCS.FCLEVEL_MODEL && g_hUsers[ fcMsg.arg2 ]['model_history'] ) { ModelHistory.Render(); }});ModelHistory.Initialize = function(){ var recentlyVisitedRooms_JSON = localStorage.getItem('recentlyVisitedRooms' ); if(recentlyVisitedRooms_JSON ) { ModelHistory.aModelTrail = JSON.parse(recentlyVisitedRooms_JSON ); } ModelHistory.Render(); return false;};ModelHistory.Clear = function(){ ModelHistory.aModelTrail = new Array(); ModelHistory.Render();};ModelHistory.GetHistory = ModelHistory.Append = function(nAppendUserId ){ if(! nAppendUserId || ( nAppendUserId && g_hSelf['pause_model_history'] )
 || ( nAppendUserId && g_hUsers[nAppendUserId] && g_hUsers[nAppendUserId].access_level != FCS.FCLEVEL_MODEL ) ) { return; } var nNewModelTrail = []; for(var nK in ModelHistory.aModelTrail ) { var nUserId = ModelHistory.aModelTrail[nK]; if(g_hUsers[ nUserId ] && g_hUsers[ nUserId ].state != undefined && t.g_hUsers[ nUserId ].platform_id == t.g_hPlatform.id && nAppendUserId != nUserId ) { nNewModelTrail.push(nUserId ); g_hUsers[ nUserId ]['model_history'] = ModelHistory.aModelTrail.length - ( nK - 1 ); } } nNewModelTrail.push(nAppendUserId ); g_hUsers[ nAppendUserId ]['model_history'] = 1; ModelHistory.aModelTrail = nNewModelTrail; if(ModelHistory.aModelTrail.length > 30 ) { nRemoveUserId = ModelHistory.aModelTrail.shift(); if(g_hUsers[ nRemoveUserId ] ) delete g_hUsers[ nRemoveUserId ].model_history; } localStorage.setItem('recentlyVisitedRooms', JSON.stringify(ModelHistory.aModelTrail ) ); ModelHistory.Render();};ModelHistory.RemoveModel = function(nRemoveModelId ){ if(g_hUsers[ nRemoveModelId ] ) { delete g_hUsers[ nRemoveModelId ]['model_history']; } var aNewModelTrail=[]; for(var nK in ModelHistory.aModelTrail ) { var nTrailModelId = ModelHistory.aModelTrail[nK]; if(nTrailModelId != nRemoveModelId ) { aNewModelTrail.push(nTrailModelId ); } }
 ModelHistory.aModelTrail = aNewModelTrail; ModelHistory.Render(); for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { if(oPlayerWindow.PopupRoomHistory && oPlayerWindow.PopupRoomHistory.update ) oPlayerWindow.PopupRoomHistory.update(); } }};ModelHistory.Render = function(){ if(ModelHistory.sSelector == 'menu_extras_4' && ExtraMenuSelector.sSelectedFeature != 'model_history' ) { return false; } if(! ModelHistory.bIsDisplayed || ! GetEl(ModelHistory.sSelector) ) { return; } var sHtml = ModelHistory.GetHtml(); var aTmp = [ sHtml ]; aTmp.push(" <div class=\"simenu_foot\"> <a href=\"javascript:ModelHistory.Clear(); \">Clear</a> |  <span id=pause_model_history></span> </div> <div class=\"simenu_foot\">" + A('activity_log') + "<img class=\"simenu_hist\" src=\"" + t.g_hPlatform.image_url_cdn + '/files/images/icons/svg/open_door_history.svg' + "\" />Full Room History</a></div> "); SetHTML(ModelHistory.sSelector, aTmp.join('') ); ModelHistory.Pause_Label();};ModelHistory.GetHtml = function(hOptions ){
 hOptions = hOptions || {}; var aTmp = new Array(); if(ModelHistory.aModelTrail.length > 0 ) { var model_history_height = ExtraMenuSelector.sSelectedFeature != 'model_history' ? g_hSelf.model_history_height : -1; aTmp.push(" <div class=\"simenu_content simenu_modelhistory\" ondrop=\" event.preventDefault(); if(t.nDragUserId ) { ModelHistory.Append(t.nDragUserId); } t.nDragUserId=0; this.classList.remove('highlight_bg'); \" ondragover=\" event.preventDefault(); if(! ModelHistory.drag && t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg');\" > <div id=model_history_scroll style=\"height:" + ( model_history_height > 0 ? ( model_history_height + 'px' ) : 'auto' ) + ";\"> "); var hOneEntryPerModel = {}; var cx = 0; var limit = 0; for(var a=ModelHistory.aModelTrail.length; a > 0; a-- ) { if(limit++ == 12 ) { break; } var nUserId = parseInt(ModelHistory.aModelTrail[a-1] ); if(! g_hUsers[ nUserId ] || ! g_hUsers[ nUserId ].username || hOneEntryPerModel[ nUserId ] ) { continue; } hOneEntryPerModel[ nUserId ] = 1; var hUser = g_hUsers[nUserId]; var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sImg = "<div draggable=\"true\" ondragstart=\" t.nDragUserId=" + hUser.user_id + ";\" class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(nUserId,100) + "\" style=\"cursor:pointer;\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + " /></div></div>"; var sIcon = "<i"+"mg draggable=\"true\" ondragstart=\" t.nDragUserId=" + hUser.user_id + ";\" class=\"cpo_listeners mcs_avatar\" sr"+"c=" + AvatarUrl(hUser.user_id ,30) + " data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\" />"; aTmp.push(" <div class=\"model_cell_small mcs_modelhistory\"> " + sIcon + " <span onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup); \" > <div class=\"mcs_handle\"> " + t.A('player',{broadcaster_id:nUserId}) + "<span class='user_style username' style=\"" + sUserFont + "\">" + hUser['username'] + "</span></a> </div> <div class=\"mcs_info\"> " + ( ( g_hUsers[ nUserId ]['state'] >= 90 ) ? '<span>Offline</span> ' : "<a href=\"javascript:popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\">Menu</a> " ) + " " + A('pm_friend',{ user_id: nUserId, load_video:true, title:("Open a new Private Message window.")}) + "PM</a>\
 [<a class=\"fwb\" href=\"javascript:t.ModelHistory.RemoveModel(" + nUserId + ");\" title=\"Delete this entry\">&times;</a>] </div> " + sImg + " </span> </div> "); cx++; } aTmp.push("</div>"); } else { aTmp.push(" <div class=\"simenu_content\"> <div class=\"no_models\" ondrop=\" event.preventDefault(); if(t.nDragUserId ) { t.ModelHistory.Append(t.nDragUserId); t.nDragUserId=0; } \" ondragover=\" event.preventDefault(); if(! t.ModelHistory.drag && t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg');\" ><span class=\"mb20\">Chat rooms that you have recently visited will be displayed here.</span> " + ( g_UA.draggable ? "<span>(Or you may drag " + t.g_hPlatform.performer + "s into this window manually.)</span>" : '' ) + "</div></div>" ); } return aTmp.join('');};ModelHistory.Pause = function(){ g_hSelf['pause_model_history'] = g_hSelf['pause_model_history'] ? 0 : 1; UserExtensions.Write('pause_model_history', g_hSelf['pause_model_history'] || 0 ); ModelHistory.Pause_Label();};ModelHistory.Pause_Label = function(){ if(! GetEl('pause_model_history') ) { return; } var sHtml; if(g_hSelf['pause_model_history'] ) { sHtml = " Paused <a href=\"javascript:ModelHistory.Pause(); \" class=\"highlight_bg\">Resume</a> ";
 } else { sHtml = "<a href=\"javascript:ModelHistory.Pause(); \">Pause</a>"; } SetHTML('pause_model_history',sHtml,{ 'force': true });};var Recommend = { nSourceModelId: 0, nModelsPerPage: 15, nModelHeight: 41, hRecommendations: {}, aRecommendationOrder: {}, sSelector: 'menu_extras_4', bIsDisplayed: false};Recommend.Initialize = function(){ SetHTML(Recommend.sSelector," <div id=recommend_extra_menu class=\"recommend_extra_menu simenu_content simenu_recommend\" ondrop=\" event.preventDefault(); if(t.nDragUserId ) { Recommend.SetPrimary(t.nDragUserId ); } t.nDragUserId=0; this.classList.remove('highlight_bg'); \" ondragover=\" event.preventDefault(); if(! Recommend.drag && t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" this.classList.remove('highlight_bg'); \" > </div> "); if(! Recommend.nSourceModelId ) { if (window.GetBroadcasterId ) { Recommend.nSourceModelId = GetBroadcasterId(); } } Recommend.Request(Recommend.nSourceModelId ); Recommend.DisplayRecommendations();};Recommend.SetPrimary = function(nUserId ){ if(g_hUsers[ nUserId ] && g_hUsers[ nUserId ].access_level != FCS.FCLEVEL_MODEL ) { return; } for(var sK in g_hoPlayerWindows) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.LoadRecommendations(nUserId); }
 } UserExtensions.Write('pause_model_recommendations', 1 ); Recommend.Request(nUserId ); UserExtensions.Write('primary_recommend_model', nUserId );};Recommend.Request = function(nUserId, sMode ){ if(sMode == 'passive' ) { if(g_hSelf.pause_model_recommendations ) { return; } } if(nUserId ) { Recommend.nSourceModelId = nUserId; } else if(! nUserId && g_hSelf.primary_recommend_model ) { Recommend.nSourceModelId = g_hSelf.primary_recommend_model; } else if(! nUserId && window.GetBroadcasterId ) { Recommend.nSourceModelId = GetBroadcasterId(); }   {
 var mfcRecommend = new MfcRecommend({ callback: Recommend.Response }); if(Recommend.nSourceModelId ) mfcRecommend.getRecommendations({ 'model_id': Recommend.nSourceModelId }); else mfcRecommend.getRecommendations({ 'include_models_of_interest': 1 }); } if(Recommend.bIsDisplayed ) { clearTimeout(Recommend.nTimer ); Recommend.nTimer = setTimeout( 60000 ); }};Recommend.UserLookupCallback = function(nErrCode, nId, hUser, hContext ){ if(hUser && hUser.user_id ) Recommend.Request(hUser.user_id );};Recommend.Response = function(response ){ var hResponse; if(typeof(response ) == 'string' ) { hResponse = ParseJSON(decodeURIComponent(response ) ); } else if(typeof(response ) == 'object' && response.result ) { hResponse = response.result; } else { return; } if(hResponse ) { Recommend.hRecommendations[ Recommend.nSourceModelId ] = hResponse.rankings; Recommend.aRecommendationOrder[ Recommend.nSourceModelId ] = hResponse.order; if(hResponse.users ) { for(var nUserId in hResponse.users ) { StoreUserHash.insertUser(hResponse.users[nUserId] ); } } }
 var hRecommendations = Recommend.hRecommendations[ Recommend.nSourceModelId ]; if(Recommend.bIsDisplayed ) { Recommend.DisplayRecommendations(); } Recommend.DisplayRecommendations();};Recommend.DisplayRecommendations = function(){ var aHtml = []; var nMax=0; if(g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { Recommend.nModelsPerPage = 25; } else if(Recommend.nSourceModelId ) { Recommend.nModelsPerPage = 10; } else { Recommend.nModelsPerPage = 12; } var hRecommendations = Recommend.hRecommendations[ Recommend.nSourceModelId ] || {}; var aRecommendationOrder = Recommend.aRecommendationOrder[ Recommend.nSourceModelId ] || []; var recommend_height = ExtraMenuSelector.sSelectedFeature != 'recommend' ? g_hSelf.recommend_height : -1; if(recommend_height > 0 ) Recommend.nModelsPerPage = Math.floor(recommend_height / Recommend.nModelHeight ); for(var a=0; a<aRecommendationOrder.length; a++ ) { if(nMax == Recommend.nModelsPerPage ) { break; } nRecommendedId = aRecommendationOrder[a]; if(! g_hUsers[ nRecommendedId ] || ! IsBroadcastState(g_hUsers[ nRecommendedId ].state ) || g_hUsers[ nRecommendedId ].hidden || g_hUsers[ nRecommendedId ].friend || g_hUsers[ nRecommendedId ].bookmarked ) { continue; } aHtml.push(Recommend.ModelItem(nRecommendedId, hRecommendations[ nRecommendedId ] ) ); nMax++; } if(aHtml.length ) { if(! aHtml.length ) {
 aHtml.push(" <div class=\"no_models\"> <span class=\"mb20\">No recommended " + t.g_hPlatform.performer + "s currently online for " + g_hUsers[Recommend.nSourceModelId].username + ".</span> <span>You may drag a different " + t.g_hPlatform.performer + " into this window.</span> </div> "); } var sUserFont = MfcCustomFonts.prototype.get_style(g_hUsers[Recommend.nSourceModelId] ); var sH = "<div class=\"simenu_desc\">"; if(Recommend.nSourceModelId && g_hSelf.primary_recommend_model ) sH += "<a data-change_model href=\"#\">Change</a> or <a data-reset_link href=\"#\">Reset</a> "; else sH += "<a data-change_model href=\"#\">Choose a Model</a> "; sH += " | <a id=recommend_menu_pause class=recommend_menu_pause data-pause_link href=\"#\" style=\"display:inline-block;width:10px;\"></a> "; sH += "</div>"; if(Recommend.nSourceModelId && g_hUsers[Recommend.nSourceModelId] ) { sH += " <div class=\"rec_like\" onMouseDown=\" popUserMenu.right_click_open(event,"+Recommend.nSourceModelId+",g_oDhtmlPopup); \" > <div>If you like</div> <div><span class='user_style username' style=\"" + sUserFont + "\" onMouseDown=\" popUserMenu.open(" + Recommend.nSourceModelId + ",g_oDhtmlPopup); \" >" + g_hUsers[Recommend.nSourceModelId].username + "</span>,</div> <div>" + A('model_recommendations',{ view_single_model_id: Recommend.nSourceModelId }) + "you may like</a>:</div> <div onMouseDown=\" popUserMenu.right_click_open(event,"+Recommend.nSourceModelId+",g_oDhtmlPopup); \" > <img src=\"" + AvatarUrl(Recommend.nSourceModelId,40) + "\"  onClick=\"popUserMenu.open(" + Recommend.nSourceModelId + ",g_oDhtmlPopup);\" draggable=\"true\" ondragstart=\" t.nDragUserId="+Recommend.nSourceModelId+"; Recommend.drag=true; \" ondragend=\"Recommend.drag=false;\"> </div> </div> "; } else { sH += "<br>"; } sH += " <div id=\"recommend_scroll\" style=\"height:" + ( recommend_height > 0 ? ( recommend_height + 'px' ) : 'auto' ) + ";\"> " + aHtml.join('') + " </div> "; if(Recommend.nSourceModelId )
 { sH += " <div class=\"simenu_foot\"> " + A('model_recommendations',{ view_single_model_id: Recommend.nSourceModelId, go_to_matches: 1 }) + "More matches & details</a> </div> "; } sH += "<br>"; SetHTML('recommend_extra_menu',sH,{ 'force': true }); } else { SetHTML('recommend_extra_menu'," <div class=\"simenu_desc\"> <a data-change_model href='javascript:'>Choose a Model</a> </div> <div class=\"no_models\"> Enter a chat room or drag a " + t.g_hPlatform.performer + " into this window to see other " + A('model_recommendations',{ view_single_model_id: Recommend.nSourceModelId }) + t.g_hPlatform.performer + "s you may like</a>. </div> ",{ 'force': true }); } oEl = GetEl('recommend_extra_menu'); var reset_link = FindDataTag(oEl,'a','data-reset_link'); if(reset_link ) { reset_link.onclick = Recommend.Reset; } var pause_link = FindDataTag(oEl,'a','data-pause_link'); if(pause_link ) { pause_link.onclick = Recommend.Pause; } var change_model = FindDataTag(oEl,'a','data-change_model'); if(change_model ) { change_model.onclick = Recommend.ChangeModelSelector; } var change_model2 = FindDataTag(oEl,'a','data-change_model2'); if(change_model2 ) { change_model2.onclick = Recommend.ChangeModelSelector; } Recommend.DisplayPauseState();};Recommend.Reset = function(){ UserExtensions.Write('pause_model_recommendations', 0 ); UserExtensions.Write('primary_recommend_model', 0 ); SetCookie('recom', 0, 'Tue, 19-Jan-2038 00:00:00 GMT' ); delete g_hCk.recom; Recommend.nSourceModelId = 0; Recommend.Request();
};Recommend.Pause = function(){ UserExtensions.Write('pause_model_recommendations', g_hSelf.pause_model_recommendations ? 0 : 1 ); Recommend.DisplayPauseState();};Recommend.DisplayPauseState = function(){ var sH = "<img style=\"display:inline-block;width:10px;margin-bottom:-2px;\" " + ( g_hSelf.pause_model_recommendations ? 'src="https://assets.mfcimg.com/files/images/icons/svg/play.svg" title="Restart updating of Model List"' : 'src="https://assets.mfcimg.com/files/images/icons/svg/pause.svg" title="Pause updating of Model List"' ) + ">"; var el; ( el = GetEl('recommend_menu_pause') ) && ( el.innerHTML = sH );};Recommend.ModelItem = function(nUserId, fScore ){ var hUser = t.g_hUsers[nUserId]; if(! hUser || ! hUser.username || hUser.state != FCS.FCVIDEO_TX_IDLE ) { return ''; } if ( fScore > .12 ){ nBars = 10; } else if ( fScore > .10) { nBars = 9; } else if ( fScore > .08) { nBars = 8; } else if ( fScore > .06) { nBars = 7; } else if ( fScore > .05) { nBars = 6; } else if ( fScore > .04) { nBars = 5; } else if ( fScore > .03) { nBars = 4; } else if ( fScore > .02) { nBars = 3; } else if ( fScore > .01) { nBars = 2; } else { nBars = 1; } var nBarClass = ( nBars <= 5 ) ? 'mcs_bar_inner5' : ( nBars <=7 ) ? 'mcs_bar_inner7' : ''; var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sImg = "<div class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(nUserId,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(nUserId) + " /></div></div>"; var sIcon = "<i"+"mg sr"+"c=" + AvatarUrl(nUserId,30) + " class=cpo_listeners data-cpouid='"+nUserId+"' data-cpo_left_click=\"menu\" >";
 var sHtml = " <div class=\"model_cell_small mcs_recommend\"> <div class=\"mcs_avatar\" draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; Recommend.drag=true; \" ondragend=\"Recommend.drag=false;\"> " + sIcon + "</div> <span onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\"> <div class=\"mcs_handle\"> " + t.A('player',{broadcaster_id:nUserId}) + "<span class='user_style username' style=\"" + sUserFont + "\" >" + hUser['username'] + "</span></a> </div> <div title=\"" + ( ( nBars / 10 ) * 100 ) + "% Match\" class=\"mcs_bar_outer\"><div class=\"mcs_bar_inner " + nBarClass + " \" style=\"width:" + nBars*10 + "%;\">" + "</div></div> " + sImg + " </span> </div> "; return sHtml;};Recommend.ChangeModelSelector = function(){ var mfcRecommend = new MfcRecommend({ callback: Recommend.ChangeModelSelector_Response }); mfcRecommend.getModelConfig();};Recommend.ChangeModelSelector_Response = function(result ){ if(typeof(result ) != 'object' || result.err ) { console.log(result); return; } var aModelConfig = result.result; var sOptions=''; for(a=0; a<aModelConfig.length; a++ ) { var hModel = aModelConfig[a]; sOptions += "<option value=" + hModel.user_id + " " + ">" + hModel.username + "</option>"; } var sHtml = " <form style=\"width:250px;\" onSubmit=\"Recommend.UsernameSubmit(); return false;\"> Enter " + t.g_hPlatform.performer + " username:<br> <input type=text style=\"width:140px;\" onKeyUp=\"Recommend.UsernameLookup();\" id=recommend_username_lookup_input> <input type=submit value=Change id=recommend_username_lookup_submit disabled=true> <div id=recommend_username_lookup_status style=\"padding:4px 5px 11px 5px;\">&nbsp;</div> "; if(g_hSelf.access_level > FCS.FCLEVEL_GUEST ) { sHtml += " Or: <select style=\"width:140px;\" onChange=\" if(this.value ) { Recommend.SetPrimary(this.value); g_oDhtmlPopup2.close(); } \"> <option value='' >- choose -</option> " + sOptions + " </select> " + A('model_recommendations',{ view_single_model_id: Recommend.nSourceModelId }) + "Manage</a> "; } sHtml += " </form> ";
 g_oDhtmlPopup2.open(sHtml, { no_close_on_mouseout: true } ); GetEl('recommend_username_lookup_input').focus(); Recommend.UsernameLookup_WatchInput_sUsername=''; Recommend.UsernameLookup_WatchInput_Timer = setInterval(Recommend.UsernameLookup_WatchInput,500);};Recommend.UsernameLookup_WatchInput = function(result ){ oUsername = GetEl('recommend_username_lookup_input'); if(! oUsername ) { return; } if(! oUsername.value ) { clearTimeout(Recommend.UsernameLookup_Timer ); return; } var sUsername = oUsername.value; if(Math.abs(sUsername.length - Recommend.UsernameLookup_WatchInput_sUsername.length ) > 4 ) Recommend.UsernameLookup_Exec(); Recommend.UsernameLookup_WatchInput_sUsername = sUsername;};Recommend.UsernameLookup = function(result ){ GetEl('recommend_username_lookup_status').innerHTML='&nbsp;'; clearTimeout(Recommend.UsernameLookup_Timer ); Recommend.UsernameLookup_Timer = setTimeout(Recommend.UsernameLookup_Exec,500);};Recommend.UsernameLookup_Exec = function(){ var sUsername = GetEl('recommend_username_lookup_input').value; sUsername = sUsername.replace(/\W/g,''); if(sUsername ) { FcUsernameLookup.Query(sUsername , Recommend.UsernameLookup_Response ); }};Recommend.UsernameLookup_Response = function(nErrCode, sUsername, hUser, hContext ){ var oResposeDiv = GetEl('recommend_username_lookup_status'); var oSubmitButton = GetEl('recommend_username_lookup_submit'); if(! oResposeDiv || ! oSubmitButton || typeof(hUser ) != 'object' ) { return; } if(! hUser || ! hUser.username ) { oSubmitButton.disabled = true;
 oResposeDiv.innerHTML = "<span style='color:red;'>Username not found</span>"; } else if(hUser.access_level != FCS.FCLEVEL_MODEL ) { oSubmitButton.disabled = true; oResposeDiv.innerHTML = "<span style='color:red;'>" + hUser.username + " is not a " + t.g_hPlatform.performer + "</span>"; } else if(hUser.user_id ) { oSubmitButton.disabled = false; oResposeDiv.innerHTML = "<span style='color:green;'>Username found</span>"; Recommend.nManualLookupUserId = hUser.user_id; }};Recommend.UsernameSubmit = function(result ){ clearTimeout(Recommend.UsernameLookup_WatchInput_Timer ); var oSubmitButton = GetEl('recommend_username_lookup_submit'); if(! oSubmitButton || oSubmitButton.disabled ) { return; } Recommend.SetPrimary(Recommend.nManualLookupUserId ); g_oDhtmlPopup2.close();};var ExtraMenuSelector = { hFeatures: { recommend: { name: 'Models You May Like', obj: Recommend, init: Recommend.Initialize, icon: t.g_hPlatform.image_url_cdn + 'files/images/icons/png/model_recommendations.48x48.png', icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/group-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/icons/png/model_recommendations.48x48.png' ) }, tags_topics: { name: 'Tags & Topics', obj: TagsTopics, init: TagsTopics.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/tag-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/icons/tag_model.48x48.png' ) }, popular_rooms: { name: 'Most Popular Rooms',
 obj: PopularRooms, init: PopularRooms.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/group-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/icons/png/top_rooms.48x48.png' ) }, trending_rooms: { name: 'Trending Rooms', obj: TrendingRooms, init: TrendingRooms.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/activity-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/svg/trend_light.svg' ) }, model_history: { name: 'Recently Visited', obj: ModelHistory, init: ModelHistory.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/history-1.svg' : t.g_hPlatform.image_url_cdn + 'files/ico/undo.48x48.png' ) }, custom_alerts: { name: 'Custom Selections', obj: CustomAlerts_SideMenu, init: CustomAlerts_SideMenu.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/group-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/svg/check_box.svg' ) }, miss_mfc: { name: ( 'Miss ' + g_hPlatform.name ), obj: MissMFC, init: MissMFC.Initialize, icon: ( g_hPlatform.id == PLAT_CAM ? t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/group-1.svg' : t.g_hPlatform.image_url_cdn + 'files/images/icons/crown.16x16.png' ) } }, sSelectedFeature: '',
 bDefault: true, bLoaded: false, bIsEmpty: false, sSelector: 'menu_extras_4'};if(g_hPlatform.id == PLAT_CAM ){ delete ExtraMenuSelector.hFeatures['miss_mfc']; delete ExtraMenuSelector.hFeatures['custom_alerts']; delete ExtraMenuSelector.hFeatures['recommend']; delete ExtraMenuSelector.hFeatures['tags_topics'];}ExtraMenuSelector.Initialize = ExtraMenuSelector.Load = function(sLoadFeature, bSave ){ var bPlayerLoaded = ( window.player && player.g_sPlayerMode == 'player' ) ? 1 : 0; if(bSave ) { UserExtensions.Write('extra_menu_mode', sLoadFeature ); } if(g_hSelf.extra_menu_mode ) { ExtraMenuSelector.bDefault = false; } else if(! sLoadFeature || sLoadFeature == 'default' ) { ExtraMenuSelector.bDefault = true; if(bPlayerLoaded ) { sLoadFeature = 'recommend'; } else { sLoadFeature = 'popular_rooms'; } } if(! ExtraMenuSelector.hFeatures[sLoadFeature] ) { console.log(ExtraMenuSelector.hFeatures ); console.log('Load missing ' + sLoadFeature ); return; } if ( ExtraMenuSelector.sSelectedFeature && ExtraMenuSelector.sSelectedFeature !== sLoadFeature ) ExtraMenuSelector.Undisplay(ExtraMenuSelector.sSelectedFeature); ExtraMenuSelector.sSelectedFeature = sLoadFeature; if(GetEl("menu_extras_heading_4").innerHTML != ExtraMenuSelector.hFeatures[sLoadFeature].name ) SetHTML("menu_extras_heading_4", ExtraMenuSelector.hFeatures[sLoadFeature].name );
 ExtraMenuSelector.bLoaded = true; ExtraMenuSelector.Display(sLoadFeature, ExtraMenuSelector.sSelector); return false;};ExtraMenuSelector.SwitchToNextUndisplayed = function(hOptions ){ hOptions = hOptions || {}; for(var sFeature in ExtraMenuSelector.hFeatures ) { var sInUse = ''; if(sFeature == ExtraMenuSelector.sSelectedFeature ) sInUse = 'sSelectedFeature'; else if(ExtraMenuSelector.hFeatures[sFeature].obj.bIsDisplayed ) sInUse = 'bIsDisplayed'; else if(ExtraMenuSelector.hFeatures[sFeature].inExtra ) sInUse = 'inExtra'; else if(hOptions.disqualified && hOptions.disqualified.indexOf(sFeature) > - 1 ) sInUse = 'disqualified'; if(sInUse ) { continue; } ExtraMenuSelector.sSelectedFeature = ''; ExtraMenuSelector.Load(sFeature); return; } ExtraMenuSelector.bIsEmpty = true; ExtraMenuSelector.sSelectedFeature = ''; ExtraMenuSelector.Initialize(); g_oSidebar.disablePanelByName('menu_extras_4');};ExtraMenuSelector.ClearInitTimer = function(sFeature){ if ( ! ExtraMenuSelector.hFeatures[sFeature] ) { console.log(ExtraMenuSelector.hFeatures ); console.log('ClearInitTimer missing ' + sFeature ); return; } clearTimeout(ExtraMenuSelector.hFeatures[sFeature].initTimer); ExtraMenuSelector.hFeatures[sFeature].initTimer = undefined;};ExtraMenuSelector.Display = function(sFeature, sPanelSelector){ if ( ! ExtraMenuSelector.hFeatures[sFeature] ) { console.log('Display missing ' + sFeature ); return; } var bIsDefaultSelector = ( sPanelSelector === ExtraMenuSelector.sSelector ? true : false );
 if ( ExtraMenuSelector.hFeatures[sFeature].obj.bIsDisplayed ) { if ( bIsDefaultSelector && ! ExtraMenuSelector.hFeatures[sFeature].inExtra ) { ExtraMenuSelector.SwitchToNextUndisplayed({ disqualified: [ sFeature ] }); return; } if ( ! bIsDefaultSelector && ExtraMenuSelector.hFeatures[sFeature].inExtra ) ExtraMenuSelector.SwitchToNextUndisplayed(); } ExtraMenuSelector.hFeatures[sFeature].obj.bIsDisplayed = true; ExtraMenuSelector.hFeatures[sFeature].obj.sSelector = sPanelSelector; ExtraMenuSelector.hFeatures[sFeature].inExtra = bIsDefaultSelector; if ( bIsDefaultSelector && ExtraMenuSelector.bIsEmpty ) { ExtraMenuSelector.bIsEmpty = false; g_oSidebar.enablePanelByName('menu_extras_4'); } if ( ! ExtraMenuSelector.bLoaded ) { ExtraMenuSelector.ClearInitTimer(sFeature); ExtraMenuSelector.hFeatures[sFeature].initTimer = setTimeout( Math.floor(Math.random() * (1250 - 250 + 1) + 250) ); } else { ExtraMenuSelector.ClearInitTimer(sFeature); ExtraMenuSelector.hFeatures[sFeature].init(); } ExtraMenuSelector.RenderSelector();};ExtraMenuSelector.Undisplay = function(sFeature){ if ( ! ExtraMenuSelector.hFeatures[sFeature] ) { console.log(ExtraMenuSelector.hFeatures ); console.log('Undisplay missing ' + sFeature ); return; } ExtraMenuSelector.ClearInitTimer(sFeature); ExtraMenuSelector.hFeatures[sFeature].obj.bIsDisplayed = false; ExtraMenuSelector.hFeatures[sFeature].inExtra = true; if ( ExtraMenuSelector.bIsEmpty ) { ExtraMenuSelector.bIsEmpty = false; ExtraMenuSelector.SwitchToNextUndisplayed(); g_oSidebar.enablePanelByName('menu_extras_4'); }
 ExtraMenuSelector.RenderSelector();};ExtraMenuSelector.RenderSelector = function() { var sHtml = " <div class=\"emphasized_bg simenu_switch_panel\"> <div class=\"mb6\">Switch panel to show:</div> "; var bClear = true; for(var sFeature in ExtraMenuSelector.hFeatures ) { if(sFeature == ExtraMenuSelector.sSelectedFeature ) { continue; } if(ExtraMenuSelector.hFeatures[sFeature].obj.bIsDisplayed ) { continue; } bClear = false; sHtml += "<div class=\"simenu_switch_panel_item\"><img id=init2_" + sFeature + " src=\"" + ExtraMenuSelector.hFeatures[sFeature].icon + "\" />"; sHtml += "<a href=\"#\" id=\"init_" + sFeature + "\" >" + ExtraMenuSelector.hFeatures[sFeature].name + "</a></div>"; } sHtml += " </div> "; var oEl = GetEl('menu_extras_selector_4'); if(oEl ) { oEl.innerHTML = bClear ? '' : sHtml; } else { console.log("Can't find menu_extras_selector_4"); } for(var sFeature in ExtraMenuSelector.hFeatures ) { var oEl = GetEl('init_' + sFeature); if(oEl ) oEl.onclick = function() { ExtraMenuSelector.Load(this.id.match(/^init_(.+)/)[1],true); }; var oEl = GetEl('init2_' + sFeature); if(oEl ) oEl.onclick = function() { ExtraMenuSelector.Load(this.id.match(/^init2_(.+)/)[1],true); }; }};ExtraMenuSelector.UpdateFeature = function(nUserId, sMode ){ if(! ExtraMenuSelector.bLoaded ) { return; } if(ExtraMenuSelector.bDefault ) { if(nUserId > 0 ) { Recommend.Request(nUserId, sMode );
 ExtraMenuSelector.Load('recommend'); } else { PopularRooms.Initialize(); ExtraMenuSelector.Load('popular_room'); } } else if(g_hSelf.extra_menu_mode == 'recommend' ) { if(! nUserId && window.GetBroadcasterId ) { nUserId = GetBroadcasterId(); } Recommend.Request(nUserId, sMode ); ExtraMenuSelector.Load('recommend');  }};function InsertPremiumLounge(){ if ( g_hSelf['access_level'] != FCS.FCLEVEL_PREMIUM && g_hSelf['access_level'] != FCS.FCLEVEL_ADMIN ) { return; } g_hUsers[ g_hLoungeIds.Lounge ] = { username: g_hLoungeIds[ g_hLoungeIds.Lounge ], user_id: g_hLoungeIds.Lounge, access_level: FCS.FCLEVEL_MODEL, state: '0', photos: '0', rating: '2', cam_score: '0', aboutme: 'An exclusive room for Premium Members', active: '1', blurb: 'An exclusive room for Premium Members', topic: 'An exclusive room for Premium Members', creation_date: '0', avatars: '1',
 platform_id: t.g_hPlatform.id, video_aspect_ratio: 1.7777, chat_background_id: '0' }; if(g_hLoungeIds.Lounge1000 && g_hSelf['rewards_points'] >= 1000 ) { g_hUsers[ g_hLoungeIds.Lounge1000 ] = { username: g_hLoungeIds[ g_hLoungeIds.Lounge1000 ], user_id: g_hLoungeIds.Lounge1000, access_level: FCS.FCLEVEL_MODEL, state: '0', photos: '0', rating: '-2', cam_score: '0', aboutme: 'An exclusive room for Premium Members with 1000+ Rewards Points', active: '1', blurb: 'An exclusive room for Premium Members with 1000+ Rewards Points', topic: 'An exclusive room for Premium Members with 1000+ Rewards Points', creation_date: '0', avatars: '1', platform_id: t.g_hPlatform.id, video_aspect_ratio: 1.7777, chat_background_id: '0' }; } if(g_hLoungeIds.Lounge10000 && g_hSelf['rewards_points'] >= 10000 ) { g_hUsers[ g_hLoungeIds.Lounge10000 ] = { username: g_hLoungeIds[ g_hLoungeIds.Lounge10000 ], user_id: g_hLoungeIds.Lounge10000, access_level: FCS.FCLEVEL_MODEL, state: '0', photos: '0', rating: '-2', cam_score: '0', aboutme: 'An exclusive room for Premium Members with 10000+ Rewards Points', active: '1', blurb: 'An exclusive room for Premium Members with 10000+ Rewards Points', topic: 'An exclusive room for Premium Members with 10000+ Rewards Points', creation_date: '0', avatars: '1', platform_id: t.g_hPlatform.id, video_aspect_ratio: 1.7777, chat_background_id: '0' }; }}
function Load(sResource, hOptions, oTarget ){ sResource = sResource || ''; hOptions = hOptions || { }; oTarget = oTarget || ''; if(g_nAgeCheckRequired && sResource != 'logout' && sResource != 'login' ) { sResource = ( g_hCk['username'] && g_hCk['passcode'] && g_hCk['al'] === '0' ) ? 'purchase' : 'register'; sResource = 'register'; hOptions['age_check_required'] = 2; hOptions['client'] = g_hQS.client || ''; hOptions['target'] = 'main'; } if(g_hSelf['rule_violation'] == 1 && sResource != 'rule_violation' ) { return; }
 var sTarget; if ( hOptions['target'] ) { sTarget = hOptions['target']; } else if(g_hResources[sResource] && g_hResources[sResource]['target'] ) { sTarget = g_hResources[sResource]['target']; } if(sTarget && ! hOptions.a_click_callback ) { A_Click(event,{ 'resource': sResource, 'target' : sTarget, 'window_params': hOptions }); return; } if(sResource == 'pm_friend' && hOptions.target != 'main' ) { return ClickFriend(hOptions['user_id'],hOptions ); } else if(sResource == 'close_pm_window' ) { return ClosePMWindow(hOptions['user_id']); } else if (sResource == 'pm_prompt' ) { return PmUsernamePrompt.Form(); } else if(sResource == 'logout' ) { if(g_sConnectionMode == 'flash') zgw_TxLogout(); TxCmd(FCS.FCTYPE_LOGOUT, g_nSessionId, 0); Logout(false); return; }
 else if(sResource == 'mute' ) { return oTarget.view.Mute(); } else if(sResource == 'highlight_chat' ) { return TopHighlightChat(hOptions['user_id'] ); } else if(sResource == 'room_helper' ) { RoomHelper_TopHandlers.CommandReceiver(hOptions ); } else if(sResource == 'tx_add_friend' ) { return TxAddRemove('friend', hOptions['remote_user_code'], 'add' ); } else if(sResource == 'tx_remove_friend' ) { return TxAddRemove('friend', hOptions['remote_user_code'], 'remove' ); } else if(sResource == 'tx_toggle_to_friend' ) { Bookmarks.Delete(hOptions['remote_user_code'] ); return TxAddRemove('friend', hOptions['remote_user_code'], 'add' ); } else if(sResource == 'tx_toggle_to_bookmark' ) { TxAddRemove('friend', hOptions['remote_user_code'], 'remove' ); return Bookmarks.Add(hOptions['remote_user_code'] ); } else if(sResource == 'tx_add_bookmark' ) { return Bookmarks.Add(hOptions['remote_user_code'] ); } else if(sResource == 'tx_remove_bookmark' ) { return Bookmarks.Delete(hOptions['remote_user_code'] ); } else if(sResource == 'toggle_menu' ) { hOptions.display = TogglePersonalMenu.nDisplay ? 0 : 1; return TogglePersonalMenu.Execute(hOptions); } else if(sResource == 'tx_add_ignore' ) { return TxAddRemove('ignore',hOptions['remote_user_code'],'add',hOptions); } else if(sResource == 'tx_remove_ignore' ) { return TxAddRemove('ignore',hOptions['remote_user_code'],'remove',hOptions);
 } else if(sResource == 'toggle_mute_guests' || sResource == 'toggle_mute_regs' ) { t.ChatOptions.ToggleMuteGuests(sResource); return; } else if(sResource == 'register' && hOptions['mode'] == 'guest_bounce' ) { sTarget = 'main'; } if(! sResource ) { sResource = 'homepage'; } if(sResource == 'server_connection_error' ) { if(g_sConnectionMode == 'ajax' || g_sConnectionMode == 'websocket') sResource = 'homepage'; } if(g_hQS['mode'] == "under_construction" && sResource != "under_construction" ) { return; } var sLoc = ''; if(g_hResources[sResource] ) { sLoc = MfcStringUtilities.parse_template(g_hResources[sResource]['page'],hOptions,{ cleanup_unused_tags: true }); }
 if(! sLoc ) { return; } if(sResource == 'homepage' || sResource == 'player' ) { if(window.g_bPlayerHTMLLoaded ) { player.LoadPlayer('player',hOptions); } else { LoadTopPlayer(sResource,hOptions); NightMode.Apply(); } } else { sLoc = sLoc + ( ( sLoc.indexOf("?") > -1 ) ? '&' : '?' ) + 'vcc=' + g_nVcc; for(var sK in hOptions ) { if(sK != '' && sLoc.indexOf(sK+"=") == -1 ) { sLoc = MfcStringUtilities.query_string_append(sLoc, sK, hOptions[sK] ); } } if(! InitialLoadingScreen.hidden ) { InitialLoadingScreen.hide(); } LoadMainIframe(sLoc ); }}function LoadMainIframe(sSrc ){ if(GetEl('main') && window.frames['main'] && window.frames['main'].window && window.frames['main'].window.location ) { window.frames['main'].window.location.replace(sSrc ); return; }
 var oEl; if(! ( oEl = GetEl('iframe_wrapper') ) ) { return; } oEl.innerHTML = "<iframe class=main_iframe name=main id=main height=100% width=100% frameborder=0 allowfullscreen='allowfullscreen'></iframe>"; if(sSrc ) { window.frames['main'].window.location = sSrc; } if(oEl = GetEl('main_content') ) { oEl.style.display = 'none'; oEl.innerHTML = ''; } if(oEl = GetEl('main') ) { oEl.style.display = 'block'; } if(oEl = GetEl('main_iframe_close_button') ) { oEl.style.display = oEl.style.display = g_nAgeCheckRequired ? 'none' : 'block'; } window.g_bPlayerHTMLLoaded = false;}function LoadTopPlayer(sResource, hOptions ){ var oEl; if(( ( oEl = GetEl('main') ) && oEl.style.display == 'none' ) && ( ( oEl = GetEl('main_content') ) && oEl.style.display == 'block' ) ) { return; } if(oEl = GetEl('main_content') ) { oEl.style.display = 'block'; } if(oEl = GetEl('main_iframe_close_button') ) { oEl.style.display = 'none'; } if(oEl = GetEl('iframe_wrapper') ) { oEl.innerHTML = ''; } if(! ( oMainContent = GetEl('main_content') ) ) { console.log('NO main_content div'); return; } if(! window.g_bPlayerHTMLLoaded || ! oMainContent.innerHTML )
 { var oMainContent; oMainContent.innerHTML = " <div id=inner_body class=inner_body style=\"margin:0px;overflow:auto;height:100%;background-color:transparent;\"> <div id=MfcBroadcasterDisplay_DisplayLoadingMessage_HelperDiv></div> <div id=player_main style=\"position:relative;height:100%;width:100%;margin-left:0px;\"></div> <div id=player_bottom></div> </div> "; window.g_bPlayerHTMLLoaded = true; } if(window.LoadPlayer ) { LoadPlayer(sResource, hOptions ); }};var HeaderArt = { oReq: createRequestObject(), hBannerArtConfig: ( window.hBannerArtConfig || null )};HeaderArt.getConfig = function(){ HeaderArt.oReq.open('get','/_js/banner_art_config.js'); HeaderArt.oReq.onreadystatechange = function() { if ( HeaderArt.oReq.readyState !== 4 ) { return; } HeaderArt.hBannerArtConfig = ParseJSON(HeaderArt.oReq.responseText ); if(HeaderArt.hBannerArtConfig !== null ) HeaderArt.Load(); else Log("HeaderArt: config file banner_art_config.js was not imported correctly"); }; HeaderArt.oReq.send();};HeaderArt.Load = function()
{ if(g_hPlatform.id == PLAT_MFC && HeaderArt.hBannerArtConfig === null ) { HeaderArt.getConfig(); return; } var sBackgroundUrl; if(g_hPlatform.id == PLAT_MFC ) { if(g_hQS['h'] && HeaderArt.hBannerArtConfig[ g_hQS['h'] ] ) { nSet = g_hQS['h']; sBackgroundUrl = "files/styles/mfc/images/header2/top-header-tl-" + HeaderArt.hBannerArtConfig[ nSet ]['filename'] + ".jpg?" + Math.random(); } else { var nSet; if(g_hSelf.top_header_id > 0 ) { nSet = g_hSelf.top_header_id; } else { var nC = 0; var aShare = new Array(); for(var nK in HeaderArt.hBannerArtConfig ) { nC++; for(var a=0; a < HeaderArt.hBannerArtConfig[ nK ]['share']; a++ ) { aShare.push(nK); } } nSet = aShare[ Math.floor(aShare.length * Math.random()) ]; } if(! HeaderArt.hBannerArtConfig[ nSet ] ) { return; } sBackgroundUrl = t.g_hPlatform.image_url_cdn + "files/styles/mfc/images/header2/top-header-tl-" + HeaderArt.hBannerArtConfig[ nSet ]['filename'] + ".jpg"; } } else if(g_hPlatform.id == PLAT_CAM ) { sBackgroundUrl = t.g_hPlatform.image_url_cdn + "files/images/svg/camyou.com.svg"; } else {
 sBackgroundUrl = "files/styles/mfc/images/header2/top-header-tl-default.jpg"; } GetEl('header_logo').src = sBackgroundUrl; if(g_hPlatform.id == PLAT_MFC && top.document.body.clientWidth > 870 ) { GetEl('miss_mfc_details').style.left = HeaderArt.hBannerArtConfig[ nSet ]['left']; SetHTML('miss_mfc_details',"<i onClick='MissMFCHeaderPopup("+nSet+");'>" + HeaderArt.hBannerArtConfig[ nSet ].username + "</i>"); }};function MissMFCHeaderPopup(nSet ){ if(typeof(HeaderArt.hBannerArtConfig) != 'object' ) { return; } var aMonths = new Array("","January","February","March","April","May","June","July","August","September","October","November","December"); var hPlace = { 1: 'Winner!', 2: '2nd Place', 3: '3rd Place' }; var nHeight = g_hSelf['access_level'] >= FCS.FCLEVEL_BASIC ? 80 : 60; var aWins = HeaderArt.hBannerArtConfig[ nSet ]['wins']; var sWins = ''; for(var nK in aWins ) { var sStyle = aWins[nK][0] == 1 ? " style='font-weight:bold;background-color:#FFFFF0 ! important;' " : ""; sWins += " <tr> <td class=missmfc_popup_crown> <div class='sprite-icons sprite-" + (aWins[nK][0] == 1 ? 'gold': 'silver') + "_crown' style='display:inline-block;'></div> </td> <td class=missmfc_popup_place nowrap " + sStyle + ">" + hPlace[aWins[nK][0]] + "</td> <td class=missmfc_popup_month " + sStyle + ">" + aMonths[aWins[nK][1]] + ' ' + aWins[nK][2] + "</td> </tr> "; nHeight += 30; } var sHtml = " <div style='width:340px;height:" + nHeight + "px;font-size:12px;'> <b><a href=\"//profiles." + t.g_hPlatform.domain + "/" + HeaderArt.hBannerArtConfig[ nSet ].username + "\" target=_blank>" + HeaderArt.hBannerArtConfig[ nSet ].username + "</a> - Miss " + g_hPlatform.name + "  Top 3 Finish" + ( aWins.length == 1 ? '' : 'es' ) + "</b><br><br> <div class=missmfc_popup_container> <table cellpadding=0 cellspacing=0> " + sWins + " </table> </div><br> <div style='font-weight:normal;font-size:10px;'> " + A('miss_mfc') + "<span style='font-weight:normal;'>View current Miss " + g_hPlatform.name + " standings for this month.</span></a><br><br>\
 " + ( g_hSelf['access_level'] >= FCS.FCLEVEL_BASIC ? ( A('user_settings',{load:'top_banner'}) + "<span style='font-weight:normal;'>Change your Top Banner settings.</span></a>" ) : '') + " </div> </div> "; g_oDhtmlPopup.open(sHtml );}function LoadMenu(sMenuItems ){ if(g_nAgeCheckRequired ) { return; } var sMenuItems = sMenuItems || ''; var hMainMenuOptions = { 'logout': 'Logout', 'purchase': 'Purchase Tokens', 'register': 'Create a Free Account', 'login': 'Login', 'profiles': 'Profiles', 'tour': 'Tour', 'homepage': 'Homepage', 'contact': 'Contact Us', 'contact_help': 'Contact Us', 'toggle_menu': '' }; if(g_hPlatform.id == PLAT_CAM ) { delete hMainMenuOptions['tour']; } if(! ToggleHeader.displayed ) { delete hMainMenuOptions['contact_help']; } var haMainMenuModes; if(g_UA.mobile ) { haMainMenuModes = { 'guest': [ 'register'], 'registered': [ 'purchase' ], 'premium': [ 'purchase' ], 'model': [ 'contact_help' ] }; } else { haMainMenuModes = { 'guest': [ 'tour','register'], 'registered': [ 'contact_help','purchase' ],
 'premium': [ 'contact_help','purchase' ], 'model': [ 'contact_help' ] }; } if(! sMenuItems ) { var nMenuMode; if (g_hSelf['access_level'] == FCS.FCLEVEL_BASIC ) nMenuMode = 'registered'; else if (g_hSelf['access_level'] == FCS.FCLEVEL_PREMIUM ) nMenuMode = 'premium'; else if (g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ) nMenuMode = 'model'; else if (g_hSelf['access_level'] == FCS.FCLEVEL_ADMIN ) nMenuMode = 'premium'; else nMenuMode = 'guest'; if(! ( g_UA.mobile && ToggleHeader.displayed ) ) { haMainMenuModes[nMenuMode].unshift('homepage'); } var sMenuItems = ""; for(var nK in haMainMenuModes[nMenuMode]) { var sResource = haMainMenuModes[nMenuMode][nK]; if(! hMainMenuOptions[sResource] ) { continue; } var sATag; if(sResource == 'homepage' ) sATag = "<a href=\"javascript:ClickLogo();\" title=\"Return to the homepage, or type /homepage or /h in the chat input\"> "; else sATag = A(sResource,{ 'USERNAME': g_hSelf['username'], 'USER_ID': g_hSelf['user_id'], user_invoked: 1 }); var sLabel=''; if(sResource == 'purchase' && g_hSelf.access_level == FCS.FCLEVEL_BASIC && ! g_nAgeCheckRequired ) { sLabel = A('purchase') + "<b>Buy Tokens once to become Premium</b></a>"; } else { sLabel = sATag + hMainMenuOptions[sResource] + "</a>"; if(! ToggleHeader.displayed && sResource == 'purchase' ) sLabel = "<span id=hidden_header_token_count>" + g_hSelf.tokens + "</span> Tokens (" + sATag + ( g_hPlatform.id == PLAT_CAM ? "Buy" : "Purchase" ) + "</a>)"; }
 sMenuItems += "<span class=\"main_menu_link\" id=btn_"+sResource+">" + sLabel + "</span>"; if(( nK < haMainMenuModes[nMenuMode].length - 1 ) && g_hPlatform.id == PLAT_MFC ) sMenuItems += "<span class=\"divider\">&#8226;</span>"; } } if(! g_bLoginDone ) { sMenuItems = ''; } else if(! ToggleHeader.displayed && g_hSelf.access_level > FCS.FCLEVEL_GUEST ) { if(g_hPlatform.id == PLAT_CAM ) sMenuItems += "<a href=\"javascript:Logout();\">Logout <b>" + g_hSelf.username + "</b></a> "; else sMenuItems += "<span class=\"divider\">&#8226;</span><a href=\"javascript:Logout();\">Logout <i>" + g_hSelf.username + "</i></a> "; } else if(! ToggleHeader.displayed ) { if(g_hPlatform.id == PLAT_CAM ) { var sUsername = (( g_hCk['username'] && g_hCk['username'].match(/^Guest\d+/)) || ! g_hCk['username'] ) ? '' : g_hCk['username']; nVal = sUsername.charCodeAt(0) || 2; var oTime = new Date(); var sTZ = -oTime.getTimezoneOffset() / 60; sMenuItems += " <div style=\"color:#ffffff;position:relative;display:inline-block;width:275px;white-space:nowrap;\">" + t.A('login') + "Login</a>: <form name=login_form id=login_form target=main method=POST action='" + g_Paths.phpPathLogin + "' onSubmit=\" OnLoginSubmit(); ProcessLoginInput(); \" style=\"position:absolute;top:-4px;left:45px;\"> <input type=hidden id=submit_login name=submit_login value=" + nVal + "> <input type=hidden name=client id=client value=\"" + parseInt(g_hQS.client) + "\"> <input type=hidden name=uid id=login_uid value=\"" + ClientInfo.nUID + "\"> <input type=hidden name=tz id=tz value=\"" + sTZ + "\"> <input type=hidden name=ss id=ss value=\"" + screen.width + "x" + screen.height + "\"> <input type=text name=username id=username_input value='" + sUsername + "' style=\"width:100px;\" onChange=ProcessLoginInput(); onKeyUp=ProcessLoginInput(); onClick=ProcessLoginInput(); onPaste=ProcessLoginInput();> &nbsp;<input type=password id=password_input value='' name=password style=\"width:100px;\" onKeyDown=\"this.style.background='';\"> <img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/svg/login_arrow_white.svg\" style=\"height:18px;width:18px;margin-bottom:-4px;cursor:pointer;\" onClick=\"GetEl('login_form').submit();\" > <input style=\"display:none;\" type=submit> </form> </div> "; } else { sMenuItems += "<span class=\"divider\">&#8226;</span><a href=\"javascript:ToggleHeader();\">Login</a> "; } }
 if(TogglePersonalMenu.nDisplay === 0 ) { sMenuItems += "<span class=\"divider\">&#8226;</span><a href=\"javascript:t.Load('toggle_menu');\" class=highlight_fg>Menu</a> <span onClick=t.Load('toggle_menu'); class=\"btn_unhide_friends divider\">&#8594;</span>"; } SetHTML('slim_menu',sMenuItems); SetHTML('main_menu',sMenuItems);}events.onRx(FCS.FCTYPE_LOGOUT,;function Logout(fDisconnected ){ UpdateCookieHash(); for(var sK in g_hCk) { if(sK.match(/^oc/) || sK.match(/bouncer/) || sK.match(/\x75\x73\x65\x72\x6E\x61\x6D\x65|\x71\x73|\x63\x68\x61\x74\x5F\x65\x6E\x61\x62\x6C\x65\x64/) || g_hC[sK] ) { continue; } SetCookie(sK,''); } var hQS = MfcStringUtilities.parse_query_string(top.location.search); var sNewPath = top.location.href.replace(/\?.*/,'') + '?'; for(var k in hQS ) { if(! ( k == 'load' && hQS[k] == 'logout' ) && k != 'cache_id' && k != '' ) { if(typeof(hQS[k]) == 'undefined' ) { hQS[k] = ''; } sNewPath += encodeURIComponent(k ) + '=' + encodeURIComponent(hQS[k] ) + '&'; } } sNewPath = sNewPath.replace(/\?&/,''); sNewPath = sNewPath.replace(/[&\=]+$/,'');
 if(top.location.hash ) { sNewPath += top.location.hash; } setTimeout( 100 ); }function GetUserIdByUsername(sUsername ){ if(typeof(sUsername ) != 'string' ) { return; } sUsername = sUsername.toLowerCase(); if(! GetUserIdByUsername.hCache ) { GetUserIdByUsername.hCache = {}; } if(GetUserIdByUsername.hCache[ sUsername ] ) return GetUserIdByUsername.hCache[ sUsername ]; var nFoundUserId; for(var nUserId in g_hUsers ) { var hUser = g_hUsers[ nUserId ]; if(! hUser.username ) { continue; } var sMatchName = hUser.username.toLowerCase(); if(sMatchName == sUsername ) { nFoundUserId = nUserId; break; } if(hUser.access_level == FCS.FCLEVEL_MODEL || hUser.friend ) GetUserIdByUsername.hCache[ sMatchName ] = nUserId; } return nFoundUserId;} var Banner = { aHistory: []};Banner.SetMessage = function(sContent, sIcon, bSaveToHistory, sSound ){ sContent = sContent || ''; var sSpeakerLink; if(sSound == 'sound_email_notification_model_login' ) {
 sContent.match(/(\w+) has logged in/); sSpeakerLink = A('messenger',{ highlight_model: RegExp.$1 }); } else { sSpeakerLink = A('user_settings',{ anchor: 'sounds', sound: sSound }); } if(bSaveToHistory ) { var date = new Date(); if(Banner.aHistory.length > 100 ) { Banner.aHistory.shift(); } var sSpeaker = sSound ? ( " " + sSpeakerLink + "<img class=\"menu_speaker\" src='" + t.g_hPlatform.image_url_cdn + "files/images/svg/speaker.svg' height=14 width=14></a>" ) : ""; Banner.aHistory.push({ content: sContent + sSpeaker, date: date.getTime() } ); } var sLargeIcon=''; if(sIcon && sIcon.charAt(0) == '<' ) { sLargeIcon = sIcon; } else if(sIcon ) { sLargeIcon = "<img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/bw/" + sIcon + "\" style=\"margin-bottom:-3px;\"> &nbsp;"; } var sScroll=''; if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { if(g_hPlatform.id == PLAT_CAM ) { sScroll = " <a href=\"javascript:Banner.LoadHistory();\"><img src=\"" + t.g_hPlatform.image_url_cdn + "images/cam/svg/chat_bubble_white.svg\" style=\"display:none;\" id=chat_bubble_white height=16></a>"; } else { sScroll = " <a title=\"My Notifications\" class=\"scroll\" href=\"javascript:Banner.LoadHistory();\"><img src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/scroll.48x48.png?1\"></a>"; } } var sDefaultMessage=''; if(! sContent ) { if(g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ) { sDefaultMessage = "You are logged in as a " + t.g_hPlatform.Performer; } else if(g_hSelf['access_level'] == FCS.FCLEVEL_PREMIUM || g_hSelf['access_level'] == FCS.FCLEVEL_ADMIN ) { sDefaultMessage = "You have <b>" + g_hSelf.tokens + "</b> Tokens";
 } else if(g_hSelf['access_level'] == FCS.FCLEVEL_BASIC && ! g_nAgeCheckRequired ) { sDefaultMessage = "<span class=\"top_notification basic_purchase\">" + A('purchase') + "Purchase tokens</a> once to become " + A('faq',{ anchor: 'Premium_Membership'}) + "Premium</a>.</span>"; } else if(g_nAgeCheckRequired ) { sDefaultMessage = ""; } else { sDefaultMessage = "You are currently a Guest."; } } var sSpeaker = sSound ? ( " " + sSpeakerLink + "<img class=\"menu_speaker\" src='" + t.g_hPlatform.image_url_cdn + "files/images/svg/speaker_white.svg' height=14 width=14></a>" ) : ""; if(GetEl('menu_banner') ) { SetHTML('menu_banner', "<span>" + sLargeIcon + ( sContent || sDefaultMessage ) + sSpeaker + sScroll + "</span>"); } if(GetEl('slim_notifications') ) { SetHTML('slim_notifications', sScroll + sContent + sSpeaker ); }};Banner.LoadHistory = function(){ var sRows = ''; var date = new Date(); for(var a=Banner.aHistory.length-1; a>=0; a-- ) { var nTimeDiff = ( date.getTime() - Banner.aHistory[a].date ) / 1000; if ( nTimeDiff < 60 ) { sTimeAgo = "<div class=\"ago secs\">" + Math.round(nTimeDiff ) + " seconds ago:</div>"; } else if ( nTimeDiff < 120 ) { sTimeAgo = "<div class=\"ago min\">One minute ago:</div>"; } else if ( nTimeDiff <= 3600 ) { sTimeAgo = "<div class=\"ago mins\">" + Math.round(nTimeDiff / 60 ) + " minutes ago:</div>"; } else if ( nTimeDiff > 7200 ) { sTimeAgo = "<div class=\"ago hrs\">" + Math.round(nTimeDiff / 3600 ) + " hours ago:</div>"; } else if ( nTimeDiff > 3600 ) { sTimeAgo = "<div class=\"ago hour\">" + Math.round(nTimeDiff / 3600 ) + " hour ago:</div>"; } sRows += "<div class=\"notification_history_row\">" + sTimeAgo + "<div class=\"event\">" + Banner.aHistory[a].content + "</div></div>"; } if(! sRows ) { sRows += '<div class="noresults">No Notifications Yet</div>' }
 g_oDhtmlPopup.open(" <div class=\"notification_history_pop\"> <div class=\"mini_popup_header\">Notification History</div> <div class=\"notification_history_options\"> <span>Show Live Notifications:</span> <select onChange=\" UserExtensions.Write('show_notifications',this.value);\"> <option value=1>Yes</option> <option value=0 " + ( g_hSelf.show_notifications == '0' ? 'SELECTED' : '' ) + ">No</option> </select> </div> <div class=\"notification_history_list\"> " + sRows + " </div></div> ");};Banner.SpeakerPopup = function(sSound ){ var popup = new MfcDhtmlPopup({ mfcMouseTracker: g_oMouseTracker, mfcGraphics: g }); g_oDhtmlPopup_child.open(" <center> <br><br> <img src='" + t.g_hPlatform.image_url_cdn + "files/images/svg/speaker.svg' height=16 style='cursor:pointer;' onClick=\"Banner.PlaySound('" + sSound + "');\"> <br><br> <a href=\"javascript:Banner.PlaySound('" + sSound + "')\">Play Sound</a> <br><br> " + A('user_settings',{ anchor: 'sounds', sound: sSound }) + "Manage Sounds</a> </center> ",{ width:100, child:true });};Banner.PlaySound = function(sSound ){ Sound(sSound );};function LoadLogin(sContent){ sContent = sContent || ""; if(g_hPlatform.id == PLAT_CAM ) { return; } if (!GetEl('login_box')) { return; } var sUsername = A('account',{ title: 'Go to My Account' }) + g_hSelf['username'] + "</a>";
 if (!sContent && g_hSelf['access_level'] == FCS.FCLEVEL_ADMIN) { sContent = "Hello " + sUsername + ". (" + t.g_hPlatform.name + " Admin)"; } else if (!sContent && g_hSelf['access_level'] == FCS.FCLEVEL_MODEL) { sContent = "Hello " + sUsername + ". (" + t.g_hPlatform.name + " " + t.g_hPlatform.Performer + ")"; } else if (!sContent && g_hSelf['access_level'] >= FCS.FCLEVEL_PREMIUM) { sContent = "Hello " + sUsername + ". (Premium Member)"; } else if (!sContent && g_hSelf['access_level'] == FCS.FCLEVEL_BASIC) { sContent = "Hello " + sUsername + ". (Basic Member)"; } else if (!sContent && g_hCk['username'] && g_hCk['passcode'] && g_hCk['al'] === '0' ) { sContent = "Hello " + g_hCk['username'].replace(/\W/,'') + ". (Unverified Account)"; } if(( g_hCk.user_id && g_hCk.passcode ) || g_hSelf['access_level'] > FCS.FCLEVEL_GUEST ) { sContent = sContent + " <input type=button value=Logout onClick=\"Load('logout');return false;\" style='font-size:11px;'>"; } else if (!sContent && g_hSelf['access_level'] == FCS.FCLEVEL_GUEST) { var sUsername = (( g_hCk['username'] && g_hCk['username'].match(/^Guest\d+/)) || ! g_hCk['username'] ) ? '' : g_hCk['username']; nVal = sUsername.charCodeAt(0) || 2; var oTime = new Date(); var sTZ = -oTime.getTimezoneOffset() / 60; sContent = " <form name=login_form class=\"login_form\" target=main method=POST action='" + g_Paths.phpPathLogin + "' onSubmit=\" OnLoginSubmit(); ProcessLoginInput(); \"> <input type=hidden id=submit_login name=submit_login value=" + nVal + "> <input type=hidden name=client id=client value=\"" + parseInt(g_hQS.client) + "\"> <input type=hidden name=uid id=login_uid value=\"" + ClientInfo.nUID + "\"> <input type=hidden name=tz id=tz value=\"" + sTZ + "\"> <input type=hidden name=ss id=ss value=\"" + screen.width + "x" + screen.height + "\"> <span>Username:</span> <input type=text name=username id=username_input value='" + sUsername + "' onChange=ProcessLoginInput(); onKeyUp=ProcessLoginInput(); onClick=ProcessLoginInput(); onPaste=ProcessLoginInput();> <span>Password:</span> <input type=password id=password_input value='' name=password> <input type=submit id=login_form_submit value=Login style=\"width:70px;border-radius: 3px; border: 1px;\"> </form> "; if(g_bSsoLoginEnabled ) { } }else if (!sContent) { sContent = 'Loading...' } SetHTML('login_box',sContent); var el; if(g_bSsoLoginEnabled && ! g_hSelf['access_level'] ) { if(el = GetEl('sso_box') ) { el.style.display = 'inline-block'; } } else { if(el = GetEl('sso_box') ) { el.style.display = 'none'; } } var oEl_username_input = GetEl('username_input'); var oEl_password_input = GetEl('password_input'); if(oEl_username_input && oEl_password_input ) { if(oEl_username_input && oEl_username_input.value) oEl_password_input.focus(); else oEl_username_input.focus(); }}LoadLogin.GoogleLogin = function Google_onSignIn(googleUser){ document.getElementById('google_auth_json').value = JSON.stringify(googleUser ); document.getElementById('googleAuthForm').submit();
}indow.addEventListener("message", (event) => { const domain = '.' + document.domain.replace(/.*?(\w+\.\w+)$/,"$1"); if(event.origin.indexOf(domain ) && event.origin.indexOf(domain ) + domain.length == event.origin.length && event.data.indexOf('http') > -1 ) { location.href = event.data + location.search.replace(/^\?/,'&').replace(/&request=\w+/,'') + ''; } else { console.log('invalid origin',domain,event.origin); }});function OnLoginSubmit(){ var password_input = GetEl('password_input'); if(password_input && password_input.value ) { var submit = GetEl('login_form_submit'); if(submit ) { submit.value='Verifying'; submit.style.color = '#999'; } } LoadMainIframe();}function ProcessLoginInput(){ var oUsernameEl = GetEl('username_input'); if(! oUsernameEl ) { return; } var nA = oUsernameEl.value.charCodeAt(0) || 1; GetEl('submit_login').value = nA; GetEl('username_input').style.background = ""; GetEl('password_input').style.background = "";
}function ProcessLoginInput_Reset(){ var submit = GetEl('login_form_submit'); if(submit ) { submit.value='Login'; submit.style.color = ''; }}function Navigation(oCaller) { return ''; var sH = ""; if (oCaller.opener && oCaller.history.length > 0) { sH += "<a href='javascript:history.go(-1)' onMouseout=\"window.status=''; \" onMouseover=\"window.status='Return to the previous page'; \">Back</a> - \n"; } if (oCaller.opener) { sH += "<a href='javascript:window.close()' onMouseout=\"window.status=''; \" onMouseover=\"window.status='Close this window'; \">Close</a> - " + A('help') + "Technical Help</a> - " + A('contact_help') + "Contact Us</a>"; } return "<div class=footer_include style='clear:left;'>" + sH + "</div>";}function Log(mixedLogContent ){ if (! g_bDebug ) { return; } if ( g_bDebug && ! Log.bBuildFcTypeMap ) { g_hTypeMap = {}; for ( var sK in w.FCS) { if (sK.indexOf('FCTYPE') == 0) { g_hTypeMap[ w.FCS[sK] ] = sK; } } Log.bBuildFcTypeMap = 1; } if(! Log.sLogDump ) Log.sLogDump = ''; if(! Log.nLogCx ) Log.nLogCx = 0;
 if ( ! Log.oStartLogTime ) { var oTime=new Date(); Log.oStartLogTime = oTime.getTime(); } if(Log.sLogDump.length > 7000 ) { Log.sLogDump = Log.sLogDump.substring(5000,Log.sLogDump.length); } var sQS = top.location.search; var aLogAnd = sQS.match(/debug_and=[^&]+/g); for(var sK in aLogAnd ) { if(typeof(mixedLogContent) == 'string' && mixedLogContent.indexOf(aLogAnd[sK].replace(/^\w+=/,'') ) == -1 ) { return; } } var aLogNot = sQS.match(/debug_not=[^&]+/g); for(var sK in aLogNot ) { if(typeof(mixedLogContent) == 'string' && mixedLogContent.indexOf(aLogNot[sK].replace(/^\w+=/,'') ) > -1 ) { return; } } if(typeof(mixedLogContent) == 'string' ) Log.sLogDump += mixedLogContent + "</b><br>"; var aLogOr = sQS.match(/debug_or=[^&]+/g); var bOrMatch = false; for(var sK in aLogOr ) { if(typeof(mixedLogContent) == 'string' && mixedLogContent.indexOf(aLogOr[sK].replace(/^\w+=/,'') ) > -1 ) { bOrMatch = true; } } var oLogFilter = GetEl('log_filter'); if(oLogFilter && oLogFilter.value && typeof(mixedLogContent) == 'string' && mixedLogContent.indexOf(oLogFilter.value ) == -1 && ! bOrMatch ) { return; } var oCurrentLogTime=new Date(); var nTotalTime = (oCurrentLogTime.getTime() - Log.oStartLogTime) / 1000; var sTotalTime = nTotalTime.toString(); while (sTotalTime.length < 7) sTotalTime = sTotalTime += ' '; var nTimeDiff = Log.oLastLogTime ? ((oCurrentLogTime.getTime() - Log.oLastLogTime) / 1000) : 0;
 var sTimeDiff = nTimeDiff.toString(); while (sTimeDiff.length < 7) sTimeDiff = sTimeDiff += ' '; Log.oLastLogTime = oCurrentLogTime.getTime(); if(Log.bLogPause ) { return; } var nLimit = g_hQS.rxverbose ? 0 : 5000; if(window.console && window.console.log ) { var args = []; var stamp = Log.nLogCx + " [" + sTotalTime + "] [" + sTimeDiff + "] "; if(typeof(arguments[0]) == 'string' && typeof(arguments[1]) == 'string' && arguments[0].indexOf('%c') == 0 && arguments[1].indexOf(':') > -1 && arguments[1].charAt(arguments[1].length - 1 ) == ';' ) { arguments[0] = "%c" + stamp + arguments[0].substr(2); args = arguments; } else { args = [ stamp ]; for(var a=0; a<arguments.length; a++ ) { args.push(arguments[a] ); } } window.console.log.apply(this,args); } Log.nLogCx++;}events.onRx(FCS.FCTYPE_MODELGROUP,function(fcMsg) { if(fcMsg.arg2 == FCS.FCCHAN_JOIN ) { LoginTimer.checkPoint('g_bFCTYPE_MODELGROUP_Received'); g_bFCTYPE_MODELGROUP_Received = true; } if(g_bFCTYPE_DETAILS_Received && g_bFCTYPE_MODELGROUP_Received && ! g_bLoginDone ) { g_bLoginDone = true; PostLoginProcedures(); }});events.onRx(FCS.FCTYPE_TKX,function(fcMsg) { if (fcMsg.obj.hasOwnProperty("ctx") && fcMsg.obj.hasOwnProperty("tkx")) { g_hAuth = fcMsg.obj; } else Log('Error parsing TKX object, missing ctx or tkx');});events.onRx(FCS.FCTYPE_ADDFRIENDREQ,function(fcMsg) { if(FCS.FCRESPONSE_ERROR == fcMsg.arg1 ) DhtmlPrompt({ prompt_type:'alert', message:"You have reached the maximum number of friends allowed. Please click Manage Friends and remove some friends before adding more."});});events.onRx(FCS.FCTYPE_PRIVACY,function(fcMsg) { g_hSelf['pmesg_accept'] = parseInt(fcMsg.arg2 ) });events.onRx(FCS.FCTYPE_BWSTATS,function(fcMsg) { g_hUsers[ fcMsg.to ] = g_hUsers[ fcMsg.to ] || {}; aGroupedStats = fcMsg.data && fcMsg.data.split('|'); for(var nK=0; nK < aGroupedStats.length; nK++ ) { aStats = aGroupedStats[nK].split(','); g_hUsers[ aStats[0] ] = g_hUsers[ aStats[0] ] || {}; g_hUsers[ aStats[0] ]['kbps'] = aStats[1];
 g_hUsers[ aStats[0] ]['ping'] = aStats[2]; }});events.onRx(FCS.FCTYPE_RULEVIOLATION,function(fcMsg) { if(typeof(fcMsg.data) != 'string' ) { return; } var sViolation = decodeURIComponent(fcMsg.data ); Load('rule_violation',{ violation: sViolation }); g_hSelf['rule_violation'] = 1;});events.onRx(FCS.FCTYPE_HIDEUSERS,function(fcMsg) { if(typeof(fcMsg.data) != 'string' ) { return; } var aList = fcMsg.data.split(','); for(var nK=0; nK < aList.length; nK++ ) { g_hUsers[ aList[nK] ] = g_hUsers[ aList[nK] ] || {}; g_hUsers[ aList[nK] ]['hidden'] = 1; }});events.onRx(FCS.FCTYPE_NULL,function(fcMsg) { if(fcMsg.arg1 > 0 ) { g_nNullTimeArg = parseInt(fcMsg.arg1) - 150; if(g_nNullTimeArg < 0 ) { g_nNullTimeArg = 0; } } if(g_nNullTimeArg && g_nNullTimeArg_Initial == -1 ) { g_nNullTimeArg_Initial = g_nNullTimeArg; }});events.onRx(FCS.FCTYPE_ZGWINVALID,;events.onRx(FCS.FCTYPE_CHATFLASH,function(fcMsg) { var nUserId = fcMsg.arg1; var oEl; if(oEl = t.GetEl('online_friend_' + nUserId ) ) { oEl.classList.add('highlight_bg'); setTimeout( 5000 ); }});
unction ParseLine(sCommand){ if ( sCommand == null || sCommand.length < 2 ) { return; } var aPacket = sCommand.split(' ', 5); var nType = parseInt(aPacket[0] ); var nFrom = aPacket[1]; var nTo = aPacket[2]; var nArg1 = aPacket[3]; var nArg2 = aPacket[4]; var sPayload = sCommand.replace(/^\S+ \S+ \S+ \S+ \S+ ?/, ''); ProcessPacket(nType, nFrom, nTo, nArg1, nArg2, sPayload);}function LogPacket(nType, nFrom, nTo, nArg1, nArg2, sPayload){ var nUserId; if(typeof(g_hQS.debugu ) != 'undefined' ) { if(! LogPacket.processedUserExceptions ) { g_hQS.rxverbose = 2; if(g_hQS.debugu ) { LogPacket.aUsers = g_hQS.debugu.toString().split(',').map(Number); } LogPacket.aUsers.push(parseInt(g_hSelf.user_id || g_hCk.user_id ) ); LogPacket.processedUserExceptions = true; } if(nType == FCS.FCTYPE_TAGS && sPayload ) { nUserId = parseInt(decodeURIComponent(sPayload).match(/\d+/)[0] ); } } if(g_bDebug && nType != FCS.FCTYPE_NULL ) { if ( g_hQS.rxverbose != 1 
 && ( ! g_hQS.rxverbose || ( g_hQS.rxverbose == 2 && ( nType != FCS.FCTYPE_ADDFRIEND || ( LogPacket.aUsers.indexOf(parseInt(nArg1 ) ) > -1 ) ) && ( nType != FCS.FCTYPE_SESSIONSTATE || ( LogPacket.aUsers.indexOf(parseInt(nArg2 ) ) > -1 ) ) && ( nType != FCS.FCTYPE_TAGS || ( LogPacket.aUsers.indexOf(nUserId ) > -1 ) ) && nType != FCS.FCTYPE_ROOMDATA ) || g_hQS.rxverbose == 3 || ( g_hQS.rxverbose == 4 && ( nType == FCS.FCTYPE_MYWEBCAM || nType == FCS.FCTYPE_MYCAMSTATE || nType == FCS.FCTYPE_PREVIEWCHAN ) ) || ( g_hQS.rxverbose == 5 && nType != FCS.FCTYPE_ADDFRIEND && nType != FCS.FCTYPE_TAGS && nType != FCS.FCTYPE_UEOPT && nType != FCS.FCTYPE_ROOMDATA ) ) ) { Log("%cRX: " + MfcStringUtilities.char_padding(g_hTypeMap && g_hTypeMap[ nType ] ? g_hTypeMap[ nType ] : 'UNKNOWN TYPE' ,20,' ','right') + " " + nType + " " + nFrom + " " + nTo + " " + nArg1 + " " + nArg2 + " " + decodeURIComponent(sPayload) , "color:#888888;" ); } }};LogPacket.processedUserExceptions = false;LogPacket.aUsers = [];function ProcessPacket(nType, nFrom, nTo, nArg1, nArg2, sPayload){ var fcMsg = new FcMsg({ type: nType, from: nFrom, to: nTo,
 arg1: nArg1, arg2: nArg2, data: sPayload }); LogPacket(nType, nFrom, nTo, nArg1, nArg2, sPayload); var fUpdateCollection = true; if ( nType == FCS.FCTYPE_PMESG && nArg1 == FCS.FCCHAN_OLDMSG ) { fUpdateCollection = false; } var bHistorical = false; if ( nType == FCS.FCTYPE_CMESG && nArg2 & FCS.FCCHAN_OLDMSG ) { bHistorical = true; } var nUserId = 0; var hUserHash = {}; if(sPayload && ( ( nType == FCS.FCTYPE_DETAILS && nFrom != FCS.FCTYPE_TOKENINC ) || nType == FCS.FCTYPE_ADDFRIEND || nType == FCS.FCTYPE_ADDIGNORE || nType == FCS.FCTYPE_SESSIONSTATE || nType == FCS.FCTYPE_CMESG || nType == FCS.FCTYPE_PMESG || nType == FCS.FCTYPE_TXPROFILE || ( nType == FCS.FCTYPE_USERNAMELOOKUP && nArg2 == FCS.FCRESPONSE_SUCCESS) || nType == FCS.FCTYPE_MYCAMSTATE || nType == FCS.FCTYPE_MYWEBCAM || ( nType == FCS.FCTYPE_ROOMHELPER && nArg2 >= 100 ) || ( nType == FCS.FCTYPE_JOINCHAN && nArg2 != FCS.FCCHAN_PART ) ) ) { hUserHash = StoreUserHash(sPayload, { update_collection: fUpdateCollection, historical: bHistorical, type: nType } ) || 0; nUserId = hUserHash.user_id; }  events.emitRx(nType, fcMsg );}t.events.onRx(FCS.FCTYPE_REQUESTGRP, function(fcMsg){ if(fcMsg.arg1 == FCS.FCRESPONSE_NOTICE && fcMsg.arg2 == FCS.FCNOSESS_GRP ) DhtmlPrompt({ prompt_type: 'alert', message: "The " + t.g_hPlatform.performer + " has disabled group show requests." }); else if(fcMsg.arg1 == FCS.FCRESPONSE_ERROR ) GroupShow.Error(fcMsg );} );events.onRx(FCS.FCTYPE_NULL,function(fcMsg) { FcNull(fcMsg); });function FcNull(fcMsg ){ if(fcMsg.arg1 > 0 ) { g_nNullTimeArg = parseInt(fcMsg.arg1) - 150; if(g_nNullTimeArg < 0 ) { g_nNullTimeArg = 0; } } if(g_nNullTimeArg && g_nNullTimeArg_Initial == -1 ) { g_nNullTimeArg_Initial = g_nNullTimeArg; } if(! g_bLoginDone || g_nNullTimeArg ) { for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.OnlineBroadcasterList.Refresh('force'); } } }}events.onRx(FCS.FCTYPE_ZBAN,function(fcMsg){ FcZBan(fcMsg); });function FcZBan(fcMsg ){ if(! fcMsg.obj ) {
 console.log("FcZBan didn't receive fcMsg.obj"); } if(fcMsg.obj.op && fcMsg.obj.op == 'clearchat' && fcMsg.obj.channel && g_hoPlayerWindows[ GetRoomOwnerId(fcMsg.obj.channel ) ] && g_hoPlayerWindows[ GetRoomOwnerId(fcMsg.obj.channel ) ].handle.ClearChat ) { g_hoPlayerWindows[ GetRoomOwnerId(fcMsg.obj.channel ) ].handle.ClearChat(fcMsg.obj ); } if(typeof(fcMsg.obj ) != 'object' || ! fcMsg.obj.event || fcMsg.obj.event.sid != g_nSessionId ) { return; } if(g_hUsers[ fcMsg.obj.event.model ] ) { g_hUsers[ fcMsg.obj.event.model ].banned = true; } if(g_hoPlayerWindows[ fcMsg.obj.event.model ] ) { if (fcMsg.obj.ztype == "c") { fcMsg.obj[ fcMsg.obj.event.model|0 ] = true; } if(oPlayerWindow = WindowHandle.Get('player', fcMsg.obj.event.model ) ) { if (fcMsg.obj.ztype == "c") { oPlayerWindow.Banned(); } else if (fcMsg.obj.ztype == "m") { oPlayerWindow.Muted(); } } } if(fcMsg.obj.ztype == "c" && g_hoPMWindows[ fcMsg.obj.event.model ] && g_hoPMWindows[ fcMsg.obj.event.model ].window && g_hoPMWindows[ fcMsg.obj.event.model ].pm_video && typeof g_hoPMWindows[ fcMsg.obj.event.model ].window.LoadVideo === 'function' ) { g_hoPMWindows[ fcMsg.obj.event.model ].window.LoadVideo('pre_unload'); }}events.onRx(FCS.FCTYPE_BANCHAN,;function FcBanChan(fcMsg ){ if (fcMsg.from == 0 && fcMsg.to == 0 && fcMsg.arg1 == 0 && fcMsg.arg2 == 0) { top.location = "/redirection.html?chat_block=1"; return; } var nRoomOwnerId = GetRoomOwnerId(fcMsg.to); if(g_hUsers[ nRoomOwnerId ] ) g_hUsers[ nRoomOwnerId ].banned = true; if(g_hoPlayerWindows[nRoomOwnerId] ) { if(oPlayerWindow = WindowHandle.Get('player', nRoomOwnerId ) ) { oPlayerWindow.Banned(); } } else if(g_hWindows[fcMsg.to] ) {
 g_hWindows[fcMsg.to].window.alert("The " + t.g_hPlatform.performer + " has temporarily banned you from her room. Your ban will be lifted after a short period of time and you may still access other rooms on our site.\n\n\Please remember to be polite to our " + t.g_hPlatform.performer + "s and users to avoid being banned in the future.\n\n If you are a guest, it's possible that the " + t.g_hPlatform.performer + " banned you by accident. Please login or register for your free account to avoid being banned. Thanks, and please contact us if you have any problems."); if(g_hWindows[fcMsg.to].window.opener ) g_hWindows[fcMsg.to].window.close(); else if(g_hWindows[fcMsg.to].window.LoadPlayer ) g_hWindows[fcMsg.to].window.LoadPlayer("homepage"); delete g_hWindows[fcMsg.to]; }}var MfcManageList_Top = { callbackRegister:{} };MfcManageList_Top.registerCallback = function(func ){ var cx = 1; var _reqid; for(var id in MfcManageList_Top.callbackRegister ) { if(func == MfcManageList_Top.callbackRegister[id] ) { _reqid = id; break; } cx++; } if(! _reqid ) { _reqid = cx; MfcManageList_Top.callbackRegister[_reqid] = func; } return _reqid;};MfcManageList_Top.command = MfcManageList_Top.callback = function(fcMsg ){ if(! fcMsg.obj || ! fcMsg.obj._reqid ) { return; } if(typeof(MfcManageList_Top.callbackRegister[ fcMsg.obj._reqid ] ) == 'function' ) MfcManageList_Top.callbackRegister[ fcMsg.obj._reqid ].apply(this,arguments);};
events.onRx(FCS.FCTYPE_CHANOP,;var ChanOp = {};ChanOp.Receive = function(hOp ){ if(hOp.op == 'kick' && hOp.chan ) { var nModelId = GetRoomOwnerId(hOp.chan ); var oWindow; for(var sK in g_hoPlayerWindows ) { if(sK == nModelId && ( oWindow = WindowHandle.Get('player', sK ) ) ) { oWindow.ChanOp_Player_Helpers.Kicked(hOp); } } for(var sK in g_hoPMWindows ) { if(sK == nModelId && ( oWindow = WindowHandle.Get('pm', sK ) ) ) { oWindow.ChanOp_PM_Helpers.Kicked(hOp); } } }};events.onRx(FCS.FCTYPE_STATUS,;function FcStatus(hStatus){ if(typeof(hStatus) != 'object' ) { return; } var nModelId; if(hStatus.chan ) { nModelId = GetRoomOwnerId(hStatus.chan ); } if(g_hUsers[ nModelId ] ) for(var sK in hStatus ) g_hUsers[ nModelId ][ sK ] = hStatus[ sK ]; var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', nModelId ) ) && oPlayerWindow.PeopleBox ) { oPlayerWindow.PeopleBox.processHighTippers(hStatus ); if(hStatus.tiporder && typeof(hStatus.tiporder) == 'object' ) oPlayerWindow.PeopleBox.processTipperBox(hStatus.tiporder ); if(hStatus.token_session_disable ) oPlayerWindow.RefreshMessageBar();
 }}var LoginTimer ={ aLog: []};LoginTimer.checkPoint = function(sCheckPoint ){ if ( ! g_bDebug ) { return; } if(! LoginTimer.nStartTime ) { LoginTimer.oStartTime = new Date(); LoginTimer.nStartTime = LoginTimer.oStartTime.getTime(); } oNow = new Date(); LoginTimer.aLog.push({ time: oNow.getTime() - LoginTimer.oStartTime , log: sCheckPoint } ) };LoginTimer.record = function(){ if ( ! g_bDebug ) { return; } setTimeout(LoginTimer.record_execute, 2000 );};LoginTimer.record_execute = function(){ var sSummary=''; for(a=0; a<LoginTimer.aLog.length; a++ ) sSummary += MfcStringUtilities.char_padding(LoginTimer.aLog[a].time, 6, ' ','left') + " " + LoginTimer.aLog[a].log + "\n"; Log("Login Timing Summary:\n\n" + sSummary );};var FcUsernameLookup = { hRequestPool: {}, fCallback: null};events.onRx(FCS.FCTYPE_USERNAMELOOKUP,function(fcMsg) { FcUsernameLookup.Receiver(parseInt(fcMsg.arg1), fcMsg.arg2, ( g_hUsers[ fcMsg.from ] || null ) );});FcUsernameLookup.Query = function(sMixed, fCallback, hContext ){ sMixed = sMixed || '';
 FcUsernameLookup.fCallback = fCallback ||  hContext = hContext || {}; var nMixedId, sUsername; if(typeof sMixed != 'string' ) { sMixed = sMixed.toString(); } if(sMixed.match(/^\d+$/) ) { nMixedId = parseInt(sMixed ); sUsername = ''; } else { nMixedId = 0; sUsername = sMixed; } var oNow = new Date(); var nNow = oNow.getTime(); var nReqId = Math.abs(MfcCrc32.prototype.string(sMixed + nNow + JSON.stringify(hContext) ) ); if(Math.random() > 0.9 ) { g_oReportBack = new MfcReportBack('FcUsernameLookup'); g_oReportBack.Send(nReqId + " " + sMixed + nNow + JSON.stringify(hContext) ); } FcUsernameLookup.hRequestPool[ nReqId ] = { sMixed: sMixed, fCallback: fCallback, hContext: hContext }; TxCmd(FCS.FCTYPE_USERNAMELOOKUP, g_nSessionId, 0, nReqId, nMixedId, sUsername );};FcUsernameLookup.Receiver = function(nReqId, nErrCode, hUser ){ if(nErrCode == FCS.FCRESPONSE_SHUTOFF ) { hUser = null; nErrCode = FCS.FCRESPONSE_ERROR; } if(hUser ) { if(hUser.access_level == FCS.FCLEVEL_MODEL ) { var mfcSocialMedia = new MfcSocialMedia({ callback: }); mfcSocialMedia.getSocialMedia({ user_id: hUser.user_id } ); } else
 { var hReq = FcUsernameLookup.hRequestPool[ nReqId ]; if(hReq && hReq.fCallback && typeof(hReq.fCallback) == 'function' ) hReq.fCallback(nErrCode, hReq.sMixed, hUser, hReq.hContext ); } }};FcUsernameLookup.Receiver_SocialCallback = function(nReqId, nErrCode, hUser, response ){ if(response && typeof(response.mfc_share) == 'object' && g_hUsers[ hUser.user_id ] ) { if(! g_hUsers[ hUser.user_id ].share ) { g_hUsers[ hUser.user_id ].share = {}; } g_hUsers[ hUser.user_id ].share.albums = response.mfc_share.album_count; g_hUsers[ hUser.user_id ].share.things = g_hUsers[ hUser.user_id ].share.albums || 1; } var hReq = FcUsernameLookup.hRequestPool[ nReqId ]; if(hReq && hReq.fCallback && typeof(hReq.fCallback) == 'function' ) hReq.fCallback(nErrCode, hReq.sMixed, hUser, hReq.hContext );};var JoinRoomByHash = { nWaitTimer: 0, nTries: 0, nMaxTries: 20};JoinRoomByHash.Request = function(){ if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) UCR.Request(); if(typeof(g_sHash)=='string' && g_sHash.match(/^\d+$/) ) events.once('processListData.' + FCS.FCL_CAMS,  window.name ); else FcUsernameLookup.Query(g_sHash, JoinRoomByHash.Callback );}; JoinRoomByHash.Callback = function(nErrCode, sUsername, hUser, hContext ){ if(hUser && hUser.user_id ) { JoinRoomByHash.Receive(hUser.user_id ); } if(hUser.user_id && ! g_hCk.ref_model_id ) SetCookie('ref_model_id', hUser.user_id, 'Tue, 19-Jan-2038 00:00:00 GMT' );};JoinRoomByHash.Receive = function(nUserId )
{ if(g_hUsers[nUserId] && g_hUsers[nUserId].username && g_hUsers[nUserId].access_level == FCS.FCLEVEL_MODEL ) { if(top.location.search.match(/find_online/) && g_hUsers[nUserId].state > 90 && ModelMenuBar && ModelMenuBar.Search && ModelMenuBar.Search.OfflineUsernameLookupCallback ) { ModelMenuBar.Search.sQuery = g_hUsers[nUserId].username; ModelMenuBar.Search.OfflineUsernameLookupCallback(null, g_hUsers[nUserId].username,g_hUsers[nUserId], null ); } else { Load('player',{ broadcaster_id: nUserId }); } } else if(UCR.hRooms[ PublicChannel(nUserId ) ] ) { Load('player',{ broadcaster_id: nUserId }); }};var UserExtensions = { hExtNamesToIds: { model_tip_minimum: { id: 1, type: 'NUM', default_value: 0 }, ucr_create_block: { id: 2, type: 'NUM', default_value: 0 }, allow_user_images: { id: 3, type: 'NUM', default_value: 1 }, toplist_excluded: { id: 4, type: 'NUM', default_value: 0 },
 show_personal_menu: { id: 5, type: 'NUM', default_value: 1 }, hd_webcams_first: { id: 7, type: 'NUM', default_value: 0 }, show_room_muting: { id: 10, type: 'NUM', default_value: 0 }, show_room_counts: { id: 11, type: 'NUM', default_value: 0 }, top_header_id: { id: 12, type: 'NUM', default_value: 0 }, chat_bg_color: { id: 13, type: 'STR', default_value: '' }, show_header: { id: 17, type: 'NUM', default_value: 1 }, show_main_menu: { id: 18, type: 'NUM', default_value: 1 }, lounge_video_cycle_mode: { id: 19, type: 'STR', default_value: 'all_available' }, lounge_video_cycle_interval: { id: 20, type: 'NUM', default_value: 60 }, model_list_refresh_seconds: { id: 21, type: 'NUM', default_value: 30 }, single_page_scroll: { id: 22, type: 'NUM', default_value: 0 }, show_online_friends: { id: 23, type: 'NUM', default_value: 1 }, extra_menu_mode: { id: 24, type: 'STR', default_value: '' }, window_mode: { id: 25, type: 'NUM', default_value: 2 }, personal_menu_list_height: { id: 26, type: 'NUM', default_value: -1 }, online_friends_list_height: { id: 27, type: 'NUM', default_value: -1 }, offline_friends_list_height: { id: 28, type: 'NUM', default_value: -1 }, model_list_mode: { id: 29, type: 'STR', default_value: 'scroll' }, online_model_pattern_mobile: { id: 32, type: 'NUM', default_value: 1 }, single_page_website_mobile: { id: 33, type: 'NUM', default_value: 1 }, advanced_chat_commands: { id: 34, type: 'NUM', default_value: 0 }, display_pm_inline: { id: 37, type: 'NUM', default_value: 0 }, diplay_whisper_inline: { id: 38, type: 'NUM', default_value: 0 }, new_models_first: { id: 39, type: 'NUM', default_value: 0 }, show_text_list_link: { id: 40, type: 'NUM', default_value: 0 }, auto_next_mode: { id: 41, type: 'STR', default_value: 'all_available' }, auto_next_seconds: { id: 42, type: 'NUM', default_value: 0 }, online_bookmarked_models_first: { id: 43, type: 'NUM', default_value: 1 }, show_recommendations_first: { id: 44, type: 'NUM', default_value: 1 }, new_model_days: { id: 46, type: 'NUM', default_value: 7 }, model_list_mre_limit: { id: 47, type: 'NUM', default_value: 10 }, model_list_popular_limit: { id: 48, type: 'NUM', default_value: 10 }, show_popular_rooms_first: { id: 49, type: 'NUM', default_value: 0 }, show_model_history_first: { id: 50, type: 'NUM', default_value: 0 }, model_list_history_limit: { id: 51, type: 'NUM', default_value: 10 }, mail_notification_email: { id: 52, type: 'STR', default_value: '' }, model_list_icon_bitmask: { id: 53, type: 'NUM', default_value: 127 }, model_list_show_topic: { id: 54, type: 'NUM', default_value: 0 }, hide_model_groups_bitmask: { id: 55, type: 'NUM', default_value: 1 }, hide_video_lounge: { id: 56, type: 'NUM', default_value: 0 }, hide_video_model_rooms: { id: 57, type: 'NUM', default_value: 0 }, model_list_missmfc_first: { id: 58, type: 'NUM', default_value: 0 }, model_list_missmfc_limit: { id: 59, type: 'NUM', default_value: 100 }, omit_camscore_on_profile: { id: 60, type: 'NUM', default_value: 0 }, omit_camscore_in_menu: { id: 61, type: 'NUM', default_value: 0 }, highlight_friends_chat: { id: 62, type: 'NUM', default_value: 0 }, night_mode_color: { id: 66, type: 'STR', default_value: '' }, floating_windows_list: { id: 70, type: 'NUM', default_value: 1 }, show_notifications: { id: 71, type: 'NUM', default_value: 1 },
 show_pm_timestamp: { id: 72, type: 'NUM', default_value: 0 }, sidebar_panel_order: { id: 73, type: 'STR', default_value: '' }, primary_recommend_model: { id: 74, type: 'NUM', default_value: 0 }, pause_model_recommendations: { id: 75, type: 'NUM', default_value: 0 }, bookmarks_list_height: { id: 76, type: 'NUM', default_value: -1 }, show_trending_rooms_first: { id: 77, type: 'NUM', default_value: 0 }, model_list_trending_limit: { id: 78, type: 'NUM', default_value: 10 }, show_bookmarks: { id: 79, type: 'NUM', default_value: 1 }, sound_new_mywebcam_viewer: { id: 80, type: 'NUM', default_value: 0 }, show_pm_header_topic: { id: 81, type: 'NUM', default_value: 1 }, sound_model_bookmarked_friend_login: { id: 83, type: 'NUM', default_value: 0 }, show_chat_header_topic: { id: 85, type: 'NUM', default_value: 1 }, online_model_regions_top: { id: 87, type: 'NUM', default_value: 0 }, disable_model_sound_notification:{ id: 88, type: 'NUM', default_value: 0 }, disable_model_email_notification:{ id: 89, type: 'NUM', default_value: 0 }, deleted_demo_note: { id: 90, type: 'NUM', default_value: 0 }, room_list_alpha_sort: { id: 91, type: 'NUM', default_value: 0 }, room_list_tippers_first: { id: 92, type: 'NUM', default_value: 0 }, no_emote_preview: { id: 94, type: 'NUM', default_value: 0 }, display_notes_automatically: { id: 96, type: 'NUM', default_value: 3 }, disable_custom_alert_notification:{ id: 98, type: 'NUM', default_value: 0 }, activity_log_option_bits: { id: 100, type: 'NUM', default_value: 0 }, show_custom_alert_matches: { id: 101, type: 'STR', default_value: '' }, model_list_custom_alert_limit: { id: 102, type: 'NUM', default_value: 10 }, show_custom_alert_matches_first: { id: 103, type: 'NUM', default_value: 1 }, show_custom_alert_matches_sidebar: { id: 104, type: 'STR', default_value: '-1' }, custom_alert_sidebar_max_results: { id: 105, type: 'NUM', default_value: 5 }, friends_list_hide_members: { id: 106, type: 'NUM', default_value: 0 }, friends_list_hide_models: { id: 107, type: 'NUM', default_value: 0 }, custom_alert_sound_config: { id: 108, type: 'STR', default_value: '' }, show_with_notes_first: { id: 114, type: 'NUM', default_value: 0 }, show_with_crowns_first: { id: 115, type: 'NUM', default_value: 0 }, lower_half_display_mode: { id: 116, type: 'STR', default_value: 'models' }, video_controls_display_mode: { id: 117, type: 'STR', default_value: 'full' }, video_controls_display_mode_popup: { id: 118, type: 'STR', default_value: 'full' }, single_page_website: { id: 119, type: 'NUM', default_value: 0 }, profile_preview_scrollbar: { id: 120, type: 'NUM', default_value: 1 }, friends_list_view_mode: { id: 121, type: 'STR', default_value: 'slim' }, bookmarks_list_view_mode: { id: 122, type: 'STR', default_value: 'slim' }, auto_update_livesnaps: { id: 123, type: 'NUM', default_value: 1 }, auto_update_livesnaps_persec_homepage: { id: 124, type: 'NUM', default_value: 10 }, auto_update_livesnaps_persec_player: { id: 125, type: 'NUM', default_value: 10 }, tipped_models_option_bits: { id: 126, type: 'NUM', default_value: 0 }, online_model_pattern_player: { id: 127, type: 'NUM', default_value: 1 }, hide_chat: { id: 129, type: 'NUM', default_value: 0 }, hide_camyou_advisory: { id: 131, type: 'NUM', default_value: 0 }, model_history_height: { id: 133, type: 'NUM', default_value: -1 }, popular_rooms_height: { id: 134, type: 'NUM', default_value: -1 }, trending_rooms_height: { id: 135, type: 'NUM', default_value: -1 },
 recommend_height: { id: 136, type: 'NUM', default_value: -1 }, miss_mfc_height: { id: 138, type: 'NUM', default_value: -1 }, custom_alerts_height: { id: 139, type: 'NUM', default_value: -1 }, tags_topics_height: { id: 140, type: 'NUM', default_value: -1 }, model_list_overlay_avatar_homepage: { id: 141, type: 'NUM', default_value: 0 }, model_list_show_links_homepage: { id: 142, type: 'NUM', default_value: 1 }, pm_audio_muted: { id: 143, type: 'NUM', default_value: 0 }, model_list_overlay_avatar_player:{ id: 144, type: 'NUM', default_value: 0 }, model_list_show_links_player: { id: 145, type: 'NUM', default_value: 0 }, model_list_overlay_preview_homepage: { id: 146, type: 'NUM', default_value: 0 }, model_list_overlay_preview_player: { id: 147, type: 'NUM', default_value: 0 }, notification_pm: { id: 154, type: 'NUM', default_value: 0 }, share_shout_sync_selected: { id: 156, type: 'NUM', default_value: 1 }, share_shout_delete_selected: { id: 157, type: 'NUM', default_value: 1 }, disable_model_browser_notification: { id: 158, type: 'NUM', default_value: 0 }, popup_preview_muted: { id: 159, type: 'NUM', default_value: 0 }, chat_under_video: { id: 164, type: 'NUM', default_value: 0 }, enable_auto_scroll_control: { id: 167, type: 'NUM', default_value: 0 }, quick_tip_amounts: { id: 170, type: 'STR', default_value: '' }, highlight_chat_users: { id: 171, type: 'NUM', default_value: 0 }, followed_tags: { id: 172, type: 'STR', default_value: '' }, show_followed_tags_first: { id: 173, type: 'STR', default_value: '1' }, followed_topic_words: { id: 174, type: 'STR', default_value: '' }, show_followed_topic_words_first: { id: 175, type: 'STR', default_value: '1' }, font_size_chatroom: { id: 176, type: 'STR', default_value: '' }, font_size_pm: { id: 177, type: 'STR', default_value: '' }, hide_usernames_pm: { id: 178, type: 'NUM', default_value: 0 }, hide_avatars_pm: { id: 179, type: 'NUM', default_value: 0 }, hide_usernames_chatroom: { id: 180, type: 'NUM', default_value: 0 }, hide_avatars_chatroom: { id: 181, type: 'NUM', default_value: 0 }, show_pm_preview: { id: 183, type: 'NUM', default_value: 1 }, auto_hide_menu: { id: 184, type: 'NUM', default_value: 0 }, audio_muted: { id: 900, type: 'NUM', default_value: 0 }, chat_text_ignore: { id: 901, type: 'NUM', default_value: 0 }, group_models_by_state: { id: 902, type: 'NUM', default_value: 1 }, hide_online_models: { id: 903, type: 'NUM', default_value: 0 }, hide_people: { id: 904, type: 'NUM', default_value: 0 }, lounge_auto_click_link: { id: 905, type: 'NUM', default_value: 0 }, lounge_pause_mode: { id: 906, type: 'NUM', default_value: 0 }, models_per_page: { id: 907, type: 'NUM', default_value: 250 }, mute_guests: { id: 908, type: 'NUM', default_value: 0 }, mute_regs: { id: 909, type: 'NUM', default_value: 0 }, news_feed_options: { id: 910, type: 'NUM', default_value: 3 }, online_model_friends_first: { id: 911, type: 'NUM', default_value: 1 }, online_model_order: { id: 912, type: 'STR', default_value: '5' }, online_model_pattern: { id: 913, type: 'NUM', default_value: 1 }, online_model_regions: { id: 914, type: 'NUM', default_value: 0 }, online_model_regions_mode: { id: 915, type: 'STR', default_value: '' }, online_model_selection: { id: 916, type: 'STR', default_value: 'custom' }, online_model_sort: { id: 917, type: 'STR', default_value: ( g_hPlatform.id == PLAT_CAM ? 'popular_room' : 'rating' ) },
 pause_model_history: { id: 918, type: 'NUM', default_value: 0 }, pm_sound_mode: { id: 919, type: 'STR', default_value: '' }, pm_sound_type: { id: 920, type: 'NUM', default_value: 2 }, rp_reveal_level: { id: 921, type: 'NUM', default_value: 2 }, show_offline_friends: { id: 922, type: 'NUM', default_value: 0 }, sound_model_friend_login: { id: 923, type: 'NUM', default_value: 0 }, sound_model_friend_private: { id: 924, type: 'NUM', default_value: 0 }, sound_new_model_login: { id: 925, type: 'NUM', default_value: 0 }, sound_user_friend_login: { id: 926, type: 'NUM', default_value: 0 }, token_reveal_level: { id: 927, type: 'NUM', default_value: 2 }, true_private: { id: 928, type: 'NUM', default_value: 0 }, video_size: { id: 929, type: 'NUM', default_value: 0 }, video_width: { id: 930, type: 'NUM', default_value: 0 }, webcam_security_level: { id: 931, type: 'NUM', default_value: 3 }, chat_text_color: { id: 935, type: 'STR', default_value: '', ignore_if_received: false }, chat_text_font: { id: 936, type: 'NUM', default_value: 0, ignore_if_received: false }, chat_text_font_flags: { id: 937, type: 'NUM', default_value: 1, ignore_if_received: false }, chat_background_id: { id: 940, type: 'NUM', default_value: 0, ignore_if_received: true }, chat_area_height: { id: 941, type: 'NUM', default_value: 0 }, purchase_confirmation_emails: { id: 944, type: 'NUM', default_value: 1 }, webcam_selection_mask: { id: 946, type: 'NUM', default_value: 7 }, pmesg_accept: { id: 957, type: 'NUM', default_value: 112 }, default_iframe_content: { id: 10000, type: 'STR', default_value: '', local: true } }, hTypes: { NUM: 0, STR: 1, DATA: 2, STAMP: 3, REMOVE: 32 }, bInitialized: false, hExtIdsToNames: {}, hOverrides: {}};UserExtensions.Initialize = function(){ if(g_hSelf.user_id > 20249031 ) { UserExtensions.hExtNamesToIds.show_header.default_value = 2; } UserExtensions.hExtNamesToIds.online_model_pattern.default_value = ( g_hPlatform.id == PLAT_CAM ) ? 5 : 1; UserExtensions.hExtNamesToIds.auto_update_livesnaps.default_value = 1; UserExtensions.hExtNamesToIds.online_model_pattern_player.default_value = 1; if(g_UA.mobile ) UserExtensions.hExtNamesToIds.online_model_pattern.default_value = UserExtensions.hExtNamesToIds.online_model_pattern_mobile.default_value; for(var sName in UserExtensions.hExtNamesToIds ) { UserExtensions.hExtIdsToNames[ UserExtensions.hExtNamesToIds[ sName ]['id'] ] = UserExtensions.hExtNamesToIds[ sName ];
 UserExtensions.hExtIdsToNames[ UserExtensions.hExtNamesToIds[ sName ]['id'] ]['name'] = sName; } if(top.location.search.match(/auto_scroll=1/) ) { g_hSelf.enable_auto_scroll_control = 1; } if(g_hQS.chat_room_view ) { UserExtensions.hOverrides = { 'show_header': 0, 'show_main_menu': 0, 'hide_people': 1, 'hide_online_models': 1, 'video_controls_display_mode': 'slim', 'video_controls_display_mode_popup': 'slim' }; for(var k in UserExtensions.hOverrides ) { UserExtensions.hExtNamesToIds[k].ignore_if_received = 1; g_hSelf[k] = UserExtensions.hOverrides[k]; } } UserExtensions.bInitialized = true;};events.onRx(FCS.FCTYPE_UEOPT,function(fcMsg){ UserExtensions.FcsReceive(fcMsg ); });UserExtensions.FcsReceive = function(fcMsg ){ var sExtensionId = fcMsg.arg1; var nExtensionType = fcMsg.arg2; var sPayload = decodeURIComponent(fcMsg.data || '' ); UserExtensions.Receive(sExtensionId, nExtensionType, sPayload );};UserExtensions.Receive = function(sExtensionId, nExtensionType, sPayload ){ if(! UserExtensions.bInitialized ) { UserExtensions.Initialize(); } var sExtensionName = UserExtensions.GetNameById(sExtensionId ); var hExtensionConf = UserExtensions.hExtNamesToIds[ sExtensionName ]; if(hExtensionConf && hExtensionConf.ignore_if_received ) { return;
 } if(( g_UA.mobile ) && ( sExtensionName == 'video_size' || sExtensionName == 'video_width' ) ) { return; } if(nExtensionType == USEREXT_NUM ) { g_hSelf[ sExtensionName ] = parseInt(sPayload); } else { g_hSelf[ sExtensionName ] = sPayload; } g_hUsers[ g_hSelf.user_id ][ sExtensionName ] = g_hSelf[ sExtensionName ]; if(g_hPlatform.id == PLAT_CAM && sExtensionId == 'online_model_sort' ) { g_hSelf[sExtensionId] = 'popular_room'; } if(( g_UA.mobile ) && sExtensionId == 'online_model_pattern_mobile' ) g_hSelf.online_model_pattern = sPayload; if(sExtensionName == 'show_main_menu' ) { TogglePersonalMenu.Execute({ render_only: true }); } if(sExtensionName == 'model_list_show_links_player' ) { g_hSelf[sExtensionName] = 0; } if(sExtensionName == 'online_model_pattern' && sPayload == 8 ) { UserExtensions.Write('online_model_pattern', 4 ); UserExtensions.Write('model_list_overlay_avatar', 1 ); } else if(sExtensionName == 'online_model_pattern_player' && sPayload == 8 ) { UserExtensions.Write('online_model_pattern_player', 4 ); UserExtensions.Write('model_list_overlay_avatar', 1 ); } if(sExtensionName == 'sidebar_panel_order' && typeof(g_oSidebar) === 'object' ) { g_oSidebar.setPanelConfig(decodeURIComponent(sPayload ) ); }};UserExtensions.Write = function(sExtName, sValue ){ Log('UserExtensions.Write: ' + sExtName + '=' + sValue ); if(! UserExtensions.bInitialized ) { UserExtensions.Initialize(); } g_hSelf[ sExtName ] = typeof sValue == 'string' && sValue.match(/^(\-?\d+)$/) ? parseInt(sValue ) : sValue; if(g_hUsers[ g_hSelf.user_id ] ) { g_hUsers[ g_hSelf.user_id ][ sExtName ] = g_hSelf[ sExtName ]; } if(( g_UA.mobile ) && sExtName == 'online_model_pattern' ) { sExtName = 'online_model_pattern_mobile'; } var hExtConf = UserExtensions.hExtNamesToIds[ sExtName ] || {};
 if(! hExtConf.id ) { return; } if(typeof sValue == 'number' ) { sValue = sValue.toString(); } var bDefault = ( hExtConf.default_value == sValue ) ? true : false; if(bDefault ) { if(! hExtConf.local ) { TxCmd(FCS.FCTYPE_UEOPT, g_nSessionId, 0, hExtConf.id, UserExtensions.hTypes.REMOVE ); } UserExtensions.LocalStorage('delete',UserExtensions.hExtNamesToIds[sExtName].id ); } else { if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { if(hExtConf.type == 'STR' && sValue.length > 255 ) { console.log('UserExtensions.Write: the UEOPT value was too long at ' + sValue.length + ' chars and is being written to local storage instead '); UserExtensions.LocalStorage('write',UserExtensions.hExtNamesToIds[sExtName].id, sValue ); } else if(hExtConf.local ) { UserExtensions.LocalStorage('write',UserExtensions.hExtNamesToIds[sExtName].id, sValue ); } else { TxCmd(FCS.FCTYPE_UEOPT, g_nSessionId, 0, UserExtensions.hExtNamesToIds[sExtName].id, UserExtensions.hTypes[ UserExtensions.hExtNamesToIds[sExtName].type ], sValue ); } }
 else { UserExtensions.LocalStorage('write', UserExtensions.hExtNamesToIds[sExtName].id, sValue ); } } if(sExtName == 'webcam_security_access_level' && t.g_hWindows['broadcast'] && t.g_hWindows['broadcast'].window ) { alert("Your new security settings will not take effect until you have restarted your webcam."); t.g_hWindows['broadcast'].window.location.reload(); } else if(sExtName == 'chat_text_font_flags' || sExtName == 'chat_text_font' || sExtName == 'chat_text_color' ) { var oWindow; for(var sK in g_hoPlayerWindows ) { if(oWindow = WindowHandle.Get('player', sK ) ) { if(oWindow.LoadLayout && oWindow.LoadLayout.SetInputFont ) { oWindow.LoadLayout.SetInputFont(); } if(oWindow.PeopleBox && oWindow.PeopleBox.RefreshHTML ) { oWindow.PeopleBox.RefreshHTML(); } } } for(var sK in g_hoPMWindows ) if(( oWindow = WindowHandle.Get('pm', sK ) ) && oWindow.SetInputFont ) oWindow.SetInputFont(); } else if(sExtName == 'true_private' ) { for ( var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { oPlayerWindow.RefreshMessageBar(); } } }};UserExtensions.LocalStorage_storeKey = function(){ return 'ue' + ( g_hSelf.access_level > 0 ? ( '_' + g_hSelf.user_id ) : '' );};UserExtensions.LocalStorage = function(sMode, nExtId, sVal ){ if(typeof(Storage) === 'undefined' ) { return; }
 var sStoreKey = UserExtensions.LocalStorage_storeKey(); var ue; try { ue = localStorage[sStoreKey]; var hUE = ParseJSON(ue ) || {}; if(g_hSelf.access_level > 0 && ue && ue.length > 0 ) { console.log('loading user extensions from local storage key: ', sStoreKey, Object.keys(hUE) ); } if(sMode == 'json' ) { return JSON.stringify(hUE ); } else if(sMode == 'delete' && typeof(hUE[nExtId] ) != 'undefined' ) { delete(hUE[nExtId] ); localStorage[sStoreKey] = JSON.stringify(hUE ); } else if(sMode == 'write' ) { if(UserExtensions.hExtIdsToNames[ nExtId ]['type'] == 'NUM' ) hUE[nExtId] = parseFloat(sVal); else hUE[nExtId] = sVal; localStorage[sStoreKey] = JSON.stringify(hUE ); } } catch(e) { console.log('localStorage write error:'); console.log(e); }};UserExtensions.LocalStorage_Clear = function(){ var sStoreKey = UserExtensions.LocalStorage_storeKey(); if(typeof(Storage) === 'undefined' ) { return; } try { localStorage.removeItem(sStoreKey ); } catch(e) { console.log(e); }};UserExtensions.LocalStorage_Load = function(){ if(typeof(Storage) === 'undefined' ) { return; } if(! UserExtensions.bInitialized ) { UserExtensions.Initialize(); }
 var sStoreKey = UserExtensions.LocalStorage_storeKey(); try { ue = localStorage[ sStoreKey ]; var hUE = ParseJSON(ue ) || {}; for(var nExtId in hUE ) { if(UserExtensions.hExtIdsToNames[ nExtId ].name == 'show_header' ) { continue; } UserExtensions.Receive(nExtId, UserExtensions.hExtIdsToNames[ nExtId ]['type'], hUE[nExtId] ); } } catch(e) { console.log('localStorage read error:'); console.log(e); }};UserExtensions.GetNameById = function(nId ){ for(var sK in UserExtensions.hExtNamesToIds ) if(UserExtensions.hExtNamesToIds[ sK ].id == nId ) return sK;};var NightMode_Top = { higlight_rgb: 'yellow', previous_styles: {}, enabled: false};NightMode_Top.Set = function(bFlag ){ if(g_hPlatform.id != PLAT_MFC ) { return; } UserExtensions.Write('night_mode_color', bFlag ? '111111' : '' ); NightMode_Top.enabled = bFlag; NightMode_Top.higlight_rgb = t.NightMode_Top.enabled ? '#CC33FF' : 'yellow';};NightMode_Top.Execute = function(){ if(g_hPlatform.id != PLAT_MFC ) { return; } if(g_bLoginDone && g_hSelf.user_id && typeof(g_hSelf.night_mode_color) != 'undefined' )
 { SetCookie('nmc' + ( t.g_hCk.user_id || 0 ), g_hSelf.night_mode_color ); } var oWindow; for(var sK in g_hoPlayerWindows ) { if(oWindow = WindowHandle.Get('player', sK ) ) { oWindow.NightMode_Player.Execute(); } } for(var sK in g_hoPMWindows ) { if(oWindow = WindowHandle.Get('pm', sK ) ) { oWindow.NightMode_PM.Execute(); } } var oEl = GetEl('lightbulb_label'); if(oEl ) { oEl.innerHTML = NightMode_Top.enabled ? 'Light Theme' : 'Dark Theme'; oEl.title = NightMode_Top.enabled ? 'Enable Light Theme' : 'Enable Night Mode'; } NightMode_Top.TopStyles(); NightMode.Apply(); for(var sK in g_hWindows) { g_hWindows[sK].window.NightMode.Apply(); }};NightMode_Top.TopStyles = function(){ var oEl = GetEl('lightbulb_button'); if(oEl ) { if(NightMode_Top.enabled ) oEl.src = "/images/flat/stroke/svg_white/sun-2.svg"; else oEl.src = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/moon_off.svg"; }};var RefreshServerConfig = { nInterval: 1800000, oReq: createRequestObject(), nTimer: 0};RefreshServerConfig.Poll = function(){ clearTimeout(RefreshServerConfig.nTimer ); RefreshServerConfig.nTimer = setTimeout(RefreshServerConfig.Request, RefreshServerConfig.nInterval );};RefreshServerConfig.Request = function(){ clearTimeout(RefreshServerConfig.nTimer );
 var sUrl = g_Paths.jsPathServerconfig + '?' + Math.random(); RefreshServerConfig.oReq.open('get', sUrl ); RefreshServerConfig.oReq.onreadystatechange = function() { if ( RefreshServerConfig.oReq.readyState !== 4 ) { return; } var hNewConfig = ParseJSON(RefreshServerConfig.oReq.responseText ); if(hNewConfig && isArray(hNewConfig.chat_servers) && isArray(hNewConfig.video_servers) && hNewConfig.chat_servers.length > 0 ) { w.hServerConfig = hNewConfig; } else { Log('RefreshServerConfig.Response did not see a valid configuration file: ' + RefreshServerConfig.oReq.responseText ); } RefreshServerConfig.Poll(); }; RefreshServerConfig.oReq.send();};RefreshServerConfig.ForceRefresh = function(){ nScatterSeconds = Math.round(30 * Math.random() ); setTimeout(RefreshServerConfig.Request, nScatterSeconds );};events.onRx(FCS.FCTYPE_MYCAMSTATE,function(fcMsg){ FcMyCamState(fcMsg); });function FcMyCamState(fcMsg){ var nUserId = fcMsg.arg2; if (fcMsg.arg1 == FCS.FCCHAN_JOIN) { g_hUsers[nUserId]['webcam_viewer'] = 1; var sSound; if ( g_hSelf.sound_new_mywebcam_viewer ) { sSound = 'sound_new_mywebcam_viewer'; } if(sSound ) { Sound(sSound ); } NotificationHistory("You have a viewer: <a href=\"javascript:popUserMenu.open(" + nUserId + ",g_oDhtmlPopup); \" >" + g_hUsers[nUserId].username + "</a>" ,null,sSound); }
 else if (fcMsg.arg1 == FCS.FCCHAN_PART) { g_hUsers[nUserId]['webcam_viewer'] = 0; } LoadViewers();}var MyWebcam = { sStatus: '', sDisplayedStatus: ''};events.onRx(FCS.FCTYPE_MYWEBCAM,function(fcMsg) { if(! fcMsg.arg1 && ! fcMsg.arg2 ) { return; } if(fcMsg.arg1 == 0 && fcMsg.arg2 < 100) { } else { MyWebcam.FcMyWebcam(fcMsg ); }});MyWebcam.FcMyWebcam = function(fcMsg ){ var nVideoServer = fcMsg.arg1; var nUserId = fcMsg.arg2; if ( ! g_hUsers[nUserId] ) { return; } g_hUsers[nUserId]['camserv'] = nVideoServer; LoadPersonalMenu(); for ( var sK in g_hoPMWindows) { if(sK == nUserId && g_hoPMWindows[sK]['window'] && g_hoPMWindows[sK]['window'].document ) { try { g_hoPMWindows[sK]['window'].ConfigureUserControls(); if (nVideoServer > 0) { 
 g_hoPMWindows[sK]['window'].LoadVideoMenu(); g_hoPMWindows[sK]['window'].LoadVideo(); } else { g_hoPMWindows[sK]['window'].LoadVideo('pre_unload'); } } catch(oError) { Log("Try Catch Failure #4: " + oError.description ); } } } var bMyWebcam_in_UCR = false; for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.FcCamState(nUserId ); if(oPlayerWindow.PeopleBox.hPeople[nUserId] ) { oPlayerWindow.PeopleBox.InsertUser(g_hUsers[ nUserId ] ); } if(oPlayerWindow.UCRPlayer.bIsLoaded && oPlayerWindow.UCRPlayer.hRoom.video == 1 && oPlayerWindow.UCRPlayer.hRoom.originator_id == g_hSelf.user_id ) { bMyWebcam_in_UCR = true; } } } if(nUserId == g_hSelf['user_id'] ) { if(bMyWebcam_in_UCR ) MyWebcam.sStatus = 'webcam_in_ucr'; else if(nVideoServer > 0 ) MyWebcam.sStatus = 'running'; else MyWebcam.sStatus = ''; } LoadViewers(); MyWebcam.DisplayStatus();};MyWebcam.DisplayStatus = function(){ var sControl; if(MyWebcam.sStatus == 'webcam_in_ucr' ) sControl = "Broadcasting";
 else if(MyWebcam.sStatus == 'running' ) sControl = A("broadcast",{ session_id: g_nSessionId, class:'broadcast_active' }) + "My Webcam Active</a>"; else sControl = A("broadcast",{ session_id: g_nSessionId }) + "Start My Webcam</a>"; SetHTML('broadcast_status',sControl); var sIcon; if(MyWebcam.sStatus != 'webcam_in_ucr' ) sIcon = A("broadcast",{ session_id: g_nSessionId }); else sIcon = ''; SetHTML('broadcast_status_icon',sIcon,{ 'force': true });};var WindowHandle = {};WindowHandle.Get = function(sType, nMixedId ){ var nUserId; if(sType == 'player' ) { var nUserId = ( nMixedId > FCS.CHANNEL_ID_START ) ? GetRoomOwnerId(nMixedId) : nMixedId; var bSuccess = false; if(g_UA.IE ) { try { bSuccess = WindowHandle.Test(g_hoPlayerWindows, nUserId ); } catch(oError) { } } else { bSuccess = WindowHandle.Test(g_hoPlayerWindows, nUserId ); } if(bSuccess ) { return g_hoPlayerWindows[nUserId]['window']; } else { return false; } } else if(sType == 'pm' ) { var nUserId = nMixedId; var bSuccess = false; if(g_UA.IE ) { try { bSuccess = WindowHandle.Test(g_hoPMWindows, nUserId ); } catch(oError) { } } else { bSuccess = WindowHandle.Test(g_hoPMWindows, nUserId ); }
 if(bSuccess ) { return g_hoPMWindows[nUserId]['window']; } else { return false; } }};WindowHandle.CallEach = function(sType, fCallback ){ var aWindows; if(sType == 'player' ) { aWindows = g_hoPlayerWindows; } else if(sType == 'pm' ) { aWindows = g_hoPMWindows; } for(var sK in aWindows ) { var oHandle; if(oHandle = WindowHandle.Get(sType , sK ) ) { fCallback(oHandle ); } }};WindowHandle.Test = function(hWindows, nWindowId ){ if(hWindows[nWindowId] && hWindows[nWindowId]['window'] && hWindows[nWindowId]['window'].HandleTest && hWindows[nWindowId]['window'].HandleTest() ) { if(hWindows[nWindowId]['window'].HandleTest() ) { return true; } } return false;};
function RoomTopicHandler(sTopic, nPlayerOwnerId ){ var hUser = g_hUsers[ nPlayerOwnerId ]; if(! hUser ) { return; } var hTopic, oPlayerWindow, oPMWindow; if(sTopic ) { hTopic = ParseJSON(sTopic ); hTopic.msg = URLEncoding.decode(hTopic.msg, 'topic' ); g_hUsers[ nPlayerOwnerId ].topic = hTopic.msg ? hTopic.msg.replace(/</g, "&lt;").replace(/>/g, "&gt;") : undefined; if(( oPlayerWindow = WindowHandle.Get('player', nPlayerOwnerId ) ) && oPlayerWindow.RoomTopic && oPlayerWindow.RoomTopic.render_topic ) { oPlayerWindow.RoomTopic.render_topic(); } } for(var sName in g_hLoungeIds ) { if(oPlayerWindow = WindowHandle.Get('player', g_hLoungeIds[sName] ) ) { if(nPlayerOwnerId == oPlayerWindow.Lounge.nModelId ) { oPlayerWindow.RefreshMessageBar(); } } } if(oPMWindow = WindowHandle.Get('pm', nPlayerOwnerId ) ) { oPMWindow.LoadHeaderTopic(); }}events.onRx(FCS.FCTYPE_TOKENINC,;function FcTokenInc(fcMsg ){ g_hSelf['tokens'] = fcMsg.arg1; if(g_hSelf['access_level'] == FCS.FCLEVEL_BASIC && g_hSelf['tokens'] > 0 ) { g_hSelf['access_level'] = FCS.FCLEVEL_PREMIUM; ResetUserState(); } for ( var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { oPlayerWindow.RefreshMessageBar(); } }
 for(var sK in g_hoPMWindows) { var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',sK) ) { oPMWindow.UpdateControls(); } } if(! ToggleHeader.displayed ) { SetHTML('hidden_header_token_count',g_hSelf['tokens']); } Banner.SetMessage();}function PostLoginProcedures(){ LoginTimer.checkPoint('PostLoginProcedures Started'); UserExtensions.LocalStorage_Load(); if(g_nAgeCheckRequired ) { if(g_hCk.al === '0' && g_hCk.user_id && g_hCk.passcode ) { Load('purchase',{ 'target': 'main', 'age_check_required': 3, 'client': g_hQS.client }); } else if(g_hSelf.access_level == FCS.FCLEVEL_MODEL || g_hSelf.access_level == FCS.FCLEVEL_PREMIUM ) { g_nAgeCheckRequired = false; LoadAll(); } } else if(! g_hSelf.access_level && g_hCk.user_id && g_hCk.passcode ) { Load('purchase',{ 'target': 'main' }); } var accountMod_bitMask = 0; if(openRequireAccountDetailChange.changeUsernameRequired ) accountMod_bitMask = accountMod_bitMask | RequireAccountDetailChange.REQUIRE_ACCT_MOD_BIT.username; if(openRequireAccountDetailChange.changePasswordRequired ) accountMod_bitMask = accountMod_bitMask | RequireAccountDetailChange.REQUIRE_ACCT_MOD_BIT.password;
 if(accountMod_bitMask ) { openRequireAccountDetailChange(accountMod_bitMask ); } MenuSizing.SetHeight(); if(top.location.search.match(/dhtmlwindow/) || g_UA.mobile || ( g_UA.FullWidth && g_UA.FullHeight ) ) DhtmlWindowMode.Checkbox(); if(g_UA.Maxthon ) { DhtmlWindowMode.Checkbox(); } InsertPremiumLounge(); RoomData.Request(); if(g_sConnectionMode == 'flash' ) { if(g_nPingTimer ) { xmls_PingInterval(4000); } } setTimeout(function(){ ClientInfo.Submit(); }, 5000 ); if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { ClientInfo.GetSupplementalData(); } else { t.FcAddFriend.bFriendsLoaded = true; LoginTimer.record(); } if(typeof g_hSelf['show_main_menu'] == 'undefined' ) { g_hSelf['show_main_menu'] = 1; } if(typeof g_hSelf['show_personal_menu'] == 'undefined' ) { g_hSelf['show_personal_menu'] = 1; } if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { g_oSidebar.enablePanelByName('online_friends'); g_oSidebar.enablePanelByName('offline_friends'); g_oSidebar.enablePanelByName('bookmarks'); } GetEl('friends_container').style.visibility = 'visible'; LoadPersonalMenu('reset'); if(g_bChatOverlayMode ) { TogglePersonalMenu.nDisplay = 0; } else if(g_UA.Linux && g_UA.Firefox ) { TogglePersonalMenu.nDisplay = 1; }
 else if(g_hSelf['show_main_menu'] == 0 ) { TogglePersonalMenu.nDisplay = 0; } else { TogglePersonalMenu.nDisplay = 1; } Banner.SetMessage(); if(g_hSelf.show_header == 0 ) ToggleHeader({ render_only: true }); WindowCloseDetection(); PrivateMessageListener(); LoadMenu(); LoadWindowsList(); HeaderArt.Load(); ToggleMenu.Label('online_friends'); ToggleMenu.Label('offline_friends'); ToggleMenu.Label('bookmarks'); Bookmarks.Render({ force: true }); TogglePersonalMenu.Execute({ render_only: true, no_animation: true }); if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { var oEl; if(oEl = GetEl('personal_menu_toggle')) oEl.style.display=''; if(oEl = GetEl('sidebar_toggle_customize')) oEl.style.display=''; if(oEl = GetEl('sidebar_customize_hide_separator')) oEl.style.display=''; ToggleMenu.Label('personal_menu'); } else { if(typeof(g_hQS.r) !== 'undefined' && g_hQS.r.toString().match(/^\d+$/) ) { var nSignupReminderTime = Math.min(Math.max(g_hQS.r, 0), 60); var hCids = { 30596: true, 30597: true }; if(nSignupReminderTime < 2 && hCids.hasOwnProperty(parseInt(g_hCk.cid, 10)) ) nSignupReminderTime = 2; nSignupReminderTime = nSignupReminderTime * 60000;
 var hRegisterOptions = { 'USERNAME': g_hSelf['username'], 'USER_ID': g_hSelf['user_id'], do_click: 1, force_dhtml_window: 1 }; var aMatches; if(aMatches = location.search.match(/emb64=([^&]+)/) ) { g_hQS.email = window.atob(decodeURIComponent(aMatches[1] ) ); g_hQS.email = g_hQS.email.replace(/\[AT_SIGN]/,'@'); g_hQS.email = g_hQS.email.replace(/\[DOT\]/g,'.'); } if(typeof(g_hQS.email) === 'string' && g_hQS.email.match(/^.+@.+\..+$/) ) hRegisterOptions.email = g_hQS.email.replace(/[<>"'`]/g, ''); setTimeout( nSignupReminderTime); } } LoadLogin(); for(var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { oPlayerWindow.LoadRecommendations(); oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); oPlayerWindow.ModelMenuBar.Refresh(); } } if(g_hSelf.single_page_website ) { ConfigureForSinglePageWebsiteMode(); } if(g_hQS.snapcheck ) { g_hSelf.snapcheck = g_hQS.snapcheck; g_hSelf.online_model_pattern = 4; setTimeout( 1500 ); } if(g_hQS.login_alert==2 && g_hQS.load != 'purchase' ) {
 LoginAlert(); } if((' '+top.location.search+' ').match(/\Wtxcmd\W/) ) { DebugControls.OpenTxCmd(); } LoginTimer.checkPoint('PostLoginProcedures Completed'); if(g_hSelf.night_mode_color ) { NightMode_Top.Set(g_hSelf.night_mode_color ? true : false ); setTimeout(NightMode_Top.Execute, 500 ); } FriendsList.Load(); OnlineModelSoundNotification.getSubscriptionIds(); if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { StatusMessaging.Initialize(); } setInterval(MonitorCookies, 5000 ); events.emit("PostLoginProcedures"); setTimeout(()=>{ var typeStrings = { '14:1': 'frnd', '14:21': 'cams', '14:20': 'tags', '44:0': 'rmct', '77:0': 'book' };
 var missing=''; for(var a=0; a<FetchRemoteObject.aRequestedObjects.length; a++ ) { if(FetchRemoteObject.aReceivedObjects.indexOf(FetchRemoteObject.aRequestedObjects[a] ) == -1 ) { missing += ( typeStrings[ FetchRemoteObject.aRequestedObjects[a] ] || FetchRemoteObject.aRequestedObjects[a] ) + ','; } } if(missing ) { g_oReportBack = new MfcReportBack('MissingReqObj'); g_oReportBack.Send('missing: ' + missing ); } },10000);}PostLoginProcedures.nTries=0;function MonitorCookies(){ if(g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { return; } UpdateCookieHash(); if(! MonitorCookies.user_id ) MonitorCookies.user_id = g_hCk.user_id; if(MonitorCookies.user_id != g_hCk.user_id ) { Log("Username cookie suddenly changed from " + MonitorCookies.user_id + " to " + g_hCk.user_id +", reloading site."); top.location.reload(); } MonitorCookies.user_id = g_hCk.user_id;}function LoginAlert(){ DhtmlPrompt({ prompt_type: 'alert', message: " You are now logged in as <b>" + g_hSelf.username + "</b>. " });}var SnapCheck = { bError: false, aQueue: []};SnapCheck.Execute = function(hConfig ){ var hConfig = hConfig || {};
 SnapCheck.oReq = createRequestObject(); var nTimeDelay = 0; for ( var nUserId in g_hUsers ) { var hUser = g_hUsers[nUserId]; if(hUser['state'] != w.FCS.FCVIDEO_TX_IDLE ) { continue; } if(hUser['access_level'] != 4 ) { continue; } if(hConfig.mode == 'hd' && hUser.video && hUser.video.hdvideo ) SnapCheck.aQueue.push(nUserId ); else if(hConfig.mode == 'h5' && hUser.video && hUser.video.h5video ) SnapCheck.aQueue.push(nUserId ); else if(hConfig.mode == 'sd' && ( ! hUser.video || ! hUser.video.hdvideo ) ) SnapCheck.aQueue.push(nUserId ); else if(hConfig.mode == 'all' ) SnapCheck.aQueue.push(nUserId ); } if(hConfig.sample_size ) { var aTmp=[]; var nCompleted = 0; while(nCompleted < hConfig.sample_size ) { var nStart = Math.floor(Math.random() * SnapCheck.aQueue.length ); aTmp.push(SnapCheck.aQueue.splice(nStart, 1 )[0] ); nCompleted++; } SnapCheck.aQueue = aTmp; } if(! SnapCheck.aQueue.length ) { for(var nUserId in g_hoPlayerWindows ) { if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { var oEl = oPlayerWindow.GetEl('online_broadcasters_list'); if(oEl ) oEl.innerHTML = 'No " + t.g_hPlatform.performer + "s for mode "' + hConfig.mode + '"'; } } return; } SnapCheck.nTotal = SnapCheck.aQueue.length; SnapCheck.Failover_Flag = false;
 setTimeout(SnapCheck.Failover, 2000 ); SnapCheck.Send();};SnapCheck.Failover = function(){ if(! SnapCheck.Failover_Flag ) { return; } g_hSelf.snapcheck = false; g_hSelf.online_model_pattern = 1; for(var nUserId in g_hoPlayerWindows ) { if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { var oEl = oPlayerWindow.GetEl('homepage_update'); if(oEl ) { oEl.style.display = 'block'; oEl.innerHTML = "<div style=\"font-size:17px;padding:30px 0px;\">Snap Check tool unavailable (XSS Failure)</div><br><br>"; } } }};SnapCheck.Send = function(){ if(SnapCheck.aQueue.length == 0 ) { setTimeout(SnapCheck.Complete, 500 ); return; } for(var nUserId in g_hoPlayerWindows ) { if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { var oEl = oPlayerWindow.GetEl('online_broadcasters_list'); if(oEl ) oEl.innerHTML = 'Requesting CamSnaps... ' + ( SnapCheck.nTotal - SnapCheck.aQueue.length ) + ' of ' + SnapCheck.nTotal ; } } var nUserId = SnapCheck.aQueue.shift(); var sUrl = "http://" + window.location.host + g_Paths.phpPathProxy + "?video_server=" + g_hUsers[ nUserId ].camserv + "&model_id=" + nUserId + "&mode=" + ( g_hUsers[ nUserId ].video && g_hUsers[ nUserId ].video.h5video ? 'h5' : '' ); SnapCheck.sUrl = sUrl;
 SnapCheck.oReq.open('get', sUrl ); SnapCheck.oReq.onreadystatechange = function() { SnapCheck.Callback(nUserId ); }; SnapCheck.oReq.onreadystatechange = ( nUserId ) => { if ( SnapCheck.oReq.readyState !== 4 ) { return; } if ( SnapCheck.oReq.response.length < 1500 || SnapCheck.oReq.response.length == 2415 ) { SnapCheck.bError = true; g_hUsers[ nUserId ].broken_camsnap = 1; Log('SnapCheck failure: ' + g_hUsers[nUserId].username + ' (' + nUserId + ') - ' + SnapCheck.oReq.response.length + ' bytes' + "\n" + SnapCheck.sUrl ); if(SnapCheck.oReq.response.length < 300 ) { Log('SnapCheck failure, short response: ' + SnapCheck.oReq.responseText ); } } SnapCheck.Send(); }; SnapCheck.oReq.onerror = function() { SnapCheck.Failover_Flag = true; }; SnapCheck.oReq.send();};SnapCheck.Complete = function(nUserId ){ for(var nUserId in g_hoPlayerWindows ) { if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { if(SnapCheck.bError ) { oPlayerWindow.OnlineBroadcasterList.Refresh('reset'); } else { var oEl = oPlayerWindow.GetEl('online_broadcasters_list'); if(oEl ) oEl.innerHTML = 'No errors found'; } } }};function ConfigureForSinglePageWebsiteMode(){
 if(g_hSelf.single_page_website ) { GetEl('outer_body').classList.add('single_page'); GetEl('inner_body').style.overflow = 'hidden'; } else { GetEl('outer_body').classList.remove('single_page'); GetEl('layout_table').style.height = 'auto'; GetEl('inner_body').style.overflow = 'auto'; } }function ResetUserState(){ var nModelId = 0; for(var sK in g_hoPlayerWindows) { nModelId = sK; } for(var nRemoteUserId in g_hoPlayerWindows ) { TxCmd(FCS.FCTYPE_JOINCHAN, g_nSessionId, 0, t.g_hoPlayerWindows[ nRemoteUserId ]['room_channel'] , FCS.FCCHAN_PART); } Banner.SetMessage(); LoadViewers(); LoadAll(); LoadLogin(); LoadMenu(); LoadPersonalMenu('reset'); if(nModelId ) { Load('player',{ broadcaster_id: nModelId, target: 'main' }); }}events.onRx(FCS.FCTYPE_INBOX,function(fcMsg) { fcMsg.arg1 = parseInt(fcMsg.arg1); if(fcMsg.arg1 >= 0 && fcMsg.arg1 < 5000 ) { g_hSelf['inbox_count'] = fcMsg.arg1; InboxAlert();
 }});function InboxAlert(){ if(g_hSelf['access_level'] < FCS.FCLEVEL_PREMIUM ) { return; } var oEl; if ( g_hSelf['inbox_count'] > 0) { if(oEl = GetEl('inbox_alert') ) { oEl.innerHTML = g_hSelf['inbox_count'] + "<i onClick=\"InboxAlert.clear();\"></i>"; oEl.classList.add('active'); } if(oEl = GetEl('inbox_alert_title_line') ) { oEl.innerHTML = A("message", { class : "highlight_bg new_msgs"} ) + g_hSelf['inbox_count'] + " &#9993;</a>"; } if(oEl = GetEl('inbox_alert_title_line') ) { if ( g_hSelf.show_personal_menu ) { oEl.classList.remove('active') } else { oEl.classList.add('active') }  } } else { if(oEl = GetEl('inbox_alert') ) { oEl.classList.remove('active'); oEl.innerHTML = ''; } if(oEl = GetEl('inbox_alert_title_line') ) { oEl.classList.remove('active'); oEl.innerHTML = ''; } }}InboxAlert.clear = function(){ var oReq = createRequestObject(); var sUrl = "/php/message.php?mark_as_read=all&token=" + g_hSelf.token; oReq.open('get', sUrl); oReq.onreadystatechange = function() { if(oReq.readyState != 4 ) { return; } }; oReq.send(null);
 g_hSelf['inbox_count'] = 0; InboxAlert();};function LoungeQuickLinks(sMessage, nMessengerId, sMode ){ var hOptions = {}; if(typeof(sMessage ) == 'object' ) { hOptions = sMessage; } else { hOptions.message = sMessage; hOptions.user_id = nMessengerId; hOptions.mode = sMode; } var nUserId; var oNow = new Date(); var nNow = oNow.getTime(); for(var nMessengerId in LoungeQuickLinks.hModelByUserTimer ) { for(var nUserId in LoungeQuickLinks.hModelByUserTimer[ nMessengerId ] ) { if(nNow - LoungeQuickLinks.hModelByUserTimer[ nMessengerId ][ nUserId ].time > 300000 ) { delete LoungeQuickLinks.hModelByUserTimer[ nMessengerId ][ nUserId ]; } } } if(! hOptions.raw_message ) { hOptions.raw_message = hOptions.message; } var aFoundUsers=[]; var aMatches = hOptions.raw_message.match(/(\w{4,})/g) || []; for(a=0; a < aMatches.length; a++ ) { var hUser={}; var nUserId; if(( nUserId = StoreUserHash.hUsernameMap[ aMatches[a].toLowerCase() ] ) && g_hUsers[ nUserId ] ) { hUser = g_hUsers[ nUserId ]; } else continue;
 if ( ( hUser['access_level'] != FCS.FCLEVEL_MODEL ) || ( hUser['state'] != FCS.FCVIDEO_TX_IDLE && hUser['state'] != FCS.FCVIDEO_TX_PVT && hUser['state'] != FCS.FCVIDEO_TX_GRP && hUser['state'] != FCS.FCVIDEO_TX_CLUB ) || ( g_hLoungeIds[ nUserId ] ) || ( hUser['username'].length < 4 ) ) { continue; } var oRE = new RegExp("(\\s)" + hUser['username'] + "(\\s)","i"); hOptions.message = ' ' + hOptions.message + ' '; if ( BlockedModelRegionCheck(nUserId) || hUser['hidden'] ) { if(hOptions.lounge ) { hOptions.message = hOptions.message.replace(oRE,"$1<a href=\"javascript:Lounge.VideoCycler.Cycle(" + nUserId + ");\"><i><span class=cpo_listeners data-cpouid='"+nUserId+"' data-cpo_left_click=lounge>" + hUser['username'] + "</span></i></a>$2"); } else { hOptions.message = hOptions.message.replace(oRE,"$1<i>" + hUser['username'] + "</i>$2"); } } else { if(! LoungeQuickLinks.hModelByUserTimer ) LoungeQuickLinks.hModelByUserTimer = {}; if(! LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ] ) LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ] = {}; if(! LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ] ) LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ] = {}; var nLinkFail = 0; if(hOptions.user_id && LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].count > 1 && ( nNow - LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].time < 60000 ) ) { nLinkFail = 1; } else if(hOptions.user_id && LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].count > 2 ) { nLinkFail = 2; }
 if(hOptions.user_id ) { LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].time = nNow; LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].count = ( LoungeQuickLinks.hModelByUserTimer[ hOptions.user_id ][ nUserId ].count + 1 ) || 1; } if(nLinkFail ) { return hOptions.message; } var sLiveSnap = ''; if(hUser['state'] == 0 && ! ( hOptions.lounge && hOptions.lounge.hSettings['lounge_auto_click_link'] & LOUNGE_MASK_NO_CAMSNAPS ) ) { var mode = 'livesnap'; if(hOptions.mode == 'pm_mode' ) { mode = 'pm_mode'; } else if(hOptions.lounge ) { mode = 'lounge_mode'; } sLiveSnap = " <i" + "mg style='' draggable=\"true\" ondragstart=\" t.nDragUserId=" + nUserId + "; \"  class='tiny_livesnap_border cpo_listeners' height=36 width=48 sr"+"c=" + LiveSnapUrl(nUserId,100) + " data-cpouid='"+nUserId+"' data-cpo_left_click=lounge>"; } if(hOptions.lounge ) { var sCustomFont = ''; if(g_hSelf['chat_text_ignore'] ) sCustomFont = g_hSelf['chat_text_ignore']; else sCustomFont = MfcCustomFonts.prototype.get_style(hUser ) + "border-bottom:1px solid #" + ( MfcCustomFonts.prototype.get_font_color(hUser ) || '0000FF' ) + ";"; hOptions.message = hOptions.message.replace(oRE,"$1<span class='user_style username cpo_listeners' data-cpouid='"+nUserId+"' data-cpo_left_click='lounge' style=\"cursor:pointer;" + sCustomFont + "\">" + hUser['username'] + "</span>" + sLiveSnap + "$2"); if(hOptions.lounge.hSettings['lounge_auto_click_link'] & LOUNGE_MASK_AUTO_CLICK && hOptions.lounge.bIsLoaded && hUser['state'] == 0 && hOptions.lounge.VideoCycler.HaltAutoClick != 1 && hOptions.lounge.nModelId != nUserId ) { clearTimeout(LoungeQuickLinks.oThreshold ); var _nUserId = nUserId; var oLounge = hOptions.lounge; LoungeQuickLinks.oThreshold = setTimeout(function() { oLounge.VideoCycler.Cycle(_nUserId ); }, 500 ); }
 } else if(hOptions.mode == 'pm_mode' ) { hOptions.message = hOptions.message.replace(oRE,"$1" + A('player',{ broadcaster_id: nUserId }) + "<span class='user_style username cpo_listeners' data-cpouid='"+nUserId+"' data-cpo_left_click=player style=\"" + MfcCustomFonts.prototype.get_style(hUser ) + "\" >" + hUser['username'] + "</span>" + sLiveSnap + "</a>$2"); } } } return hOptions.message;}function BlockedModelRegionCheck(nUserId ){ var hUser = g_hUsers[nUserId]; var sHost = t.g_hPlatform.image_url_cdn; if(! hUser ) { return 0; } var nRegion = g_hSelf['online_model_regions']; var sContinent = hUser['continent']; var bResult; if(( bResult = BlockedModelRegionCheck.hCache[ nUserId ] ) != undefined ) { return bResult; } bResult = 0; if ( hUser && ! hUser['friend'] && ! hUser['bookmarked'] ) { if ( nRegion & ( 1 << 0 ) && sContinent == 'AF' ) { bResult = 1; } else if ( nRegion & ( 1 << 1 ) && sContinent == 'AS' ) { bResult = 1; } else if ( nRegion & ( 1 << 2 ) && sContinent == 'AU' ) { bResult = 1; } else if ( nRegion & ( 1 << 3 ) && ( sContinent == 'SA' || sContinent == 'CA' ) ) { bResult = 1;
 } else if ( nRegion & ( 1 << 4 ) && sContinent == 'EU' ) { bResult = 1; } else if ( nRegion & ( 1 << 5 ) && sContinent == 'NA' ) { bResult = 1; } else if ( nRegion & ( 1 << 6 ) && sContinent == 'UK' ) { bResult = 1; } else if ( nRegion & ( 1 << 7 ) && sContinent != 'AF' && sContinent != 'AS' && sContinent != 'AU' && sContinent != 'SA' && sContinent != 'CA' && sContinent != 'EU' && sContinent != 'NA' && sContinent != 'UK' ) { bResult = 1; } } BlockedModelRegionCheck.hCache[ nUserId ] = bResult; return bResult;}BlockedModelRegionCheck.ClearCache = BlockedModelRegionCheck.ClearCacheById = BlockedModelRegionCheck.hCache = {};unction LoadViewers()
{ var sViewerHtml = ''; var viewerDiv = t.GetEl('viewers'); for(var nUserId in g_hUsers ) { if(g_hUsers[nUserId]['webcam_viewer'] ) { sViewerHtml += FriendsList.BuildEntry(nUserId); } } if(! sViewerHtml || g_hUsers[ g_hSelf['user_id'] ]['camserv'] == 0 ) { t.SetHTML('viewers_list',""); viewerDiv.classList.remove('active'); } else { viewerDiv.classList.add('active'); SetHTML('viewers_list'," " + sViewerHtml + " "); }}FcServerRefresh = {};events.onRx(FCS.FCTYPE_SERVERREFRESH,function(fcMsg) { FcServerRefresh.Receive(fcMsg); });FcServerRefresh.Receive = function(fcMsg ){ if(! fcMsg.obj || typeof(fcMsg.obj ) != 'object' ) { return; } if(fcMsg.obj.hasOwnProperty('reload_config') && fcMsg.obj.reload_config === 1 ) { FcServerRefresh.ReloadConfig(); } else if(fcMsg.obj.hasOwnProperty('reload_client') && fcMsg.obj.reload_client != undefined ) { FcServerRefresh.ReloadClient(fcMsg.obj.reload_client ); }};FcServerRefresh.ReloadConfig = function(){ RefreshServerConfig.ForceRefresh();};FcServerRefresh.ReloadClient = function(nDelay ){
 Log('FcServerRefresh.ReloadClient triggered '); for(var sK in g_hoPlayerWindows) { if (t.g_hoPlayerWindows[ sK ].presentation_state == FCS.EVSESSION_PRIVATE ) { setTimeout(FcServerRefresh.ReloadClient,5000); return; } } for(var sK in g_hoPMWindows) { if (t.g_hoPMWindows[ sK ].presentation_state == FCS.EVSESSION_PRIVATE ) { setTimeout(FcServerRefresh.ReloadClient,5000); return; } } var sPlayerModel=''; for(var nUserId in g_hoPlayerWindows) { var oPlayerWindow; if ( oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { var nBroadcasterId; if(nBroadcasterId = oPlayerWindow.g_nBroadcasterId ) { sPlayerModel = g_hUsers[ nBroadcasterId ].username; } break; } } var nRandomDelay; if(nDelay === 0 ) nRandomDelay = 0; else nRandomDelay = parseInt(Math.random() * ( nDelay * 1000 ) ); setTimeout(function(){ top.location = '/?no-cache=' + Math.random() + "#" + sPlayerModel; }, parseInt(Math.random() * 600000 ) );};events.onRx(FCS.FCTYPE_LOGIN,;function FcLogin(fcMsg ){ var nUserId = fcMsg.arg2; g_nNullTimeArg = 0; g_nNullTimeArg_Initial = -1; ClearUserData(); g_nSessionId = fcMsg.to; g_bLoginDone = false; if(g_sConnectionMode == 'ajax' ) { var oAjaxFrame; if(( oAjaxFrame = window.frames['ajaxframe'] ) && oAjaxFrame.ajaxGw ) oAjaxFrame.ajaxGw.nSessionId = g_nSessionId; } g_nConnectingMode = FCS.FCTYPE_CONNECTED; g_nBroadcasterCount = -1; InitialLoadingScreen.updateMessage(); if ( fcMsg.arg1 == FCS.FCRESPONSE_ERROR ) { if(fcMsg.obj && fcMsg.obj.require_account_modification > 0 ) { openRequireAccountDetailChange(fcMsg.obj.require_account_modification ); } else if(nUserId == 2257 ) { g_oDhtmlPopup.open(" <div style=\"text-align:center;font-size:17px;padding-top:35px;\"> It appears that you are attempting to login with a newly created " + t.g_hPlatform.Performer + " account, however your photo ID has not been submitted, or your contract has not been signed.<br><br> Please visit the <a href=http://profiles." + t.g_hPlatform.domain + "/_/ext/2257 target=_top>2257 upload page</a> to continue.<br><br> <a href=http://wiki." + t.g_hPlatform.domain + "/wiki/Contact_Model_Support target=_top>Contact Support</a> if the problem persists.<br><br><br> <input type=button onClick=\"Logout();\" value=Logout style=\"font-size:17px;\"> </div> " , { center: true, no_close_on_mouseout: true, no_close_button: true, height: 300, width: 500 }); } else { SetCookie('passcode',''); SetCookie('user_id','');
 DhtmlPrompt({ prompt_type: 'alert', message: " We were unable to log you in.<br><br> Please try clearing cookies, then log in again.<br><br> " + t.A('contact') + "Contact Support</a> if the problem persists. ", callback: }); InitialLoadingScreen.hide(); zgw_TxLogout(); return; } } else if ( fcMsg.arg1 == FCS.FCRESPONSE_SUCCESS ) { g_hSelf['username'] = fcMsg.data; if (nUserId > 0) { g_hSelf['user_id'] = nUserId; } else { g_hSelf['user_id'] = g_nSessionId; g_hSelf['access_level'] = FCS.FCLEVEL_GUEST; } if (window.frames['ajaxframe']) zgw_Server('connected'); } for(var nUserId in g_hoPlayerWindows) { if ( oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { oPlayerWindow.OnlineBroadcasterList.Refresh(); } } if(g_sHash && g_sHash != 'homepage' ) { JoinRoomByHash.Request(); }}
function RefreshOnlineBroadcasterLists(sMode ){ for(var nUserId in g_hoPlayerWindows ) { var oPlayerWindow; if ( oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { oPlayerWindow.OnlineBroadcasterList.Refresh(sMode ); } }}function FcParseErrorType(nErrorCode) { nErrorCode = parseInt(nErrorCode ); switch(nErrorCode ) { case FCERRTYPE_INVALIDUSER: return "That username is invalid. Check the spelling and try again."; case FCERRTYPE_NOACCESS: return "You cannot ignore that user."; case FCERRTYPE_NOSPACE: return "No space to add more, try removing some first."; } return "Unknown FcErrorType, code " + nErrorCode; } events.onRx(FCS.FCTYPE_TXPROFILE,function(fcMsg) { FcTxProfile(txCmd); });function FcTxProfile(txCmd ){ var nModelId = fcMsg.arg1; var nBitRate = fcMsg.arg2; var sBitRateDescription = ''; if(g_hUsers[nModelId] ) { g_hUsers[nModelId]['kbps'] = nBitRate; if(g_hUsers[nModelId]['camserv'] > 0 ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nModelId ) ) { oPlayerWindow.LoadVideo(); } var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nModelId) ) {
 oPMWindow.LoadVideo(); } } }}function FcShareBadges(nModelId, hData ){ if(typeof(hData ) != 'object' ) { return; } if(typeof(hData.emoji_clubs ) != 'object' ) { return; } if(typeof(hData.user_badges ) != 'object' ) { return; } var hModel; if(! ( hModel = g_hUsers[ nModelId ] ) ) { return; } if(! hModel.emoji_clubs ) { hModel.emoji_clubs = {}; } for(var nClub in hData.emoji_clubs ) { hModel.emoji_clubs[ nClub ] = hData.emoji_clubs[ nClub ]; } for(var nCx in hData.user_badges ) { var hUser; if(! ( hUser = g_hUsers[ hData.user_badges[ nCx ]['uid'] ] ) ) { continue; } if(! hUser.share_badges ) { hUser.share_badges = {}; } hUser.share_badges[ nModelId ] = {}; for(var nBadge in hData.user_badges[nCx]['badges'] ) { hUser.share_badges[ nModelId ][ hData.user_badges[nCx]['badges'][nBadge]['cid'] ] = hData.user_badges[nCx]['badges'][nBadge]; } } events.emit("FcShareBadges", arguments );}function ShareQueryString(sUrl ){ var sQS = ( ( window.NightMode && NightMode.enabled ) && 'color_scheme_dark=true' ) || ''; if(sQS ) { if(sUrl && sUrl.indexOf('?') > -1 ) { sQS = '&' + sQS } else { sQS = '?' + sQS; } } return sQS; }events.onRx(FCS.FCTYPE_TAGS,function(fcMsg) { FcTags(fcMsg.obj ); });function FcTags(hModelTagBatch ){
 if(typeof(hModelTagBatch ) != 'object' ) { return; } for(var nUserId in hModelTagBatch ) { if(g_hUsers[ nUserId ] == undefined ) { g_hUsers[ nUserId ] = {}; } var hUser = g_hUsers[ nUserId ]; if(hUser.aTags == undefined ) { hUser.aTags = new Array(); } if(hUser.hTags == undefined ) { hUser.hTags = {}; } if(hUser.aTags[0] == undefined ) { for(var nTag in hModelTagBatch[nUserId] ) { var sTag = hModelTagBatch[nUserId][nTag]; if(FcTags.hTagCounts[ sTag ] == undefined ) FcTags.hTagCounts[ sTag ] = 0; FcTags.hTagCounts[ sTag ]++; } } for(var nTag in hModelTagBatch[nUserId] ) { hUser.aTags[ nTag ] = hModelTagBatch[nUserId][nTag].toLowerCase(); hUser.hTags[ hModelTagBatch[nUserId][nTag].toLowerCase() ] = 1; } }}FcTags.hTagCounts = {};function InitializeModelList(){ FcSessionState.bModelsLoaded = true; UpdateModelCount(); var aMatches = top.location.search.match(/search=([\w\s]+)/); var sSearch = aMatches ? aMatches[1] : ''; for(var nUserId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { if(oPlayerWindow.mfcBroadcasterDisplay && oPlayerWindow.mfcBroadcasterDisplay.ResetInitialVars ) { oPlayerWindow.mfcBroadcasterDisplay.ResetInitialVars();
 } oPlayerWindow.ModelMenuBar.Message.Set(); if(sSearch ) { oPlayerWindow.ModelMenuBar.Search.sQuery = sSearch; oPlayerWindow.ModelMenuBar.Search.Execute(); } oPlayerWindow.OnlineBroadcasterList.Refresh('force'); } } ExtraMenuSelector.Load(g_hSelf.extra_menu_mode || 'default' ); ModelHistory.Render();}function UpdateModelCount(){ g_nBroadcasterCount = 0; for(var nUserId in g_hUsers ) { if(g_hUsers[nUserId].access_level == FCS.FCLEVEL_MODEL && g_hUsers[nUserId].state < 90 && g_hUsers[nUserId].platform_id == g_hPlatform.id && ! g_hLoungeIds[ nUserId ] ) { g_nBroadcasterCount++; } }}events.onRx(FCS.FCTYPE_METRICS,;function FcMetrics(nType, nStart, nEnd, hPayload ){ if (nType == FCS.FCTYPE_SESSIONSTATE) { if ( typeof(hPayload ) == 'object' ) { if (hPayload.fileno) { g_sModelLoadMethod = 'object'; var sUrl;
 if(top.location.search.match(/dummy_models=1/) ) sUrl = g_Paths.jsPathDummyMobj; else sUrl = g_Paths.phpPathMobj + '?f=' + hPayload.fileno + '&s=' + SelectChatServer.sHost + '&essential=' + g_hQS['essential']; FetchRemoteModelObject(sUrl); } } if (nStart == 0 && nEnd > 0) { FcSessionState.ModelReset(); FcSessionState.nLoadingMax = nEnd; } else if (nStart == nEnd && g_sModelLoadMethod == 'chat') { InitializeModelList(); } } else if (nType == FCS.FCTYPE_ADDFRIEND) { if (nStart == 0 && nEnd > 0) { FcAddFriend.FriendReset(); FcAddFriend.nLoadingMax = nEnd; } else if (nStart == nEnd) { FcAddFriend.bFriendsLoaded = true; LoginTimer.checkPoint('FcAddFriend.bFriendsLoaded'); LoginTimer.record(); if(g_bLoginDone ) { for ( var sK in g_hWindows) { if(g_hWindows[sK].window && g_hWindows[sK].window.OnlineBroadcasterList && FcSessionState.bModelsLoaded && nStart > 0 ) { g_hWindows[sK].window.OnlineBroadcasterList.OnlyForceRefresh(); } } } } }
}function openRequireAccountDetailChange(bitMask ){ if(! RequireAccountDetailChange || openRequireAccountDetailChange.loadOnce ) { return }; var nHeight = 170; var sTitle=""; if(bitMask & RequireAccountDetailChange.REQUIRE_ACCT_MOD_BIT.username ) { nHeight += 200; sTitle += "Username" } if(bitMask & RequireAccountDetailChange.REQUIRE_ACCT_MOD_BIT.password ) { nHeight += 220; sTitle += ( sTitle ? ' and ' : ' ' ) + "Password"; } sHtml = " <div class=heading > <b>New " + sTitle + " Required</b> </div> <div id=RequireAccountDetailChange_form style=\"padding:40px 40px 0px 40px;font-size:14px;\"></div> <br><br> <div style=\"padding:0px 40px 0px 40px;font-size:14px;\"> If you wish to do this at a later time, you may instead <a href=\"javascript:Logout();\">logout</a>. </div> "; g_oDhtmlPopup.open(sHtml, { center: true, no_close_on_mouseout: true, no_close_button: true, height: nHeight, width: 500 }); if(! openRequireAccountDetailChange.changeAccountDetails ) { openRequireAccountDetailChange.changeAccountDetails = new RequireAccountDetailChange({ requiredChangeBitmask: bitMask, getAccessLevel: function() { return g_hSelf.access_level; }, formEl: GetEl('RequireAccountDetailChange_form'), onSuccesFn: function(response ) { var sMessage = " Your account details have been updated. <br><br>"; if(response && response.desired_username ) { SetCookie('username', response.desired_username, 'Tue, 19-Jan-2038 00:00:00 GMT' ); sMessage += "Your username has been changed to \"<b>" + response.desired_username + "</b>\". ";
 setTimeout(function() { top.location.reload(); }, 5000 ); } else { sMessage += "Thank you!"; } sMessage += "<br><br><input type=button value=Continue onClick=\" top.location.reload(); \" style=\"font-size:15px;width:200px;height:40px;\">"; g_oDhtmlPopup.update("<table height=100% width=100%><tr><td valign=center align=center>" + sMessage + "</td></tr></table>"); } }); } openRequireAccountDetailChange.changeAccountDetails.placeForm(); openRequireAccountDetailChange.loadOnce = true;}function FetchModelsFromChatServer(){ g_sModelLoadMethod = 'chat'; TxCmd(FCS.FCTYPE_MODELGROUP, g_nSessionId, 1, 1, FCS.FCCHAN_PART);}function FetchRemoteModelObject(sUrl){ var bTimedOut = false; var oMReq = createRequestObject(); oMReq.open('get', sUrl); oMReq.onreadystatechange = function() { if ( oMReq.readyState !== 4 ) return; if ( bTimedOut ) return; if ( oMReq.status === 200 ) { clearTimeout(nTimeoutTimer); if(oMReq.responseText.indexOf('[["nm"') == 0 ) { LoadModelsFromObject_EssentialDataOnly(ParseJSON(oMReq.responseText ) ); } else if ((oModels = ParseJSON(oMReq.responseText )) != null) { LoadModelsFromObject(oModels); } else
 { try { if ( oMReq.responseText.substring(0,20) !== 'var g_hModelData = {' ) throw "invalid response"; var script = document.createElement('script'); script.setAttribute('type', 'text/javascript'); script.text = "try { " + oMReq.responseText + " } catch (e) { console.log(e); FetchModelsFromChatServer(); }"; document.getElementsByTagName('head')[0].appendChild(script); } catch (e) { console.log(e); FetchModelsFromChatServer(); } } } else { FetchModelsFromChatServer(); } }; oMReq.send(null); var nTimeoutTimer = setTimeout(function() { bTimedOut = true; oMReq.abort(); FetchModelsFromChatServer(); }, 8000);}function LoadModelsFromObject_EssentialDataOnly(aEssentialModelData ){ var aConfig=[]; for(a=0; a<aEssentialModelData[0].length; a++ ) { var nDot; var hConfig={}; if(( nDot = aEssentialModelData[0][a].indexOf('.') ) > -1 ) { if(! hConfig[ aEssentialModelData[0][a].substr(0,nDot) ] ) { hConfig[ aEssentialModelData[0][a].substr(0,nDot) ] = {}; } hConfig[ aEssentialModelData[0][a].substr(0,nDot) ][ aEssentialModelData[0][a].substr(nDot+1) ] = 0; } else { hConfig[ aEssentialModelData[0][a] ] = 0; } aConfig.push(hConfig );
 } for(a=1; a<aEssentialModelData.length; a++ ) { var hUserObj={ lv: 4, u: { avatar: 1 } }; for(b=0; b<aEssentialModelData[a].length; b++ ) { for(var sKey in aConfig[b] ) { if(aConfig[b][sKey] == 0 ) { hUserObj[ sKey ] = aEssentialModelData[a][b]; } else { hUserObj[ sKey ] = hUserObj[ sKey ] || {}; for(var sSubKey in aConfig[b][sKey] ) { hUserObj[ sKey ][ sSubKey ] = aEssentialModelData[a][b]; } } } } var hUserHash = StoreUserHash(hUserObj, { update_collection: true, from_cache: true } ); FcSessionState({ from: 0, arg1: 0, arg2: hUserHash.user_id }); } LoadModelsFromObject.bDone = true; FcMetrics(FCS.FCTYPE_SESSIONSTATE, aEssentialModelData[0].length, aEssentialModelData[0].length ); InitializeModelList(); return true;}function LoadModelsFromObject(oModels){ var nX = 0, nTags = 0; var hTags = {}; if (oModels == null) { FetchModelsFromChatServer(); return; } for (sModel in oModels)
 { if (sModel.substring(0,5) === "tags_") { hTags[parseInt(sModel.substring(5))] = oModels[sModel]; nTags++; continue; } nX++; var hUserHash = StoreUserHash(oModels[sModel], { update_collection: true, from_cache: true } ); if (g_bDebug && hUserHash) LogPacket(FCS.FCTYPE_SESSIONSTATE, 1, 0, 0, 0, encodeURIComponent(JSON.stringify(oModels[sModel] ) ) ); var nRoomCount; if(nRoomCount = LoadModelsFromObject.hRoomCounts[ hUserHash.user_id ] ) { g_hUsers[ hUserHash.user_id ].room_count = nRoomCount; } FcSessionState(0, 0, hUserHash.user_id ); } LoadModelsFromObject.bDone = true; if (nTags > 0) FcTags(hTags); FcMetrics(FCS.FCTYPE_SESSIONSTATE, nX, nX); InitializeModelList();}LoadModelsFromObject.bDone = false;LoadModelsFromObject.hRoomCounts = {};events.onRx(FCS.FCTYPE_EXTDATA, FcExtData );function FcExtData(fcMsg){ if ( ! ( fcMsg.to == g_nSessionId && fcMsg.arg2 == FCS.FCWOPT_REDIS_JSON) ) return; if (fcMsg.data) { LoginTimer.checkPoint('FCS.FCTYPE_EXTDATA TX ' + fcMsg.type ); if (fcMsg.obj && fcMsg.obj.respkey)
 { var sUrl = '/php/' + ( g_hQS.ext_url ? g_hQS.ext_url.replace(/[^\w\.]/g,'') : 'FcwExtResp.php' ) + '?'; sUrl += 'host=' + SelectChatServer.sHost + '&'; var vKeys = [ "respkey", "type", "opts", "serv" ]; for (var n = 0; n < vKeys.length; n++) if (fcMsg.obj[vKeys[n]]) sUrl += vKeys[n] + "=" + fcMsg.obj[vKeys[n]] + "&"; if(fcMsg.obj.msg && fcMsg.obj.msg.arg1 ) { sUrl += 'arg1=' + fcMsg.obj.msg.arg1 + '&'; } if(fcMsg.obj.msg && fcMsg.obj.msg.arg2 ) { sUrl += 'arg2=' + fcMsg.obj.msg.arg2 + '&'; } if(g_hQS['fcwcdn'] ) { sUrl = "https://www.myfreecams.com/jsresp/" + SelectChatServer.sHost + "/" + fcMsg.obj.respkey; } FetchRemoteObject(fcMsg.type, sUrl, fcMsg.obj); } else Log(g_hTypeMap[fcMsg.type] + ': EXTDATA: fcMsg.obj failed or respkey not included'); }}function FetchRemoteObject(nType, sUrl, hExtWork){ var bTimedOut = false; var oReq = createRequestObject(); FetchRemoteObject.aRequestedObjects.push(hExtWork.type + ':' + ( hExtWork.msg.arg2 ) ); var typeStrings = { '14:1': 'frnd', '14:21': 'cams', '14:20': 'tags', '44:0': 'rmct', '77:0': 'book' }; if(g_hQS['fcwcdn'] ) { sUrl += '?' + typeStrings[ hExtWork.type + ':' + ( hExtWork.msg.arg2 ) ] || 'other'; } else { sUrl = MfcStringUtilities.query_string_append(sUrl, 'owner', g_hSelf.access_level > 0 ? g_hSelf.user_id : 0 ); sUrl = MfcStringUtilities.query_string_append(sUrl, 'nc', Math.round(new Date().getTime() / 600000 ) ); sUrl = MfcStringUtilities.query_string_append(sUrl, 'debug', typeStrings[ hExtWork.type + ':' + ( hExtWork.msg.arg2 ) ] || 'other' ); }
 if(hExtWork.msg.arg2 == FCS.FCL_ROOMMATES ) { g_oCmdQ.Stop(); } oReq.open('get', sUrl); oReq.onreadystatechange = ()=>{ var objectLoaded = false; if ( oReq.readyState === 4 && !bTimedOut ) { LoginTimer.checkPoint('FCS.FCTYPE_EXTDATA RX status: ' + oReq.status + ' length: ' + oReq.responseText.length ); if ( oReq.status === 200 ) { clearTimeout(nTimeoutTimer); var ch = oReq.responseText.substring(0,1); if (ch === '[' || ch === '{') { if (hExtWork && hExtWork.msg && hExtWork.msg.type) { ProcessPacket(hExtWork.msg.type, hExtWork.msg.from, hExtWork.msg.to, hExtWork.msg.arg1, hExtWork.msg.arg2, escape(oReq.responseText )); objectLoaded = true; FetchRemoteObject.aReceivedObjects.push(hExtWork.msg.type + ':' + hExtWork.msg.arg2 ); } else Log(g_hTypeMap[nType] + ": EXTDATA: FetchRemoteObject(): response not processed, no extWork msg data!"); } else Log(g_hTypeMap[nType] + ": EXTDATA: FetchRemoteObject(): response was not json array or object: " + oReq.responseText); } else Log(g_hTypeMap[nType] + ": EXTDATA: FetchRemoteObject(" + nType + ", " + sUrl + "): Failed with http status " + oReq.status); g_oCmdQ.Start(); } }; var nTimeoutTimer = setTimeout(()=>{ bTimedOut = true; oReq.abort(); g_oCmdQ.Start(); }, 20000); oReq.send(null);}FetchRemoteObject.aRequestedObjects=[];FetchRemoteObject.aReceivedObjects=[];
events.onRx(FCS.FCTYPE_ADDFRIEND,function(fcMsg) { FcAddFriend(fcMsg ); });function FcAddFriend(fcMsg ){ var nRemoteUserId = fcMsg.arg1; var nMode = fcMsg.arg2; var hUserHash = g_hUsers[ nRemoteUserId ]; if ( g_hLoungeIds[ nRemoteUserId ] ) { return; } FcAddFriend.bHasFriends = true; if(! g_hUsers[ nRemoteUserId ] ) { return; } if(FcAddFriend.bFriendsLoaded == false ) { FcAddFriend.nLoadingCount++; var nNow = Math.floor(new Date().getTime() / 1000); if (nNow > FcAddFriend.nLastFriendProgress) { LoadPersonalMenu(); FcAddFriend.nLastFriendProgress = nNow + (FcAddFriend.nLoadingMax > 1000 ? 1 : 0); } } if ( nMode == FCS.FCCHAN_JOIN ) { g_hUsers[nRemoteUserId]['friend'] = true; if ( g_bLoginDone && FcAddFriend.bFriendsLoaded ) {
 var sStateMessage; if ( g_hUsers[nRemoteUserId]['sessionid'] ) { sStateMessage = "has signed in"; } var nSessionToCheckFor = hUserHash.sessionid; if(fcMsg.obj !== null && typeof(fcMsg.obj) === 'object' && typeof(fcMsg.obj.sid) === 'number' && fcMsg.obj.sid != nSessionToCheckFor ) { nSessionToCheckFor = fcMsg.obj.sid } if(g_hUsers[nRemoteUserId] && g_hUsers[nRemoteUserId]['sessionid'] && g_hUsers[nRemoteUserId]['sessionid'] == nSessionToCheckFor && objectLen(g_hUsers[nRemoteUserId].sessions ) == 1 ) { var sSound = ''; if ( g_hUsers[nRemoteUserId].access_level == FCS.FCLEVEL_MODEL && g_hUsers[nRemoteUserId].bookmarked && g_hSelf['sound_model_bookmarked_friend_login']) { sSound = 'sound_model_bookmarked_friend_login'; } else if(g_hUsers[nRemoteUserId].access_level == FCS.FCLEVEL_MODEL && g_hSelf['sound_model_friend_login'] ) { sSound = 'sound_model_friend_login'; } else if(g_hUsers[nRemoteUserId].access_level != FCS.FCLEVEL_MODEL && g_hSelf['sound_user_friend_login'] ) { sSound = 'sound_user_friend_login'; } if(sSound ) { Sound(sSound ); } NotificationHistory("<span class=\"top_notification logged_in\"><a href=\"javascript:popUserMenu.open(" + nRemoteUserId + ",g_oDhtmlPopup); \"><b onMouseDown=\" popUserMenu.right_click_open(event," + nRemoteUserId + ",g_oDhtmlPopup); \">" + g_hUsers[nRemoteUserId]['username'] + "</b></a> " + sStateMessage + ".</span>", null, sSound ); } } } else if(nMode == FCS.FCCHAN_PART || g_hUsers[nRemoteUserId]['sessionid'] == '0' ) {
 g_hUsers[nRemoteUserId]['friend'] = false; } var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nRemoteUserId) ) { oPMWindow.FriendNotify(g_hUsers[nRemoteUserId]['state']); } if(BlockedModelRegionCheck && BlockedModelRegionCheck.ClearCacheById ) { BlockedModelRegionCheck.ClearCacheById(nRemoteUserId); } clearBroadcasterHtmlCaches(nRemoteUserId); Update_popUserMenu(nRemoteUserId ); if(FcAddFriend.bFriendsLoaded ) { if(g_bLoginDone ) { if(nMode == FCS.FCCHAN_PART || g_hUsers[nRemoteUserId]['sessionid'] == '0' ) { FriendsList.RemoveFriend(hUserHash ); } else { FriendsList.InsertFriend(hUserHash ); } for(var nUserId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { oPlayerWindow.LoadPlayerMenu(); oPlayerWindow.HighlightChat(); } } } else { FriendsList.Load(); } }}function TopHighlightChat(nUserId ){
 if(TopHighlightChat.hUsers[ nUserId ] ) delete TopHighlightChat.hUsers[ nUserId ]; else TopHighlightChat.hUsers[ nUserId ] = TopHighlightChat.cColors[ TopHighlightChat.nColorRotation++ % 10 ]; for(var nBroadcasterId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nBroadcasterId ) ) oPlayerWindow.HighlightChat('reset'); }}TopHighlightChat.nColorRotation = 0;TopHighlightChat.hUsers = {};TopHighlightChat.cColors = { 0: '#DDDDFF', 1: '#BBEEBB', 2: '#FFDDDD', 3: '#BBBBEE', 4: '#99CC99', 5: '#EEAAAA', 6: '#FFD700', 7: '#FFB6C1', 8: '#FFEE88', 9: '#FFEEEE'};FcAddFriend.LoadingMessage = function(){ if(t.FcAddFriend.bModelsLoaded || g_hSelf['access_level'] < FCS.FCLEVEL_BASIC ) { return; } var nCur = t.FcAddFriend.nLoadingCount; var nMax = t.FcAddFriend.nLoadingMax; var nVal = Math.round((nCur * 100) / nMax); if (nVal > 100) nVal = 100; g_oFriendsProgressBar.Initialize({ bar_class: 'MfcProgressBar_style', initial_value: FcAddFriend.LoadingMessage.nPreviousValue, final_value: t.FcAddFriend.nLoadingMax, width:130, completion_callback: }); var sProgressBar = g_oFriendsProgressBar.DrawProgressBar(); var sHtml = "<div class=\"mt10 mb10 tac fs10\">Loading Friends...</div><div class=\"mb10 tac\">" + sProgressBar + "</div>"; SetHTML('online_friends_control_message', sHtml); 
 g_oFriendsProgressBar.Update(t.FcAddFriend.nLoadingCount ); if (nCur == 100) { setTimeout(FcAddFriend.LoadingMessage, 500); } FcAddFriend.LoadingMessage.nPreviousValue = t.FcAddFriend.nLoadingCount;};FcAddFriend.LoadingMessage.nPreviousValue = 0;FcAddFriend.FriendReset = function(){ FcAddFriend.nLoadingMax = 0; FcAddFriend.nLoadingCount = 0; FcAddFriend.bFriendsLoaded = false; FcAddFriend.nLastFriendProgress = 0;};FcAddFriend.FriendReset();events.onRx(FCS.FCTYPE_ADDIGNORE,function(fcMsg) { FcAddIgnore(fcMsg); });function FcAddIgnore(fcMsg ){ var nIgnoredUser = fcMsg.arg1; if(! g_hUsers[nIgnoredUser] ) { g_hUsers[nIgnoredUser] = {}; } if(fcMsg.arg2 == FCS.FCCHAN_PART ) { g_hUsers[ nIgnoredUser ].ignored = 0; } else if(fcMsg.arg2 == FCS.FCCHAN_JOIN ) { g_hUsers[ nIgnoredUser ].ignored = 1; } if(! FcAddFriend.bFriendsLoaded ) { return; } if(g_hWindows['user_settings'] && g_hWindows['user_settings'].window && g_hWindows['user_settings'].window.AddIgnoreResponse ) { g_hWindows['user_settings'].window.AddIgnoreResponse(fcMsg.arg1, fcMsg.arg2 ); } for(var nRemoteUserId in g_hoPMWindows) { var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nRemoteUserId) ) { oPMWindow.ConfigureUserControls(); } } Update_popUserMenu(nIgnoredUser );
}events.onRx(FCS.FCTYPE_MANAGELIST,function(fcMsg){ if (fcMsg.arg2 > 0) { if (fcMsg.obj && fcMsg.obj.rdata) { var nType = fcMsg.arg2; var nListArg = 0; if (nType == FCS.FCL_ROOMMATES && fcMsg.obj.channel) { nListArg = fcMsg.obj.channel; } if (nType == FCS.FCL_SHARE_BADGES ) FcShareBadges(fcMsg.obj.owner, fcMsg.obj.rdata ); else if (nType == FCS.FCL_TAGS ) FcTags(fcMsg.obj.rdata ); else processListData(fcMsg.obj.rdata, nType, nListArg); } else Log('LIST DBG: FCS.FCTYPE_MANAGELIST data missing obj or obj.rdata: ' + fcMsg.serialize()); } else MfcManageList_Top.callback(fcMsg );});function processListData(hList, nListType, nListArg){ if(hList && typeof(hList.length ) != 'undefined' ) { processListData.hListCounts[ nListType ] = hList.length; } var nMetricsType = 0; if (nListType == FCS.FCL_CAMS) nMetricsType = FCS.FCTYPE_SESSIONSTATE; else if (nListType == FCS.FCL_ROOMMATES) nMetricsType = FCS.FCTYPE_JOINCHAN; else if (nListType == FCS.FCL_FRIENDS) nMetricsType = FCS.FCTYPE_ADDFRIEND; else if (nListType == FCS.FCL_IGNORES) nMetricsType = FCS.FCTYPE_ADDIGNORE; else if (nListType == FCS.FCL_TAGS) nMetricsType = FCS.FCTYPE_TAGS; if (hList.constructor === Array) { var nItems = hList.length;
 var nCount = 0; if (hList.length > 1) { var hKey = hList.shift(); nItems--; if (hKey.constructor === Array) { var hMap = []; for (var n = 0; n < hKey.length; n++) { if (typeof(hKey[n]) === 'string') { hMap.push({ "block": "r", "key": hKey[n] } ); } else if (Object.prototype.toString.call(hKey[n]) === '[object Object]') { var nLen = hMap.length; for (var sK in hKey[n]) if (sK == "u" || sK == "m" || sK == "e" || sK == "x") if (hKey[n][sK].constructor === Array) for (var x = 0; x < hKey[n][sK].length; x++) if (typeof(hKey[n][sK][x]) === 'string') hMap.push({ "block": sK, "key": hKey[n][sK][x] } ); else Log("Expected string for type of column " + x + " of sub on col " + n + ", was " + typeof(hKey[n][sK][x])); else Log("expected Array constructor for hKey[n][sK].constructor, was " + hKey[n][sK].constructor); else Log("wasn't u, m, e, x? " + sK); } else { Log("unable to find type for child object at column " + n); break; } } } } if (nMetricsType > 0) FcMetrics(nMetricsType, 0, nItems); for (var n = 0; n < hList.length; n++) { if (nListType == FCS.FCL_SHARE_CLUBSHOWS) { if (hList[n].hasOwnProperty('model')) {
 FcClubShows(hList[n].model, hList[n]); } else Log('Invalid list item ' + n + ' of ' + hList.length + '; FCS.FCL_SHARE_CLUBSHOWS obj missing model prop: ' + JSON.stringify(hList[n])); } else { var hUser = { }; if (Object.prototype.toString.call(hList[n]) === '[object Array]') { for (var x = 0; x < hMap.length && x < hList[n].length; x++) { if (hMap[x].block != "r") { if ( ! hUser.hasOwnProperty(hMap[x].block ) ) hUser[ hMap[x].block ] = { }; var v = hMap[x].key.split("."); if (v.length >= 2) { var sKey = v.shift(); var sVal = v.shift(); if ( ! hUser[ hMap[x].block ].hasOwnProperty(sKey) ) hUser[ hMap[x].block ][ sKey ] = { }; hUser[ hMap[x].block ][ sKey ][ sVal ] = hList[ n ][ x ]; } else if (v.length === 1) hUser[ hMap[x].block ][ hMap[x].key ] = hList[ n ][ x ]; } else hUser[ hMap[x].key ] = hList[ n ][ x ]; } } else if (Object.prototype.toString.call(hList[n]) === '[object Object]') { hUser = hList[n]; } var hUserHash = StoreUserHash(hUser, { update_collection: true, from_cache: true } ); if(typeof(hUserHash ) != 'object' ) { Log("processListData ERROR: Couldn't store user:"); Log(hUser ); continue; } if (nListType == FCS.FCL_CAMS) { var fcMsg = new FcMsg({
 type: FCS.FCTYPE_SESSIONSTATE, from: 0, to: null, arg1: 0, arg2: hUserHash.user_id, data: null }); FcSessionState(fcMsg ); } else if (nListType == FCS.FCL_FRIENDS) { var fcMsg = new FcMsg({ type: FCS.FCTYPE_ADDFRIEND, from: null, to: null, arg1: hUserHash.user_id, arg2: FCS.FCCHAN_JOIN, data: null }); FcAddFriend(fcMsg ); } else if (nListType == FCS.FCL_IGNORES) { var fcMsg = new FcMsg({ type: FCS.FCTYPE_ADDIGNORE, from: null, to: null, arg1: hUserHash.user_id, arg2: FCS.FCCHAN_JOIN, data: null }); FcAddIgnore(fcMsg ); } else if (nListType == FCS.FCL_ROOMMATES) { var fcMsg = new FcMsg({ type: FCS.FCTYPE_JOINCHAN, from: hUserHash.sessionid, to: g_nSessionId, arg1: nListArg, arg2: FCS.FCCHAN_JOIN, data: encodeURIComponent(JSON.stringify(hUser) ) }); events.emitRx(FCS.FCTYPE_JOINCHAN, fcMsg ); } nCount++; } }
 if (nMetricsType > 0) FcMetrics(nMetricsType, nCount, nItems); } else Log('Invalid args for listType:' + nListType + ', hList.constructor != Array? ' + hList.constructor + ', hList.length: ' + hList.length); events.emit('processListData.' + nListType, false );}processListData.hListCounts = {};function StoreUserHash(mixedPayload, hOptions ){ hOptions = hOptions || {}; var hMap = {}; var hUser = {}; var nUserId = 0; if ( ! mixedPayload ) return; if ( typeof mixedPayload === 'string' ) { var sPayload=''; try { sPayload = decodeURIComponent(mixedPayload); } catch(e) { console.log(e); } if(sPayload.charAt(0) == '[' ) { sPayload = sPayload.substr(1,sPayload.length - 2 ); aPayload = sPayload.split(','); hUser['lv'] = 0; hUser['nm'] = "Guest" + MfcStringUtilities.char_padding(aPayload[0],5,0); hUser['sid'] = aPayload[1]; hUser['ts'] = 0; hUser['uid'] = 0; hUser['vs'] = 90; } if(! hUser['sid'] ) hUser = ParseJSON(sPayload ); } else if ( typeof mixedPayload === 'object' ) { hUser = mixedPayload; }
 try { if (hUser) // && hUser.sid != null && hUser.sid != undefined)
 { if(hUser['uid'] == 100 && ! top.g_sClearCode ) hUser['vs'] = FCS.FCVIDEO_OFFLINE; nUserId = parseInt(hUser.uid); hMap['username'] = hUser.nm; hMap['sessionid'] = hUser.sid; hMap['platform_id'] = hUser.pid; hMap['user_id'] = hUser.uid; hMap['access_level'] = hUser.lv; hMap['state'] = hUser.vs; if(hMap['access_level'] <= FCS.FCLEVEL_GUEST && g_hUsers[hMap['user_id']] && g_hUsers[hMap['user_id']].access_level >= FCS.FCLEVEL_BASIC) hMap['access_level'] = g_hUsers[hMap['user_id']].access_level; hMap['lastupdated'] = hUser.ts; if (hUser.u) { hMap['chat_text_color'] = hUser.u.chat_color ? hUser.u.chat_color.replace(/\W/g,'') : undefined; hMap['chat_text_font'] = hUser.u.chat_font; hMap['photos'] = hUser.u.photos; hMap['active'] = hUser.u.profile; hMap['city'] = StoreUserHash.sanitize(hUser.u.city, 'city' ); hMap['country'] = StoreUserHash.sanitize(hUser.u.country, 'country' ); hMap['ethnic'] = StoreUserHash.sanitize(hUser.u.ethnic, 'ethnic' ); hMap['lastlogin'] = hUser.u.lastlogin; hMap['creation_date'] = hUser.u.creation || 0 ; hMap['avatars'] = hUser.u.avatar; hMap['age'] = hUser.u.age; hMap['occupation'] = StoreUserHash.sanitize(hUser.u.occupation, 'occupation' ); hMap['chat_background_id'] = hUser.u.chat_bg; hMap['chat_opts'] = hUser.u.chat_opt; hMap['blurb'] = StoreUserHash.sanitize(hUser.u.blurb, 'blurb' ); hMap['aboutme'] = hMap['blurb']; if(! hMap['chat_opts'] && ! g_hUsers[ nUserId ] ) { hMap['chat_opts'] = FCS.FCOPT_NONE; } if(hMap['access_level'] >= FCS.FCLEVEL_PREMIUM && typeof(hMap['chat_opts']) != 'undefined' ) {
 hMap['cam2cam'] = hMap['chat_opts'] & FCS.FCOPT_CAM2CAM ? 1 : 0; if(g_bDebug && nUserId == g_hSelf.user_id ) { Log('chat_opt_bits - ' + ( g_hTypeMap && g_hTypeMap[ hOptions.type ] ? g_hTypeMap[ hOptions.type ] : 'UNKNOWN TYPE' ) + ' chat_opts: dec: ' + hMap['chat_opts'] + ' bin: ' + (hMap['chat_opts'] >>> 0).toString(2) ); } } if(g_hPlatform.id == PLAT_CAM ) { hMap['location'] = StoreUserHash.sanitize(hUser.u.location, 'location' ); hMap['interests'] = StoreUserHash.sanitize(hUser.u.interests, 'interests' ); hMap['headline'] = StoreUserHash.sanitize(hUser.u.headline, 'headline' ); hMap['blurb'] = hMap['headline']; } } if (hUser.m) { hMap['lastnews'] = hUser.m.lastnews; hMap['topic'] = StoreUserHash.sanitize(hUser.m.topic, 'topic' ); hMap['missmfc'] = hUser.m.missmfc; hMap['missmfc_rank'] = hUser.m.rank; hMap['continent'] = hUser.m.continent; hMap['kbps'] = hUser.m.kbit; hMap['rating'] = hUser.m.camscore; hMap['cam_score'] = hUser.m.camscore; hMap['rating_count'] = hUser.m.totrating; hMap['avg_rating'] = hUser.m.avgrating; hMap['new_model'] = hUser.m.new_model; hMap['model_flags'] = hUser.m.flags; hMap['hide_cam_score'] = hUser.m.hidecs; if ( hUser.m.rc !== undefined && ! hOptions.from_cache ) hMap['room_count'] = hUser.m.rc; hMap['ping'] = 0; hMap['rating'] = 1; if (hMap['model_flags'] !== undefined) { hMap['remote_private'] = hMap['model_flags'] & w.FCS.FCOPT_REMOTEPVT ? 1 : 0; hMap['truepvt'] = hMap['model_flags'] & w.FCS.FCOPT_TRUEPVT ? 1 : 0; hMap['model_sw'] = hMap['model_flags'] & w.FCS.FCOPT_MODELSW ? 1 : 0; hMap['guests_muted'] = hMap['model_flags'] & w.FCS.FCOPT_GUESTMUTE ? 1 : 0;
 hMap['basics_muted'] = hMap['model_flags'] & w.FCS.FCOPT_BASICMUTE ? 1 : 0; hMap['whiteboard1'] = ( g_hQS['test_whiteboard'] == nUserId ) || ( hMap['model_flags'] & FCS.FCOPT_WHITEBOARD1 ? 1 : 0 ); hMap['whiteboard2'] = hMap['model_flags'] & FCS.FCOPT_WHITEBOARD2 ? 1 : 0; if (g_hQS['hdspec'] === 'onlyh5') hMap['hdvideo'] = g_default_clientVideo.IsH5SupportedVideo(hUser.u.camserv) ? 1 : 0; else hMap['hdvideo'] = hMap['model_flags'] & FCS.FCOPT_HDVIDEO ? 1 : 0; hMap['webrtc_video'] = (hMap['model_flags'] & FCS.FCOPT_WEBRTCV1 || hMap['model_flags'] & FCS.FCOPT_OBSRTCV1) ? 1 : 0; } if ( hMap['access_level'] === FCS.FCLEVEL_MODEL && hMap['model_sw'] === 1) { if (hUser.u && hUser.u.hasOwnProperty('camserv')) { hMap['videoserver'] = hUser.u.camserv; hMap['camserv'] = hUser.u.camserv; hMap['video_aspect_ratio'] = ( g_default_clientVideo.IsObsVideo(hMap['camserv'] ) || hMap['webrtc_video'] || top.location.search.match(/force_wide_aspect/) ) ? (16/9) : (4/3); } hMap['phase'] = (hUser.u && hUser.u.hasOwnProperty('phase')) ? hUser.u.phase : 'z'; } } if (hUser.hasOwnProperty('x') && isObject(hUser.x)) { for ( var sK in hUser.x) { if (isObject(hUser.x[sK])) { hMap[ sK ] = hUser.x[sK]; for (prop in hMap[ sK ]) if (hMap[ sK ][ prop ] === null) delete hMap[sK][prop]; } } } hMap['italic'] = 0; hMap['static_record'] = 0; } else {
 Log('StoreUserHash Error: CMESG hUser not eval ok: '); console.log(mixedPayload ); console.log(hUser ); } } catch(e) { Log('StoreUserHash Error, failed eval: ' + mixedPayload + ', e:' + e.description); return; } if(nUserId == 26387007 ) { hMap.continent = 'UK'; } if ( nUserId == 0 && hMap['sessionid'] > 0 ) nUserId = parseInt(hMap['sessionid']); var nPreviousState = FCS.FCVIDEO_OFFLINE; if ( hOptions.historical && g_hUsers[nUserId]) { nPreviousState = g_hUsers[nUserId]['state']; } if ( ! g_hUsers[ nUserId ] && hMap['access_level'] == FCS.FCLEVEL_MODEL ) { g_hUsers[nUserId] = {}; } if(hMap.access_level == FCS.FCLEVEL_MODEL && ! hMap.new_model ) { var nModelAge = Math.abs(( ( StoreUserHash.nNow / 1000 ) - hMap.creation_date ) / 86400 ); if(nModelAge <= 90 ) hMap.new_model = nModelAge; if(g_hSelf.online_model_sort == 'random' ) hMap.random = Math.random(); } if(hMap.topic && hMap.platform_id == PLAT_MFC && t.g_hPlatform.id != hMap.platform_id ) { delete hMap.topic; } if (typeof(hMap.model_sw) == 'undefined') { if ( g_hUsers.hasOwnProperty(nUserId) && g_hUsers[ nUserId ].hasOwnProperty('sessions') && g_hUsers[ nUserId ].sessions.hasOwnProperty(hMap['sessionid']) && g_hUsers[ nUserId ].sessions[ hMap['sessionid'] ].hasOwnProperty('model_sw')) { hMap.model_sw = g_hUsers[ nUserId ].sessions[ hMap['sessionid'] ].model_sw; } else hMap.model_sw = 0; } if (typeof(hMap.access_level) == 'undefined') { if ( g_hUsers.hasOwnProperty(nUserId) && g_hUsers[ nUserId ].hasOwnProperty('access_level') && typeof(g_hUsers[nUserId].access_level) == 'number') { hMap.access_level = g_hUsers[nUserId].access_level; } } if(nUserId == g_hSelf['user_id'] && ( hOptions.historical || hOptions.type == FCS.FCTYPE_ADDFRIEND ) ) { hOptions.update_collection = false; } if(nUserId == g_hSelf['user_id'] && hOptions.type != FCS.FCTYPE_DETAILS )
 { delete hMap['chat_text_color']; delete hMap['chat_text_font']; delete hMap['chat_text_font_flags']; } if (hMap.access_level == FCS.FCLEVEL_MODEL) { if (hMap.model_sw == 0 && g_hUsers && g_hUsers[ hMap.user_id ] && g_hUsers[ hMap.user_id ].model_sw == 1) { hOptions.update_collection = false; hOptions.process_sessions = true; } } var bResetUserState_after_update = ( nUserId == g_hSelf['user_id'] && hMap['access_level'] == FCS.FCLEVEL_PREMIUM && g_hSelf['access_level'] == FCS.FCLEVEL_BASIC ) ? 1 : 0; var hSessionInfo = mfcSessionManager.copySessionInfo(hMap); var adoptBroadcastProperties = ( (hOptions.update_collection || hOptions.process_sessions) && hSessionInfo.state !== undefined && nUserId > 0 ); if(hMap['access_level'] == FCS.FCLEVEL_MODEL && hMap['model_sw'] ) { StoreUserHash.update_players_on_TruePvt_change(hMap); if(typeof(g_hUsers[ nUserId ]['state'] ) == 'number' ) hMap['previous_state'] = g_hUsers[ nUserId ]['state']; } var hUpdates={},hPrevious={}; if ( hOptions.update_collection ) { var bUpdateVideoInfo = ( g_hUsers[ nUserId ] && hMap['camserv'] && g_hUsers[ nUserId ].camserv != hMap['camserv'] ); if(! g_hUsers[ nUserId ] ) {
 g_hUsers[ nUserId ] = hMap; bUpdateVideoInfo = hMap['camserv'] && hMap['access_level'] == FCS.FCLEVEL_MODEL; } else { for (var sK in hMap) { if (mfcSessionManager.isSessionKey(sK)) continue; if (hMap[sK] == 0 && sK != 'chat_text_color') hMap[sK] = 0; if ( typeof(hMap[sK]) != 'undefined' && hMap[sK] != null && ( sK != 'tokens' || hMap[sK] >= 0 ) ) { g_hUsers[ nUserId ][ sK ] = hMap[ sK ]; } } }
 var hDefaults = { 'chat_text_font': 0, 'bold': 0, 'italic': 0, 'cam2cam': 0 }; for(var sK in hDefaults ) { if (nUserId == g_hSelf['user_id']) if ( g_hSelf[sK] == null || g_hSelf[sK] == undefined ) g_hSelf[sK] = hDefaults[sK]; if ( g_hUsers[nUserId][sK] == null || g_hUsers[nUserId][sK] == undefined ) g_hUsers[nUserId][sK] = hDefaults[sK]; } if ( nUserId == g_hSelf['user_id'] ) { for(var sK in hMap) { if ( ( sK != 'tokens' || hMap[sK] > 0 ) && ( ( sK != 'sessionid' ) || ( !g_hSelf.hasOwnProperty(sK ) ) // ... isnt set on g_hSelf,
 || ( g_hSelf.sessionid == 0 ) ) // ... or is on self as 0
 && ( sK != 'user_id' ) && ( sK != 'sessions' ) && ( hMap[sK] != null ) && ( hMap[sK] != undefined ) ) { g_hSelf[sK] = hMap[sK]; } } if(g_hSelf.online_model_selection == 'feeds' && ! g_UA.mobile ) g_hSelf.online_model_selection = 'custom'; if(typeof(g_hSelf['online_model_order'] ) != 'number' ) g_hSelf['online_model_order'] = parseInt(g_hSelf['online_model_order'] ) || 0; if(top.location.search.match(/use_pages/) ) { g_hSelf['model_list_mode'] = 'page'; } else if(top.location.search.match(/use_scroll/) ) { g_hSelf['model_list_mode'] = 'scroll'; } if(top.location.search.match(/fixed_height/) ) { g_hSelf.single_page_website = 0; } if(top.location.search.match(/no_single_page_website/) ) { g_hSelf.single_page_website = 0; } else if(top.location.search.match(/single_page_website/) ) { g_hSelf.single_page_website = 1; } if(g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { if(g_hPlatform.id == PLAT_CAM ) { g_hSelf.online_model_pattern = 5; g_hSelf.auto_update_livesnaps_persec_player = 10; g_hSelf.auto_update_livesnaps_persec_homepage = 10; } else { if(! g_UA.mobile ) { g_hSelf.video_controls_display_mode = 'slim'; g_hSelf.video_controls_display_mode_popup = 'slim'; } g_hSelf.auto_update_livesnaps_persec_player = 10; g_hSelf.auto_update_livesnaps_persec_homepage = 10; }
 g_hSelf.model_list_show_links_homepage = 0; } if(g_hPlatform.id == PLAT_CAM ) { g_hSelf.auto_update_livesnaps = 1; } if(g_UA.mobile ) { g_hSelf.hide_size = 1; g_hSelf.hide_people = 1; g_hSelf.model_list_refresh_seconds = 120; g_hSelf.show_main_menu = 0; if(g_hPlatform.id == PLAT_CAM ) { g_hSelf.online_model_pattern = 5; g_hSelf.auto_update_livesnaps_persec_player = 5; g_hSelf.auto_update_livesnaps_persec_homepage = 5; } else if(g_hSelf.online_model_pattern_mobile ) { g_hSelf.online_model_pattern = g_hSelf.online_model_pattern_mobile; } } else if(! g_hSelf.online_model_pattern ) { g_hSelf.online_model_pattern = g_hPlatform.id == PLAT_CAM ? 5 : ( g_hSelf.access_level > FCS.FCLEVEL_GUEST ? 1 : 1 ); g_hSelf.online_model_pattern_player = g_hPlatform.id == PLAT_CAM ? 4 : ( g_hSelf.access_level > FCS.FCLEVEL_GUEST ? 1 : 1 ); } var hOverrides = { omp: 'online_model_pattern', ompp: 'online_model_pattern_player', aul: 'auto_update_livesnaps', aulph: 'auto_update_livesnaps_persec_homepage', aulpp: 'auto_update_livesnaps_persec_player' }; for(var sAcr in hOverrides ) if(typeof(g_hQS[ sAcr ] ) != 'undefined' ) { g_hSelf[ hOverrides[sAcr] ] = parseInt(g_hQS[sAcr] ); } UserExtensions.Initialize();
 for(var sExt in UserExtensions.hExtNamesToIds ) if(g_hSelf[sExt] == undefined ) g_hSelf[sExt] = UserExtensions.hExtNamesToIds[sExt].default_value; if(g_UA.mobile ) { g_hSelf.video_width = 0; } if(g_hSelf.models_per_page == 1000 ) { g_hSelf.models_per_page = 500; } else if(g_hSelf.models_per_page == 350 ) { g_hSelf.models_per_page = 300; } else if(g_hSelf.models_per_page == 250 ) { g_hSelf.models_per_page = 200; } else if(g_hSelf.models_per_page == 150 ) { g_hSelf.models_per_page = 100; } if(g_hSelf.access_level == FCS.FCLEVEL_GUEST && typeof(g_hSelf.show_header)=='undefined' ) { g_hSelf.show_header = 2; } } } else { if (hMap['username'] != null && hMap['username'] != undefined && g_hUsers[nUserId]) { g_hUsers[nUserId]['username'] = hMap['username']; } } if (adoptBroadcastProperties) { mfcSessionManager.processSession(nUserId, hSessionInfo, hOptions.historical); var hBestSession = mfcSessionManager.determineBestSession(nUserId); if ( typeof(hBestSession) === 'object' ) { for (var sk in hBestSession) { if (hBestSession.hasOwnProperty(sk)) { g_hUsers[nUserId][sk] = hBestSession[sk]; } } } } if(nUserId > 0 && g_hSelf.user_notepad_cache && g_hSelf.user_notepad_cache[nUserId] && g_hUsers[nUserId] ) { g_hUsers[nUserId]['notes'] = g_hSelf.user_notepad_cache[nUserId]; } if(nPreviousState != FCS.FCVIDEO_OFFLINE )
 { g_hUsers[nUserId]['state'] = nPreviousState; } if(hMap['access_level'] == FCS.FCLEVEL_MODEL && hMap['model_sw'] ) { EnsureHDVideoState(nUserId ); if (g_hUsers[nUserId]['state'] != FCS.FCVIDEO_TX_PVT && g_hUsers[nUserId]['truepvt']) g_hUsers[nUserId]['truepvt'] = 0; } if (hMap['username'] && typeof(hMap['username']) == 'string') StoreUserHash.hUsernameMap[ hMap['username'].toLowerCase() ] = nUserId; if (bResetUserState_after_update) ResetUserState(); if(g_hUsers[nUserId] && g_hUsers[nUserId]['lock_video_aspect_ratio'] ) { g_hUsers[nUserId]['video_aspect_ratio'] = g_hUsers[nUserId]['lock_video_aspect_ratio']; } if(g_hUsers[nUserId] && g_hUsers[nUserId].access_level == FCS.FCLEVEL_MODEL && ! g_hUsers[nUserId].broadcast_start_time && g_hUsers[nUserId].state < FCS.FCVIDEO_RX_IDLE )
 { g_hUsers[nUserId].broadcast_start_time = new Date().getTime(); } if(g_hSelf.followed_topic_words && g_hUsers[nUserId].topic && ! g_hUsers[nUserId].hTopicWords && mfcBroadcasters ) { mfcBroadcasters.processTopicWords(nUserId ); } return hMap;}StoreUserHash.update_players_on_TruePvt_change = function(hMap ){ var oWindow; if (typeof(hMap) != 'object') return; if ( g_hUsers[hMap.user_id] && typeof(hMap['truepvt']) == 'number' && typeof(g_hUsers[hMap.user_id]['truepvt']) == 'number' && hMap['truepvt'] != g_hUsers[hMap.user_id]['truepvt'] ) { if (g_hoPlayerWindows[hMap.user_id]) { if (oWindow = WindowHandle.Get('player', hMap.user_id)) oWindow.SetTruePvt(hMap['truepvt'] == 1 ? true : false); } if (g_hoPMWindows[hMap.user_id]) { if (oWindow = WindowHandle.Get('pm', hMap.user_id )) oWindow.SetTruePvt(hMap['truepvt'] == 1 ? true : false); } }};StoreUserHash.hUsernameMap = {};StoreUserHash.hValuesBySession = {};StoreUserHash.nNow = new Date().getTime();StoreUserHash.sanitize = function(sStr, sKey ){ if(typeof(sStr ) != 'string' )
 { return sStr; } else if(g_bNewEncodeScheme || sStr.indexOf('%20') > -1 ) { try { sStr = URLEncoding.decode(sStr, sKey ); } catch(e ) { console.log(e); console.log(sStr); console.log(sStr+', '+sKey ); } } sStr = sStr.replace(/</g, "&lt;").replace(/>/g, "&gt;"); return sStr || '';};StoreUserHash.insertUser = function(hUser ){ hUser = hUser || {}; if(! hUser.user_id ) { console.log('StoreUserHash.insertUser missing user_id'); return; } if(! g_hUsers[ hUser.user_id ] ) { g_hUsers[ hUser.user_id ] = {}; } for(var sK in hUser ) { g_hUsers[ hUser.user_id ][ sK ] = hUser[ sK ]; } return true;};function EnsureHDVideoState(nBroadcasterId ){ if(! g_hUsers[nBroadcasterId] ) { return; } if(g_hUsers[nBroadcasterId].state != FCS.FCVIDEO_TX_IDLE ) { return; } var oPlayerHandle; if(oPlayerHandle = t.WindowHandle.Get('player', nBroadcasterId ) ) { if(oPlayerHandle.g_sPlayerMode == 'player' && oPlayerHandle.LoadVideo && oPlayerHandle.LoadVideo.clientVideo && oPlayerHandle.LoadVideo.clientVideo.EnsureHDVideoState ) { oPlayerHandle.LoadVideo.clientVideo.EnsureHDVideoState({ user_id: nBroadcasterId }); } } var oPMHandle; if(oPMHandle = t.WindowHandle.Get('pm', nBroadcasterId ) ) { if(t.g_hoPMWindows[nBroadcasterId] && t.g_hoPMWindows[nBroadcasterId]['pm_video'] && oPMHandle.LoadVideo && oPMHandle.LoadVideo.clientVideo && oPMHandle.LoadVideo.clientVideo.EnsureHDVideoState ) { oPMHandle.LoadVideo.clientVideo.EnsureHDVideoState({ user_id: nBroadcasterId }); } }}var mfcSessionManager = new MfcSessionManager({ nOfflineState: FCS.FCVIDEO_OFFLINE, fGetUserSessions: function(nUserId ) { if ( typeof(g_hUsers[ nUserId ]) !== 'object' ) return undefined; if ( typeof(g_hUsers[ nUserId ].sessions) !== 'object' ) g_hUsers[ nUserId ].sessions = {}; return g_hUsers[ nUserId ].sessions; }});function NotificationHistory(sMessage, sIcon, sSound ){ if(! g_hSelf.show_notifications ) { return; } if(! sIcon ) { sMessage = "<i>&#8594;</i>" + sMessage; } if ( g_bLoginDone ) { oEl = GetEl('chat_bubble_white'); if(oEl ) oEl.style.display = 'block';
 } Banner.SetMessage(sMessage, sIcon, true, sSound ); setTimeout(function() { Banner.SetMessage(); }, 25000 ); }function FriendsKeys(){ var aFriends = []; for(var nUserId in g_hUsers ) { if(g_hUsers[nUserId].friend || g_hUsers[nUserId].bookmarked ) { aFriends.push(nUserId); } } return aFriends;}function SortedUserKeys(sMode, bReverse, aSubset ){ if(! sMode ) { sMode = 'username'; } var i = 0; var aTmp = new Array(); var aResult = new Array(); var bIsString; var aIdSet = new Array(); if(aSubset ) { aIdSet = aSubset; } else { for(var nUserId in g_hUsers ) { aIdSet.push(nUserId ); } } for(var nK = 0; nK < aIdSet.length; nK++ ) { var nUserId = aIdSet[nK]; if(nUserId > 0 && g_hUsers[nUserId][ sMode ] != undefined ) { bIsString = typeof(g_hUsers[nUserId][ sMode ] ) == 'string' ? 1 : 0; break; } } for(var nK = 0; nK < aIdSet.length; nK++ ) { var nUserId = aIdSet[nK]; if(g_hUsers[nUserId] && g_hUsers[nUserId][sMode] != undefined ) { var plat = ( g_hUsers[nUserId].platform_id == g_hPlatform.id ) ? 0 : 1;
 if(bIsString && g_hUsers[nUserId][ sMode ].toLowerCase ) { aTmp[i++] = plat + ':' + g_hUsers[nUserId][ sMode ].toLowerCase() + ':' + nUserId; } else { aTmp[i++] = plat + ':' + MfcStringUtilities.char_padding(g_hUsers[nUserId][ sMode ], 5, 0 ) + ':' + nUserId; } } } aTmp.sort(); if(bReverse ) { aTmp.reverse(); } for(var nK=0; nK < aTmp.length; nK++ ) { aResult.push(aTmp[nK].split(':')[2] ); } return aResult;}function LoadPersonalMenu(sMode){ if(LoadPersonalMenu.SuspendUpdates || TogglePersonalMenu.nDisplay == 0 ) { return; } if(sMode == 'suspend' ) { LoadPersonalMenu.Lock = 1; setTimeout(function(){ LoadPersonalMenu.Lock=0 },3000); return; } else if ( LoadPersonalMenu.Lock > 0 ) { LoadPersonalMenu.CallTimeout = setTimeout(function(){ LoadPersonalMenu(sMode ); }, 1000 ); return; } else { clearTimeout(LoadPersonalMenu.CallTimeout ); } sMode = sMode || ''; if(! sMode ) { clearTimeout(LoadPersonalMenu.oFriendsLimit );
 LoadPersonalMenu.oFriendsLimit = setTimeout(100); return; } try { for(var nRemoteUserId in g_hoPMWindows) { var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nRemoteUserId) ) { oPMWindow.ConfigureUserControls(); } } } catch(oError) { Log("Try Catch Failure #14: " + oError.description ); } if (sMode == 'disconnected') { SetHTML('friends_private_messages',""); return; } else if ( ! GetEl('windows_list') || sMode == 'reset' ) { var aMenu = PersonalMenu_HTML(); var sH; sH = "\n <div class=\"posr\">\n <div id=personal_menu_list_wrapper style=\"overflow-y:auto;overflow-x:hidden;padding-bottom:2px;white-space: nowrap;width:161px;\"> " + ( g_hSelf.access_level <= FCS.FCLEVEL_GUEST ? DrawGuestMenu() : '' ) + " " + aMenu.join('') + " </div> </div> </div> "; SetHTML('friends_private_messages',sH); LoadPersonalMenu.SuspendUpdates = 1; ToggleMenu.Label('personal_menu'); MyWebcam.DisplayStatus(); } FriendsList.Load({ force: true }); LoadWindowsList(); MenuSizing.SetHeight(); setTimeout(InboxAlert, 0 );
 setTimeout(InboxAlert, 500 );}function PersonalMenu_HTML(){ var aMenu = new Array(); var aMenuOrder = new Array(); if(g_hPlatform.id == PLAT_CAM ) { aMenuOrder.push('my_account'); if(g_hSelf['access_level'] > FCS.FCLEVEL_GUEST ) aMenuOrder.push('user_settings'); aMenuOrder.push('break'); aMenuOrder.push('top_rooms'); aMenuOrder.push('trending_rooms'); aMenuOrder.push('break'); aMenuOrder.push('activity_log'); if(g_hSelf['access_level'] > FCS.FCLEVEL_GUEST ) aMenuOrder.push('chat_logs'); aMenuOrder.push('break'); if(g_hSelf['access_level'] == FCS.FCLEVEL_PREMIUM || g_hSelf['access_level'] == FCS.FCLEVEL_ADMIN ) { aMenuOrder.push('cam_lounge'); aMenuOrder.push('break'); } if(g_hSelf['access_level'] > FCS.FCLEVEL_GUEST ) { aMenuOrder.push('message'); } if(g_hSelf['access_level'] > FCS.FCLEVEL_BASIC ) { aMenuOrder.push('broadcast'); } } else if(g_hSelf['access_level'] == FCS.FCLEVEL_GUEST ) { aMenuOrder.push('-my_profile'); aMenuOrder.push('-mfc_share'); aMenuOrder.push('top_rooms');
 aMenuOrder.push('trending_rooms'); aMenuOrder.push('miss_mfc'); aMenuOrder.push('model_explorer'); aMenuOrder.push('-model_tags'); aMenuOrder.push('-topic_tags'); aMenuOrder.push('news_feed'); } else if(g_hSelf['access_level'] == FCS.FCLEVEL_BASIC ) { aMenuOrder.push('my_account'); aMenuOrder.push('user_settings'); aMenuOrder.push('-my_profile'); aMenuOrder.push('-mfc_share'); aMenuOrder.push('activity_log'); aMenuOrder.push('line_break'); aMenuOrder.push('news_feed'); aMenuOrder.push('line_break'); aMenuOrder.push('top_rooms'); aMenuOrder.push('trending_rooms'); aMenuOrder.push('miss_mfc'); aMenuOrder.push('model_explorer'); aMenuOrder.push('-model_tags'); aMenuOrder.push('-topic_tags'); aMenuOrder.push('model_recommendations'); if(g_hSelf.has_bookmarks ) aMenuOrder.push('bookmarks'); aMenuOrder.push('line_break'); aMenuOrder.push('user_tags'); aMenuOrder.push('user_created_rooms'); aMenuOrder.push('premium_features'); } else if(g_hSelf['access_level'] == FCS.FCLEVEL_PREMIUM || g_hSelf['access_level'] == FCS.FCLEVEL_ADMIN ) { aMenuOrder.push('my_account'); aMenuOrder.push('user_settings'); if ( g_hSelf['active'] ) aMenuOrder.push('-my_profile'); else aMenuOrder.push('create_profile'); aMenuOrder.push('-mfc_share');
 aMenuOrder.push('line_break'); aMenuOrder.push('-lounge'); if(g_hUsers[ g_hLoungeIds['Lounge1000'] ] && g_hSelf['rewards_points'] >= 1000 ) aMenuOrder.push('-lounge1000'); if(g_hUsers[ g_hLoungeIds['Lounge10000'] ] && g_hSelf['rewards_points'] >= 10000 ) aMenuOrder.push('-lounge10000'); aMenuOrder.push('line_break'); aMenuOrder.push('message'); aMenuOrder.push('-news_feed'); if ( g_hSelf['rewards_points'] >= 20 ) { aMenuOrder.push('-private_gallery'); } aMenuOrder.push('break'); aMenuOrder.push('-chat_logs'); aMenuOrder.push('-activity_log'); aMenuOrder.push('break'); aMenuOrder.push('-group_shows_board'); aMenuOrder.push(' <b class="pmenu_dot">•</b> '); aMenuOrder.push('-club_shows_board'); aMenuOrder.push('line_break'); aMenuOrder.push('top_rooms'); aMenuOrder.push('trending_rooms'); aMenuOrder.push('miss_mfc'); aMenuOrder.push('model_explorer'); aMenuOrder.push('-model_tags'); aMenuOrder.push('-topic_tags'); aMenuOrder.push('model_recommendations'); if(g_hSelf.has_bookmarks ) aMenuOrder.push('bookmarks'); aMenuOrder.push('line_break'); aMenuOrder.push('member_webcams'); aMenuOrder.push('-user_created_rooms'); aMenuOrder.push('-user_tags'); aMenuOrder.push('line_break'); aMenuOrder.push('broadcast'); }
 else if(g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ) { aMenuOrder.push('my_account'); aMenuOrder.push('user_settings'); if ( g_hSelf['active'] ) aMenuOrder.push('-my_profile'); else aMenuOrder.push('create_profile'); aMenuOrder.push('-mfc_share'); aMenuOrder.push('modelweb'); aMenuOrder.push('model_admin'); aMenuOrder.push('line_break'); aMenuOrder.push('message'); aMenuOrder.push('news_feed'); aMenuOrder.push('chat_logs'); aMenuOrder.push('activity_log'); aMenuOrder.push('line_break'); aMenuOrder.push('top_rooms'); aMenuOrder.push('trending_rooms'); aMenuOrder.push('miss_mfc'); aMenuOrder.push('model_explorer'); aMenuOrder.push('-model_tags'); aMenuOrder.push('-topic_tags'); aMenuOrder.push('line_break'); aMenuOrder.push('user_tags'); aMenuOrder.push('user_created_rooms'); aMenuOrder.push('member_webcams'); } var hSiteConfig = { 2: { 'my_account': { inline: 1, label: ( 'Account' ), a: ['account'], sprite_css: 'sprite-icons sprite-my_account16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/id-2.svg' }, 'user_settings': { inline: 1,
 label: 'Options', a: ['user_settings'], sprite_css: 'sprite-icons sprite-user_settings16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/settings-2.svg' }, 'cam_my_profile': { label: 'Profiles', a: ['profiles'], sprite_css: 'sprite-icons sprite-my_profile16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/profile-1.svg' }, 'php_message': { label: 'Mail', a: ['php_message'], sprite_css: 'sprite-icons sprite-message16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/mail-2.svg', extra: '<span class="pmenu_new highlight_bg" id="inbox_alert" title="You have new messages"></span>' }, 'message': { label: 'Mail', a: ['message'], sprite_css: 'sprite-icons sprite-message16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/mail-2.svg', extra: '<span class="pmenu_new highlight_bg" id="inbox_alert" title="You have new messages"></span>' }, 'activity_log': { inline: g_hSelf.access_level >= FCS.FCLEVEL_PREMIUM ? true : false, label: g_hSelf.access_level >= FCS.FCLEVEL_PREMIUM ? 'History&nbsp;' : 'Room History', a: ["activity_log"], icon_class: 'svghistory', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/history-1.svg' }, 'chat_logs': { inline: true, label: 'Logs', a: ['chat_logs'], sprite_css: 'sprite-icons sprite-archive16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/open-book-1.svg' }, 'top_rooms': { inline: 1, label: 'Popular', a: ["top_rooms"], sprite_css: 'sprite-icons sprite-top_rooms16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/group-1.svg' }, 'trending_rooms': { inline: 1, label: 'Trending',
 a: ["trending_rooms"], icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/activity-1.svg' }, 'broadcast': { label: 'My Cam', a: ["broadcast"], sprite_css: 'sprite-icons sprite-broadcast16x16', icon_url: t.g_hPlatform.image_url_cdn + 'images/flat/stroke/svg/camera-1.svg', special_icon: '<span id=broadcast_status_icon></span>', special_label: '<span id=broadcast_status>', extra: '</span>' } }, 1: { 'bookmarks': { label: 'Bookmarks', a: ['bookmarks'], icon: 'png/bookmark.48x48.png' }, 'my_account': { label: ( 'My Account' ), a: ['account'], sprite_css: 'sprite-icons sprite-my_account16x16', icon: 'png/my_account.48x48.png' }, 'user_settings': { label: 'Personal Options', a: ['user_settings'], sprite_css: 'sprite-icons sprite-user_settings16x16', icon: 'png/user_settings.48x48.png' }, 'my_profile': { label: ( g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ? 'Profile' : 'Profiles' ), a: ['my_profile',{ 'username': ( g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ? g_hSelf.username : '' ) }], sprite_css: 'sprite-icons sprite-my_profile16x16', icon: 'png/my_profile.48x48.png' }, 'model_admin': { label: 'Model Admin', a: ["model_admin"], icon_url: t.g_hPlatform.image_url_cdn + 'files/ico/logout-sm.gif' }, 'modelweb': { label: 'Broadcast', a: ["modelweb"], icon_url: t.g_hPlatform.image_url_cdn + 'files/ico/webcam-32x32.gif' }, 'mfc_share': {
 label: 'MFC Share', a: ['mfc_share_base',{ 'path': ( g_hSelf['access_level'] == FCS.FCLEVEL_MODEL ? g_hSelf.username : '' ) }], icon_a: ['mfc_share_base',{ username: g_hSelf['username'] }], icon_class: 'icon-emoji icon-emoji-mfcshare', emoji: "&#127796;" }, 'create_profile': { label: 'Create Your Profile', a: ['create_profile',{ user_id: g_hSelf['user_id'] }], sprite_css: 'sprite-icons sprite-my_profile_small', icon: 'my_profile_small.gif' }, 'trending_rooms': { label: 'Trending Rooms', a: ["trending_rooms"], icon_url: t.g_hPlatform.image_url_cdn + 'files/images/svg/trend_light.svg' }, 'top_rooms': { label: 'Most Popular Rooms', a: ["top_rooms"], sprite_css: 'sprite-icons sprite-top_rooms16x16', icon: 'png/top_rooms.48x48.png' }, 'user_created_rooms': { label: (g_hSelf.access_level == FCS.FCLEVEL_PREMIUM || g_hSelf.access_level == FCS.FCLEVEL_ADMIN) ? 'Rooms' : 'Member Rooms', a: ["user_created_rooms"], sprite_css: 'sprite-icons sprite-ucr16x16', icon: 'ucr.48x48.png' }, 'model_explorer': { label: ( g_hPlatform.Performer + ' Explorer' ), a: ["model_explorer"], sprite_css: 'sprite-icons sprite-model_matrix-lg', icon: 'model_matrix-lg.png' }, 'model_tags': { label: 'Tags', a: ["model_tags"], sprite_css: 'sprite-icons sprite-tag_model16x16', icon: 'tag_model.48x48.png' }, 'topic_tags': { label: 'Topics', a: ["model_topics"], icon: 'svg/topics.svg' }, 'activity_log': { label: g_hSelf.access_level >= FCS.FCLEVEL_PREMIUM ? 'History' : 'Room History', a: ["activity_log"], icon: "svg/open_door_history.svg",
 sprite_css: "sprite-icons sprite-open_door16x23", icon_class: "svghistory" }, 'model_recommendations': { label: 'Models You May Like', a: ["model_recommendations"], sprite_css: 'sprite-icons sprite-model_recommendations16x16', icon: 'png/model_recommendations.48x48.png' }, 'user_tags': { label: (g_hSelf.access_level == FCS.FCLEVEL_PREMIUM || g_hSelf.access_level == FCS.FCLEVEL_ADMIN) ? 'Tags' : 'Member Tags', a: ["user_tags"], sprite_css: 'sprite-icons sprite-tag_user16x16', icon: 'tag_user.48x48.png' }, 'miss_mfc': { label: ( 'Miss ' + t.g_hPlatform.name ), a: ["miss_mfc"], sprite_css: 'sprite-icons sprite-crown16x16', icon: 'crown.16x16.png', width: 16, extra: "<a href=\"#\" title=\"Miss MFC At a Glance\" class=\"missmfceye\" onclick=\"MissMFC.openPopup();\"></a>" }, 'premium_members': { label: 'Premium Members', a: ['faq',{ anchor: 'Premium_Membership'}], icon: '' }, 'tour_lounge': { tour: 1, label: 'Lounge', a: ['tour',{ anchor: 'lounge' }], sprite_css: 'sprite-icons sprite-martini_316x16', icon_url: t.g_hPlatform.image_url_cdn + 'files/ico/lounge-orange.48x48.png' }, 'tour_archives': { tour: 1, label: 'Archives', a: ['tour',{ anchor: 'archives' }], sprite_css: 'sprite-icons sprite-archive', icon: 'archive.gif' }, 'tour_private_gallery': { tour: 1, label: 'Private Gallery', a: ['tour',{ anchor: 'private_gallery' }], sprite_css: 'sprite-icons sprite-camera', icon: 'camera.gif' }, 'tour_mail': {
 tour: 1, label: 'MFC Mail', a: ['tour',{ anchor: 'mail' }], sprite_css: 'sprite-icons sprite-message16x16', icon: 'png/message.48x48.png' }, 'tour_my_webcam': { tour: 1, label: 'My Webcam', a: ['tour',{ anchor: 'my_webcam' }], sprite_css: 'sprite-icons sprite-webcam_medium', icon: 'webcam_medium.gif' }, 'tour_group_shows_board': { tour: 1, label: 'Group Shows', a: ["group_shows_board"], sprite_css: 'sprite-icons sprite-group_show_boardsmall', icon: 'group_show_board.small.png' }, 'tour_member_webcams': { tour: 1, label: 'Member Webcams', a: ['tour',{ anchor: 'member_webcams' }], sprite_css: 'sprite-icons sprite-member_webcams16x16', icon: 'member_webcams.48x48.png' }, 'cam_lounge': { label: 'Lounge', a: ["player",{ broadcaster_id: g_hLoungeIds['Lounge'], target: 'main', title: 'Go to the Lounge' }], icon_url: t.g_hPlatform.image_url_cdn + 'files/ico/lounge-orange.48x48.png', pmenu_tag: " draggable=\"true\" ondragstart=\" t.nDragUserId="+g_hLoungeIds['Lounge']+";\" ondrop=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) TopLoadPlayer({ broadcaster_id: g_hLoungeIds.Lounge, lounge_model_id: t.nDragUserId }); this.classList.remove('highlight_bg');  \" ondragover=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" ", extra: A("player",{ broadcaster_id: g_hLoungeIds['Lounge'], target: 'new_window', title: 'Open the Lounge in a popup window' }) + "<span class='sprite-link sprite-icons sprite-popup12x12'></span></a>" }, 'lounge': { label: 'Lounge', a: ["player",{ broadcaster_id: g_hLoungeIds['Lounge'], target: 'main', title: 'Go to the Lounge' }], sprite_css: 'sprite-icons sprite-lounge16x16', icon_url: t.g_hPlatform.image_url_cdn + 'files/ico/lounge-orange.48x48.png', pmenu_tag: " draggable=\"true\" ondragstart=\" t.nDragUserId="+g_hLoungeIds['Lounge']+";\" ondrop=\" event.preventDefault();\
 if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) TopLoadPlayer({ broadcaster_id: g_hLoungeIds.Lounge, lounge_model_id: t.nDragUserId }); this.classList.remove('highlight_bg');  \" ondragover=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" ", extra: A("player",{ broadcaster_id: g_hLoungeIds['Lounge'], target: 'new_window', title: 'Open the Lounge in a popup window' }) + "<span class='sprite-link sprite-icons sprite-popup12x12'></span></a>" }, 'lounge1000': { label: '1k', a: ["player",{ broadcaster_id: g_hLoungeIds['Lounge1000'], target: 'main', title: 'Go to the Lounge1000' }], sprite_css: 'sprite-icons sprite-lounge100016x16', pmenu_tag: " draggable=\"true\" ondragstart=\" t.nDragUserId="+g_hLoungeIds['Lounge1000']+";\" ondrop=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) TopLoadPlayer({ broadcaster_id: g_hLoungeIds.Lounge1000, lounge_model_id: t.nDragUserId }); this.classList.remove('highlight_bg');  \" ondragover=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" ", extra: A("player",{ broadcaster_id: g_hLoungeIds['Lounge1000'], target: 'new_window', title: 'Open the Lounge1000 in a popup window' }) + "<span class='sprite-link sprite-icons sprite-popup12x12'></span></a>" }, 'lounge10000': { label: '10k', a: ["player",{ broadcaster_id: g_hLoungeIds['Lounge10000'], target: 'main', title: 'Go to the Lounge10000' }], sprite_css: 'sprite-icons sprite-lounge1000016x16', pmenu_tag: " draggable=\"true\" ondragstart=\" t.nDragUserId="+g_hLoungeIds['Lounge10000']+";\" ondrop=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) TopLoadPlayer({ broadcaster_id: g_hLoungeIds.Lounge1000, lounge_model_id: t.nDragUserId }); this.classList.remove('highlight_bg');  \" ondragover=\" event.preventDefault(); if(t.g_hUsers[t.nDragUserId] && t.g_hUsers[t.nDragUserId].access_level==4 ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" ", extra: A("player",{ broadcaster_id: g_hLoungeIds['Lounge10000'], target: 'new_window', title: 'Open the Lounge10000 in a popup window' }) + "<span class='sprite-link sprite-icons sprite-popup12x12'></span></a>" }, 'php_message': { label: ( g_hPlatform.id == PLAT_MFC ? 'MFC Mail' : 'Mail' ), a: ['php_message'], sprite_css: 'sprite-icons sprite-message16x16', icon: 'png/message.48x48.png', extra: '<span class="pmenu_new highlight_bg" id="inbox_alert" title="You have new messages"></span>' }, 'message': { label: ( g_hPlatform.id == PLAT_MFC ? 'MFC Mail' : 'Mail' ), a: ['message'],
 sprite_css: 'sprite-icons sprite-message16x16', icon: 'png/message.48x48.png', extra: '<span class="pmenu_new highlight_bg" id="inbox_alert" title="You have new messages"></span>' }, 'chat_logs': { label: 'Archives', a: ['chat_logs'], sprite_css: 'sprite-icons sprite-archive16x16', icon: 'png/archive.48x48.png' }, 'group_shows_board': { label: 'Groups', a: ["group_shows_board"], sprite_css: 'sprite-icons sprite-group_show_boardsmall', icon: 'group_show_board.png' }, 'club_shows_board': { label: 'Club Shows', a: ["club_shows_board"] }, 'private_gallery': { label: 'Gallery', a: ['private_gallery'], sprite_css: 'sprite-icons sprite-exclusive_gallery16x16', icon: 'png/exclusive_gallery.48x48.png' }, 'news_feed': { label: 'News Feed', a: ["news_feed"], sprite_css: 'sprite-icons sprite-newsfeed16x16', icon: 'newsfeed.48x48.png' }, 'member_webcams': { label: 'Member Webcams', a: ["member_webcams"], sprite_css: 'sprite-icons sprite-member_webcams16x16', icon: 'png/member_webcams.48x48.png' }, 'broadcast': { label: 'Start My Webcam', a: ["broadcast"], sprite_css: 'sprite-icons sprite-broadcast16x16', icon: 'png/broadcast.48x48.png', special_icon: '<span id=broadcast_status_icon></span>', special_label: '<i id=broadcast_status>', extra: '</i>' } } };
 hSiteConfig[PLAT_CAM]['cam_lounge'] = hSiteConfig[PLAT_MFC]['lounge']; if(g_hPlatform.id == PLAT_CAM ) { hSiteConfig[PLAT_CAM]['cam_lounge']['icon_url'] = t.g_hPlatform.image_url_cdn + "images/flat/stroke/svg/coffee-1.svg"; } var hConfig = hSiteConfig[ g_hPlatform.id ]; if(g_hUsers[ g_hLoungeIds.Lounge10000 ] && hConfig['lounge'] ) { delete hConfig['lounge']['icon_url']; } var aMenu=[]; for(var n=0; n < aMenuOrder.length; n++ ) { var thing = aMenuOrder[n]; if(thing.charAt(0) == '-' ) { thing = thing.substr(1); hConfig[ thing ].inline = true; } if(hConfig && hConfig[ thing ] ) { aMenu.push(DrawMenuItem(hConfig[ thing ] ) ); } else if(thing == 'break' ) { aMenu.push("<br/>"); } else if(thing == 'line_break' ) { aMenu.push("<div class=\"pmenu_divider\"></div>"); } else if(thing == 'premium_features' ) { aMenu.push("<div style=\"padding-top:10px;padding:10px 0px 10px 0px;white-space:normal;width:100%;text-align:center;font-size:12px;\"> Many more options for " + A('faq',{ anchor: 'Premium_Membership'}) + "Premium Members</a></div>"); } else { aMenu.push(thing ); } } return aMenu;
}function DrawMenuItem(hItem ){ var sStyle = ''; var sUrl = ''; if ( hItem.icon_url ) { sUrl = hItem.icon_url; } else if(hItem.icon ) { sUrl = t.g_hPlatform.image_url_cdn + "files/images/icons/" + hItem.icon; } var icon_class = ( hItem.icon_class ) ? hItem.icon_class : ''; var sDimensions=''; if(hItem.width ) { sDimensions += "width=" + hItem.width + " "; } if(hItem.height ) { sDimensions += "height=" + hItem.height + " "; } if(hItem.a ) { hItem.a = A.apply(this,hItem.a); } if ( hItem.emoji ) { hItem.icon = "<i class=\"pme_icon " + icon_class + "\">"+hItem.emoji+"</i>"; } else if ( sUrl ) { hItem.icon = "<i"+"mg class=\"pme_icon " + icon_class + "\" sr"+"c=" + sUrl + " " + sDimensions + ">"; } var sTpl; sTpl = " <div class=\"pmenu" + ( hItem.inline ? ' pmenuc' : '' ) + "\" %pmenu_tag% /> %a% %special_icon% %icon% %special_label% " + ( hItem.label ? '<span>%label%</span>' : '' ) + " %extra% </a> </div> "; hItem.extra = hItem.extra || ''; hItem.special_icon = hItem.special_icon || ''; hItem.special_label = hItem.special_label || ''; if(hItem.tour ) { hItem.pmenu_tag = " style='margin-left:10px;' "; } return MfcStringUtilities.parse_template(sTpl,hItem);}FriendsList = { aChatIconEvaluationList: []};events.onRx(FCS.FCTYPE_SESSIONSTATE,function(fcMsg){ if(FcAddFriend.bFriendsLoaded && g_hUsers[ fcMsg.arg2 ] && g_hUsers[ fcMsg.arg2 ]['friend'] && g_hUsers[ fcMsg.arg2 ]['previous_state'] != g_hUsers[ fcMsg.arg2 ]['state'] ) { var hOptions = {}; if(fcMsg.obj.uid && g_hUsers[ fcMsg.obj.uid ] && g_hUsers[ fcMsg.obj.uid ].state != FCS.FCVIDEO_OFFLINE ) { FriendsList.UpdateFriend(g_hUsers[ fcMsg.obj.uid ]); } }});FriendsList.Load = function(hOptions ){ hOptions = hOptions || {}; if(! hOptions.force && FnRateLimit('FriendsList.Load',2500,function(){ FriendsList.Load(hOptions); },{ debug:0 }) ) { return; } var aMenu = new Array(); if(g_hSelf.access_level <= FCS.FCLEVEL_GUEST ) { SetHTML('online_friends_list',"\n <div \"fs10 tac mt10 mb10\"> Your online " + t.g_hPlatform.performer + "s and friends are shown here. </div> "); SetHTML('offline_friends_list',"\n <div class\"fs10 tac mt10 mb10\"> You can message your offline friends too! </div> "); } else { var hFriendCounts = { bookmarked_models: 0, members: 0, models: 0 }; var aFriendsKeys = FriendsKeys();
 var aList = SortedUserKeys('username', false, aFriendsKeys); var haOnline = { models_bookmarked: new Array(), models: new Array(), members_bookmarked: new Array(), members: new Array() }; for(var nK=0; nK < aList.length; nK++ ) { var nRemoteUserId = aList[nK]; if(g_hUsers[nRemoteUserId] && g_hUsers[nRemoteUserId]['friend'] == true && g_hUsers[nRemoteUserId]['state'] != FCS.FCVIDEO_OFFLINE && typeof(g_hUsers[nRemoteUserId]['state'] ) != 'undefined' ) { var sType = ( g_hUsers[nRemoteUserId].access_level == FCS.FCLEVEL_MODEL ? 'models' : 'members' ) + ( g_hUsers[nRemoteUserId].bookmarked ? '_bookmarked' : '' ); haOnline[ sType ].push(FriendsList.BuildEntry(nRemoteUserId ) ); if(g_hUsers[nRemoteUserId].access_level == FCS.FCLEVEL_MODEL && g_hUsers[nRemoteUserId].bookmarked ) hFriendCounts.bookmarked_models++; else if(g_hUsers[nRemoteUserId].access_level == FCS.FCLEVEL_MODEL ) hFriendCounts.models++; else hFriendCounts.members++; } } var nOfflineLimit = 0; var aOffline = new Array(); aList = SortedUserKeys('lastlogin', true, aFriendsKeys); for(var nK=0; nK < aList.length; nK++ ) { var nRemoteUserId = aList[nK]; if ( g_hUsers[nRemoteUserId] && g_hUsers[nRemoteUserId]['friend'] == true ) { if ( g_hUsers[nRemoteUserId]['state'] != FCS.FCVIDEO_OFFLINE && typeof(g_hUsers[nRemoteUserId]['state']) != 'undefined' ) { continue; } if(nOfflineLimit >= 50 ) { aOffline.push("...<br><br>This list is limited to the 50 friends who have most recently logged on."); break; } aOffline.push(FriendsList.BuildEntry(nRemoteUserId ) ); nOfflineLimit++;
 } } var aOnline = new Array(); aOnline.push(" <div class=\"posr\"><img class=\"simenu_toggle_preview\" src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/png/person_profile_gray.png\" id=friends_list_view_mode_icon onClick=\"FriendsList.ToggleViewMode();\" title=\"Toggle cam previews on or off.\"></div> "); if(t.g_hSelf['away_state'] ) { aOnline.push(" <div class=\"highlight_bg fs12 mb10 p2 tac\"> Status: <b>Away</b> <span class=\"fs10\">(<a href=\"javascript:ResetAwayStatus();\">I'm back</a>)</span> </div> "); } var nSpecifiedHeight = 0; if(mfcClickDrag.hSpecifiedDimension.online_friends_scroll ) { nSpecifiedHeight = mfcClickDrag.hSpecifiedDimension.online_friends_scroll.height; } else if(g_hSelf.online_friends_list_height && ! g_UA.mobile ) { nSpecifiedHeight = g_hSelf.online_friends_list_height; } aOnline.push(" <div class=\"simenu_content simenu_online_friends\" id=\"online_friends_scroll\" style=\"" + ( nSpecifiedHeight ? ('height:' + nSpecifiedHeight + ';') : '' ) + "\"> "); if(1 ) { var obactive = ( haOnline.models_bookmarked.length || haOnline.members_bookmarked.length ) ? 'active' : ''; aOnline.push(" <div class=\"simenu_foot "+obactive+" \" id=\"online_bookfriends\" ondrop=\" event.preventDefault(); if(t.nDragUserId ) {  Bookmarks.Add(t.nDragUserId ); TxAddRemove('friend', t.nDragUserId, 'add' );  } t.nDragUserId=0; \" ondragover=\" event.preventDefault(); if(! FriendsList.drag ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \"\
 > "); for(var n=0; n < haOnline.models_bookmarked.length; n++ ) { aOnline.push(haOnline.models_bookmarked[n] ); } for(var n=0; n < haOnline.members_bookmarked.length; n++ ) { aOnline.push(haOnline.members_bookmarked[n] ); } aOnline.push(" </div> "); } aOnline.push(" <div  ondrop=\" event.preventDefault(); if(! t.nDragUserId ) { return; } if(Bookmarks.drag ) { Bookmarks.Delete(t.nDragUserId ); } if(t.g_hUsers[t.nDragUserId].bookmarked ) { Bookmarks.Delete(t.nDragUserId ); } if(t.nDragUserId ) { TxAddRemove('friend', t.nDragUserId, 'add' ); } t.nDragUserId=0; \" ondragover=\" event.preventDefault(); if(! FriendsList.drag ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" > <div class=\"simenu_foot\"> [<a id=friends_list_hide_models title='Hide or reveal your " + t.g_hPlatform.performer + " friends.' href=\"javascript:FriendsList.HideRevealFriends('models', g_hSelf.friends_list_hide_models ? 0 : 1 );\" style=\"text-decoration:none;\">" + ( g_hSelf.friends_list_hide_models ? '+' : '-' ) + "</a>] <span class=\"fsi\">" + t.g_hPlatform.Performer + " Friends</span> </div> <div id=online_friends_models class=\"simenu_foot\" style=\"display:" + ( g_hSelf.friends_list_hide_models ? 'none' : 'block' ) + ";\"> "); for(var n=0; n < haOnline.models.length; n++ ) { aOnline.push(haOnline.models[n] ); } aOnline.push("</div>"); aOnline.push(" <div class=\"simenu_foot\" id=\"online_friends_summary_models\" style=\"display:" + ( g_hSelf.friends_list_hide_models ? 'block' : 'none' ) + ";\"> <i>" + haOnline.models.length + " online.</i> [<a href=\"javascript:FriendsList.HideRevealFriends('models', 0);\">Show</a>] </div>"); if(haOnline.members.length ) { aOnline.push(" <div class=\"simenu_foot \"> [<a id=friends_list_hide_members title='Hide or reveal your member friends.' href=\"javascript:FriendsList.HideRevealFriends('members', g_hSelf.friends_list_hide_members ? 0 : 1 );\" style=\"text-decoration:none;\">" + ( g_hSelf.friends_list_hide_members ? '+' : '-' ) + "</a>] <span class=\"fsi\">Member Friends</span> </div>\
 <div class=\"simenu_foot\" id=\"online_friends_members\" style=\"display:" + ( g_hSelf.friends_list_hide_members ? 'none' : 'block' ) + ";\"> "); for(var n=0; n < haOnline.members.length; n++ ) { aOnline.push(haOnline.members[n] ); } aOnline.push("</div>"); aOnline.push("<div class=\"simenu_foot\" id=online_friends_summary_members style=\"display:" + ( g_hSelf.friends_list_hide_members ? 'block' : 'none' ) + ";\"><i>" + haOnline.members.length + " online.</i> [<a href=\"javascript:FriendsList.HideRevealFriends('members', 0);\">Show</a>]</div>"); } aOnline.push("</div>"); if ( g_bLoginDone && haOnline.members.length == 0 && haOnline.models.length == 0 ) aOnline.push(" <div class=\"no_models\"  ondrop=\" event.preventDefault(); if(t.nDragUserId ) {  TxAddRemove('friend', t.nDragUserId, 'add' );  } t.nDragUserId=0; \" ondragover=\" event.preventDefault(); if(! FriendsList.drag ) this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" > " + ( g_UA.draggable ? "(You can drag " + t.g_hPlatform.performer + "s into this area)" : '' ) + " </div>" ); if ( g_bLoginDone && aOffline.length == 0 ) aOffline.push("Your offline friends will appear in this box."); var nOnlineCount = 0; for(var nUserId in g_hUsers) { if(g_hUsers[nUserId].notes && g_hUsers[nUserId].state < FCS.FCVIDEO_OFFLINE ) { nOnlineCount++; } }; var nNotesCountSpacer = ( nOnlineCount < 10 ) ? '' : 'style="position:relative;right:12px"'; aOnline.push(" </div> </div> </div> <div id=online_friends_control_message></div> "); aOnline.push(" <div class=\"simenu_foot\"> <div class=\"mb6\"> " + A('manage_lists',{'anchor':'friends'}) + "Manage All Friends</a> </div>\
 <div class=\"mb6\" > <span ondrop=\" event.preventDefault(); if(t.nDragUserId && g_hUsers[t.nDragUserId] ) { PmUsernamePrompt.Form({ username: g_hUsers[t.nDragUserId].username, lookup: true }); } t.nDragUserId=0; this.classList.remove('highlight_bg'); \" ondragover=\"event.preventDefault(); this.classList.add('highlight_bg'); \" ondragleave=\" event.preventDefault(); this.classList.remove('highlight_bg'); \" >" + A("pm_prompt") + "User Lookup</a></span> <i class=\"divider\">|</i> " + A("pm_friend",{ user_id:0, title:("Open a new Private Message window.")}) + "Send PM</a> </div> <div " + nNotesCountSpacer + "> " + A('messenger') + "Notifications</a> <i class=\"divider\">|</i> " + A("user_notepad") + "Notes" + ( nOnlineCount ? ( " (" + nOnlineCount + ")" ) : '' ) + "</a> </div> "); if(g_UA.draggable && g_hPlatform.id == PLAT_MFC ) { aOnline.push(" <div class=\"simenu_trashdrop\"  ondrop=\" event.preventDefault(); this.classList.remove('highlight_bg'); if(t.nDragUserId ) { TxAddRemove('friend', t.nDragUserId, 'remove' ); t.nDragUserId=0; } \" ondragover=\" event.preventDefault(); this.firstChild.style.opacity=1; this.classList.add('highlight_bg'); \" ondragleave=\" this.firstChild.style.opacity=0.5; this.classList.remove('highlight_bg'); \" title=\"Drag Friend avatars here to remove them from your Friends List.\" onClick=\" DhtmlPrompt({ prompt_type: 'alert', message: 'Drag Friends here to remove them from your Friends List.' }); \" ><img class=\"simenu_trash\" src='" + t.g_hPlatform.image_url_cdn + "files/images/svg/trash.svg'></div> "); } aOnline.push("</div>"); var nScrollTop; var oList = GetEl('online_friends_scroll'); if(oList ) { nScrollTop = oList.scrollTop; } var onlineEl = GetEl('online_friends_list'); if ( onlineEl ) { onlineEl.innerHTML = aOnline.join(''); } var sHtml = aOffline.join(''); var sHtml_crc = MfcCrc32.prototype.string(sHtml); if(sHtml_crc != FriendsList.offline_friends_list_crc32 ) { SetHTML('offline_friends_list',sHtml); FriendsList.offline_friends_list_crc32 = sHtml_crc; } var oList = GetEl('online_friends_scroll'); if(oList ) { oList.scrollTop = nScrollTop; }
 if(FcAddFriend.bHasFriends && ( ! FcAddFriend.bFriendsLoaded || ( FcAddFriend.LoadingMessage.nPreviousValue != t.FcAddFriend.nLoadingMax ) ) ) { FcAddFriend.LoadingMessage(); } FriendsList.RefreshChatIcons(); var sLink = ''; if(hFriendCounts.bookmarked_models ) { sLink += "<span title=\"Bookmarked Models Online\">" + hFriendCounts.bookmarked_models + "</span>"; } if(hFriendCounts.models ) { sLink += "<span title=\"Model Friends Online\">" + hFriendCounts.models + "</span>"; } if(hFriendCounts.members ) { sLink += "<span title=\"Member Friends Online\">" + hFriendCounts.members + "</span>"; } if(sLink ) { sLink = sLink; } oEl = GetEl('online_friend_count'); if(oEl && sLink != '' ) oEl.innerHTML = sLink; var oEl = GetEl('friends_list_view_mode_icon'); if(oEl ) { oEl.src = t.g_hPlatform.image_url_cdn + 'files/images/icons/png/' + ( g_hSelf.friends_list_view_mode == 'previews' ? 'person_profile_gray_x.png' : 'person_profile_gray.png' ); }; }};FriendsList.InsertFriend = function(hUser,hOptions ){ var opt = hOptions || {}; var el = GetEl('online_friend_' + hUser.user_id ); if(el ) { clearTimeout(FriendsList.RemoveFriendTimeout); el.classList.remove('remove_friend'); return; } var sContainer; if(hUser.access_level == FCS.FCLEVEL_MODEL && hUser.bookmarked && hUser.friend ) { sContainer = 'online_bookfriends'; } else if(hUser.access_level == FCS.FCLEVEL_MODEL && hUser.friend ) { sContainer = 'online_friends_models'; } else if(hUser.friend ) {
 sContainer = 'online_friends_members'; } else { console.log('friend container not found, reloading friendslist:',hUser); FriendsList.Load({force:true}); return; } var sH = FriendsList.BuildEntry(hUser.user_id, {special_class:'insert_friend'} ); var container = GetEl(sContainer); if(! container ) { console.log("container not found: ",hUser,caller()); return; } else { container.classList.add('active'); } var el = document.createElement('div'); el.innerHTML = sH; el = el.firstChild; while(el != null && el.nodeType == 3 ) { //sometimes there is a textnode
 el = el.nextSibling; } var els = container.getElementsByClassName('friends_list_entry'); var inserted = false; for(var a=0; a<els.length; a++ ) { var lcun = els[a].getAttribute('data-lcun'); var res = lcun.localeCompare(hUser.username.toLowerCase() ); if(res == 1 ) { container.insertBefore(el,els[a]); inserted = true; break; } } if(! inserted ) { container.appendChild(el ); } FriendsList.OfflineFriendsListHandler(hUser,{remove:true}); setTimeout(function(){el.classList.remove('insert_friend');},10000);};FriendsList.RemoveFriendTimeout;FriendsList.RemoveFriend = function(hUser ){ var el = GetEl('online_friend_' + hUser.user_id ); if(el )
 { el.classList.add('remove_friend'); FriendsList.RemoveFriendTimeout = setTimeout(function(){ if(el && el.parentNode ) { el.parentNode.removeChild(el); FriendsList.OfflineFriendsListHandler(hUser,{add:true}); } }, 4000); }};FriendsList.UpdateFriend = function (hUser){ var el = GetEl('online_friend_' + hUser.user_id ); if(el ) { el.innerHTML = 'updating...'; var sH = FriendsList.BuildEntry(hUser.user_id, {special_class:'update_friend'} ); el.innerHTML = sH; } else { FriendsList.InsertFriend(hUser); }};FriendsList.OfflineFriendsListHandler = function ( hUser, opt ) { if ( typeof hUser == 'undefined' || typeof opt == 'undefined' || !hUser.friend ) return; var opt = opt || {}; var container = GetEl('offline_friends_list'); if ( opt.add ) { var sH = FriendsList.BuildEntry(hUser.user_id, {special_class:'insert_friend offline_friend'} ); var el = document.createElement('div'); var el1 = container.firstChild; el.innerHTML = sH; el = el.firstChild; while(el != null && el.nodeType == 3 ) { el = el.nextSibling; } container.insertBefore(el,el1); } else { var els = container.getElementsByClassName('mcs_friend_bookmark'); for(var a=0; a<els.length; a++ ) { var lcun = els[a].getAttribute('data-lcun'); if (lcun == hUser.username.toLowerCase() ) { els[a].remove();
 } } }};FriendsList.ToggleViewMode = function(sMode ){ if(! sMode ) { sMode = g_hSelf.friends_list_view_mode == 'previews' ? 'slim' : 'previews'; } UserExtensions.Write('friends_list_view_mode', sMode ); FriendsList.Load({ force: true });};FriendsList.HideRevealFriends = function(sType, nVal ){ if(nVal != undefined ) { UserExtensions.Write('friends_list_hide_' + sType, nVal ); } var el = GetEl('friends_list_hide_' + sType ); if(el ) { el.innerHTML = g_hSelf['friends_list_hide_' + sType ] ? '+' : '-'; } var el = GetEl('online_friends_' + sType ); if(el ) { el.style.display = g_hSelf['friends_list_hide_' + sType ] ? 'none' : 'block'; } var el = GetEl('online_friends_summary_' + sType ); if(el ) { el.style.display = g_hSelf['friends_list_hide_' + sType ] ? 'block' : 'none'; }};FriendsList.BuildEntry = function(nUserId, hOptions ){ hOptions = hOptions || {}; var aBio = new Array(); var hUser = g_hUsers[nUserId]; var hCamIcons = { notes: '' }; var bPreviewsMode = false; if(typeof(hUser.access_level) != 'undefined' && hUser.access_level == FCS.FCLEVEL_MODEL ) { if(hOptions.mode == 'bookmark' ) { if(g_hSelf.bookmarks_list_view_mode == 'previews' ) { bPreviewsMode = true; } } else if(g_hSelf.friends_list_view_mode == 'previews' ) { bPreviewsMode = true; } } var sStyle = 'display:inline-block;';
 if(hUser['state'] == FCS.FCVIDEO_OFFLINE || typeof(hUser['state']) == 'undefined' ) { sStyle += "opacity:0.5;"; } else if ( hUser.access_level != FCS.FCLEVEL_MODEL ) { sStyle += "cursor:default;"; } if(g_UA.mobile ) aBio.push("&nbsp;&nbsp;"); var sDragSource = hOptions.mode == 'bookmark' ? 'Bookmarks' : 'FriendsList'; var sAvatarTitle = ( hUser.access_level==FCS.FCLEVEL_MODEL ) ? 'title="Show Options Menu for '+hUser['username']+'"' : ''; var sAvatar = "<a " + sAvatarTitle + ">"; var sClass = ''; if(hUser.access_level == FCS.FCLEVEL_MODEL && hUser['state'] != FCS.FCVIDEO_OFFLINE ) { sClass += ' cpo_listeners'; } else { sClass += ' avatar_member_friend'; } if(hUser.avatars ) { var sSrc; if(hUser['broken_avatar'] ) { sSrc = t.g_hPlatform.image_url_cdn + 'files/images/misc/generic_avatar.20x20.gif'; } else { sSrc = AvatarUrl(nUserId, bPreviewsMode ? 30 : 20 ); } sAvatar += "<img "; sAvatar += " draggable=\"true\" ondragstart=\" "+sDragSource+".drag=true; t.nDragUserId="+nUserId+"; \" ondragend=\""+sDragSource+".drag=false;\" sr"+"c='" + sSrc + "' class='"+sClass+"' data-cpouid='"+nUserId+"' data-cpo_left_click=menu onError='t.brokenAvatarImage(this,"+nUserId+")' >"; } else if(hUser['state'] != FCS.FCVIDEO_OFFLINE ) { var sSrc = popUserMenu.people_icon(nUserId );
 sAvatar += "<img src='" + sSrc + "' class=\""+sClass+"\" style=\"" + sStyle + "\" href=\"javascript:popUserMenu.open(" + nUserId + ",g_oDhtmlPopup); \" draggable=\"true\" ondragstart=\" "+sDragSource+".drag=true; t.nDragUserId="+nUserId+"; \" ondragend=\""+sDragSource+".drag=false;\">"; } else { var sSrc = popUserMenu.people_icon(nUserId ); sAvatar += "<img src='" + sSrc + "' class=\""+sClass+"\" style=\"" + sStyle + "\" >"; } sAvatar += "</a>"; if(( hUser['camserv'] > 0 && hUser['access_level'] == FCS.FCLEVEL_PREMIUM ) || ( IsBroadcastState(hUser['state'] ) && hUser['access_level'] == FCS.FCLEVEL_MODEL && hUser.platform_id == t.g_hPlatform.id ) ) { if(g_UA.mobile ) aBio.push("&nbsp;&nbsp;"); var sCamLink = A("pm_friend",{user_id:hUser['user_id'],username:hUser['username'],load_video:true,title:("View Webcam of " + hUser.username + " in PM window.")}); aBio.push(sCamLink + "<img src=\"" + t.g_hPlatform.image_url_cdn + "files/ico/webcam.48x48.png\" width=14 style='display:inline-block;vertical-align:middle;'></a>"); hCamIcons.pm_video = sCamLink + "<img class='friends_list_cam_icon' src='" + t.g_hPlatform.image_url_cdn + "images/cam/png/webcam.png'></a>"; } if ( IsBroadcastState(hUser['state'] ) && hUser['access_level'] == FCS.FCLEVEL_MODEL && hUser.platform_id == t.g_hPlatform.id ) { var sSprite,sIcon; var sTitle = "Enter Chat Room of " + hUser.username + "."; if (hUser['state'] == FCS.FCVIDEO_TX_IDLE ) { sSprite = 'sprite-icons sprite-open_door'; sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/open_door" + ( NightMode_Top.enabled ? "_night" : "" ) + ".svg"; } else if(hUser['state'] == FCS.FCVIDEO_TX_GRP ) { sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/closed_door_g.svg"; sTitle += " She is in a Group Show.";
 } else if(hUser['state'] == FCS.FCVIDEO_TX_CLUB ) { sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/closed_door_c.svg"; sTitle += " She is in a Club Show."; } else if(hUser['state'] == FCS.FCVIDEO_TX_PVT ) { if(hUser['truepvt'] ) { sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/closed_door_locked.svg"; sTitle += " She is in a True Private Session."; } else { sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/svg/closed_door.svg"; sTitle += " She is in a Private Session."; } } else { sIcon = t.g_hPlatform.image_url_cdn + "files/images/icons/away_clock.12x12.png"; sTitle += " She is away from her cam."; } if(g_UA.mobile ) aBio.push("&nbsp;&nbsp;"); if(sIcon ) aBio.push(A('player',{ broadcaster_id: nUserId, target: 'main',title: sTitle}) + "<img src=\"" + sIcon + "\" style='display:inline-block;vertical-align:middle;'></a>"); else aBio.push(A('player',{ broadcaster_id: nUserId, target: 'main',title: sTitle}) + "<span class='sprite-link " + sSprite + "' style='display:inline-block;vertical-align:middle;'></span></a>"); hCamIcons.public = A('player',{ broadcaster_id: nUserId, target: 'main',title: sTitle}) + "<img class='friends_list_cam_icon' src='" + t.g_hPlatform.image_url_cdn + "images/cam/png/door-5-xxl.png' height=16></a>"; if ( hUser['whiteboard1'] ) { var hPopupOpts = { username: hUser.username, user_id: nUserId, channel: PublicChannel(nUserId), height: 500, width: 800, popup_title: ( PossessiveApostrophe(hUser.username) + " Whiteboard")
 }; hCamIcons.notes += A('whiteboard',hPopupOpts) + "<img class='friends_list_cam_icon' src='" + t.g_hPlatform.image_url_cdn + "images/flat/stroke/svg/imac-1.svg'></a>"; if(WhiteboardNotice && WhiteboardNotice.clickLink ) aBio.push("<a href=# onClick=\"WhiteboardNotice.clickLink({ user_id: " + nUserId + ", dhtml_popup: true });\">"); else aBio.push(A('whiteboard',hPopupOpts) ); aBio.push("<img title='View Whiteboard' src='" + t.g_hPlatform.image_url_cdn + "images/png/presentation.16x16.png' style='vertical-align:middle;'></span></a>"); } } if ( hUser['notes'] ) { hCamIcons.notes += A('user_notepad',{ load_user_id: nUserId, target:'new_window' }) + " <img class='friends_list_cam_icon' src='" + t.g_hPlatform.image_url_cdn + "images/cam/png/note-2-xxl.png' height=16></a>"; aBio.push(A('user_notepad',{ load_user_id: nUserId, target:'new_window' }) + "<img src='" + t.g_hPlatform.image_url_cdn + "files/images/icons/notes.png' style='vertical-align:middle;'></span></a>"); } if(! Bookmarks.bPresentationDelay && hUser.bookmarked && ! hUser.highlight_bookmarked ) { hUser.highlight_bookmarked = 1; var _hUser = hUser; setTimeout(function(){ if(_hUser.highlight_bookmarked ) { _hUser.highlight_bookmarked=-1; Bookmarks.Render(); } },20000); } else { hUser.highlight_bookmarked = -1; } var sSpecialClass = (typeof hOptions.special_class != 'undefined' ) ? hOptions.special_class : ''; var sIcons = aBio.join(''); var sData = " data-lcun=\"" + hUser.username.toLowerCase() + "\" "; if(bPreviewsMode && hUser['state'] != FCS.FCVIDEO_OFFLINE ) { var sUserFont = MfcCustomFonts.prototype.get_style(hUser ); var sOpacity; var sRoomCount = ( typeof(hUser.room_count) !== 'undefined' ) ? hUser.room_count : '-'; var sRoomCountTitle = ( typeof(hUser.room_count) !== 'undefined' ) ? 'title=\"' + hUser.room_count + ' in ' + hUser['username'] + '\'s chat room\"' : ''; if(hUser.room_count > 500 ) { sOpacity = "1.0"; } else if(hUser.room_count > 100 ) { sOpacity = "0.9"; } else if(hUser.room_count > 30 ) { sOpacity = "0.7"; } else { sOpacity = "0.5"; } var sH = "\
 <div class=\"list_entry " + ( hOptions.mode || 'friend' ) + "s_list_entry model_cell_small mcs_friend_bookmark mcs_previews_"+bPreviewsMode+" "+sSpecialClass+"\"\" id=online_" + ( hOptions.mode || 'friend' ) + "_" + nUserId + " " + sData + " > <div class=\"mcs_avatar\" oncontextmenu=\" return false; \">" + sAvatar + "</div> <div onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup); \"> <div class=\"mcs_handle\">" + A("pm_friend",{ user_id: hUser['user_id'], username: hUser['username'] }) + "<span class='user_style username' style=\"" + sUserFont + "\" onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\" >" + hUser['username'] + "</span></a></div> <div class=\"mcs_info\">" + sIcons + "</div> <div class=\"mcs_roomcount\" " + sRoomCountTitle + " style=\"opacity:" + sOpacity + ";\"><b>" + sRoomCount + "</b><i class=\"bg_person\"></i></div> <div class=\"mcs_livesnap_outer\"><div class=\"mcs_livesnap_inner\"><img class=\"tiny_livesnap_border\" src=\"" + t.LiveSnapUrl(hUser.user_id,100) + "\" " + g_oAnimatedLiveSnaps.mouseEventCode(hUser.user_id) + "></div></div> </div> </div> "; return sH; } else if(hUser['state'] != FCS.FCVIDEO_OFFLINE ) { var sStatusClass = ' friendslist_item'; var sStyle = ''; if (IsSessionState(hUser['state'])) { sStatusClass += ' friend_sessionbroadcast'; } else { sStatusClass += ' friend_sessionbroadcast friend_active'; } sStyle += MfcCustomFonts.prototype.get_style(hUser ); var sH = " <div class=\"list_entry " + ( hOptions.mode || 'friend' ) + "s_list_entry model_cell_small mcs_friend_bookmark mcs_member_friend mcs_previews_"+bPreviewsMode+" " + sStatusClass + " " + sSpecialClass +"\" " + sData + " id=\"online_" + ( hOptions.mode || 'friend' ) + "_" + nUserId + "\" style='" +";' >" + A("pm_friend",{ user_id: hUser['user_id'], username: hUser['username'], style: sStyle }) + "<div class=online_friend_chat_icon id=online_friend_chat_bubble_" + nUserId + "></div>" + "<div class=\"mcs_avatar\" oncontextmenu=\" return false; \">" + sAvatar + "</div>" + "<div class=\"mcs_handle\" xonMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\" style=\"min-width:100px;\" onmousedown=\" this.firstChild.firstChild.setAttribute('draggable', false); this.firstChild.addEventListener('contextmenu', (e) => { e.stopPropagation(); } ); \" onmouseup=\" setTimeout(()=>{this.firstChild.firstChild.setAttribute('draggable', true);},7000); \" >" + A("pm_friend",{ user_id: hUser['user_id'], username: hUser['username'], style: sStyle }) + "<span class='user_style username' style=\"" + sStyle + "\" onmousedown=\" event.stopPropagation(); popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\" \" draggable=\"true\" ondragstart=\" "+sDragSource+".drag=true; t.nDragUserId="+nUserId+"; \" ondragend=\""+sDragSource+".drag=false;\" >" + hUser['username'] + "</span> </a></div>" + "<div class=\"mcs_info\">" + sIcons + "</div>" + "</div>"; return sH;
 } else { var sStyle = MfcCustomFonts.prototype.get_style(hUser ); return "<div class=\"list_entry " + ( hOptions.mode || 'friend' ) + "s_list_entry model_cell_small mcs_friend_bookmark mcs_previews_false offline_friend " + sSpecialClass + "\"" + sData + "> <div class=\"mcs_avatar\">"+ sAvatar + "</div> <div class=\"mcs_handle\" title=\"Send Private Message\">"+ A("pm_friend",{user_id:hUser['user_id'],username:hUser['username']}) + " <span class='user_style username' style=\"" + sStyle + "\" onmousedown=\" event.stopPropagation(); popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\">" + hUser['username'] + "</span></a></div><div class=\"mcs_info\">" + sIcons + "</div></div>"; }};FriendsList.RefreshChatIcons = function(nUserId ){ FriendsList.aChatIconEvaluationList = []; if(nUserId ) { FriendsList.aChatIconEvaluationList.push(nUserId ); } for(var nPMUserId in g_hoPMWindows ) { FriendsList.aChatIconEvaluationList.push(nPMUserId ); } for(var a=0; a < FriendsList.aChatIconEvaluationList.length; a++ ) { var nPMUserId = FriendsList.aChatIconEvaluationList[a]; g_hoPMWindows[nPMUserId]; var oEl; if(oEl = GetEl('online_friend_chat_bubble_' + nPMUserId ) ) { if(g_hoPMWindows[nPMUserId] ) { if(g_hoPMWindows[nPMUserId].blinking ) { if(g_hPlatform.id == PLAT_CAM ) oEl.innerHTML = "<img src='" + t.g_hPlatform.image_url_cdn + "images/flat/stroke/svg/chat-2.svg'>"; else oEl.innerHTML = "<img src='" + t.g_hPlatform.image_url_cdn + "files/ico/chat_bubble_orange.svg'>"; } else { if(g_hPlatform.id == PLAT_CAM ) oEl.innerHTML = "<img src='" + t.g_hPlatform.image_url_cdn + "images/flat/stroke/svg/chat-1.svg'>"; else oEl.innerHTML = "<img src='" + t.g_hPlatform.image_url_cdn + "files/ico/chat_bubble.svg'>"; } } else { oEl.innerHTML = ""; } }
 }};function brokenAvatarImage(el,nUserId){ if(el.error_handled ) { return false; } el.src = t.g_hPlatform.image_url_cdn + 'files/images/icons/people/small_woman_1.png?1'; if(t.g_hUsers[nUserId] ) { t.g_hUsers[nUserId]['broken_avatar'] = 1; el.error_handled = true; }}function DrawGuestMenu(){ var aMenu = []; var sGuestName = g_hSelf['username'] || '...'; if(! GuestSignup.sNewUsername ) { aMenu.push("\n <div class=\"simenu_reg\"> <div class=\"mb10 mt2 fs11 tal\">You are <b>" + String(g_hSelf['username']).replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</b></div> <form onSubmit=\" return GuestSignup.SubmitGuestName(); \"> <input type=\"text\" id=\"guest_username\" maxlength=\"13\" onKeyUp=\"GuestSignup.CheckGuestName_Queue(this.value);\" placeholder=\"Create Username\" /> <input type=\"submit\" value=\"Create Account\" id=\"username_change_submit\" disabled onClick=\"GuestSignup.SubmitGuestName()\"> <div id=\"username_status\"></div> </form> </div> "); } else { aMenu.push(" <div class=\"simenu_reg\"> <div class=\"mb6 mt2 fs11 tal\"><b>" + GuestSignup.sNewUsername.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</b> has been reserved for you.</div> <form onSubmit=\"return GuestSignup.Submit();\"> <div class=\"mb6 fs11\">Enter your e-mail below to create your free account.</div> <input type=\"text\" id=\"guest_email\" onKeyUp=\"GuestSignup.Validate()\" placeholder=\"E-mail Address\" \> <input type=\"submit\" id=\"guest_signup_submit\" value=\"Create Account\" disabled onClick=\"GuestSignup.Submit()\"> </form> <div class=\"fs10 mb20 mt10 tac \">[<a href=\"#\" onClick=\" LoadPersonalMenu.SuspendUpdates = 0; GuestSignup.ResetGuestName(); \">Reset Username</a>]</div> </div> "); } return aMenu.join('');
}var GuestSignup = { sNewUsername: '', oCheckGuestNameReq: false, bUsernameAvailable: false};GuestSignup.Validate = function(){ var sEmail = GetEl('guest_email').value; if (sEmail.length > 5 && sEmail.match(/\w@.+\.\w+/)) GetEl('guest_signup_submit').disabled = false; else GetEl('guest_signup_submit').disabled = true;};GuestSignup.Submit = function(){ if(GetEl('guest_signup_submit').disabled == true ) return false; if(ValidateEmail ) { GetEl('guest_email').value = GetEl('guest_email').value.replace(/\s/g,''); var sErr; if(sErr = ValidateEmail(GetEl('guest_email').value ) ) { alert(sErr); return false; } } GuestSignup.sGuestEmail = GetEl('guest_email').value; var sQS = "mode=side_bar&email=" + encodeURIComponent(GuestSignup.sGuestEmail ) + "&username=" + encodeURIComponent(GuestSignup.sNewUsername ); window.open(g_Paths.phpPathSignup + '?' + sQS ,'account','height=550,width=800,status=0,resizable=33'); return false;};GuestSignup.CheckGuestName_Queue = function(sUsername){ var oEl_guest_username; if(oEl_guest_username = GetEl('guest_username') ) { sUsername = oEl_guest_username.value; } sUsername = sUsername.replace(/\W/g,''); sUsername = sUsername.substr(0,20);
 if(oEl_guest_username ) { oEl_guest_username.value = sUsername; } if(! sUsername.match(/\w{5,}/) && ( oEl_guest_username = GetEl('username_change_submit') ) ) { GuestSignup.bUsernameAvailable = false; oEl_guest_username.disabled = true; SetHTML('username_status',""); return; } GuestSignup.sNewUsername = sUsername; clearTimeout(GuestSignup.oCheckGuestName_Timeout ); GuestSignup.oCheckGuestName_Timeout = setTimeout(function(){ GuestSignup.CheckGuestName(sUsername)},500);};GuestSignup.CheckGuestName = function(sUsername){ if(sUsername.match(/adm.n|staff|mfc|myfr..cams|supp.rt|tech|manage|system|server/i) ) { GuestSignup.bUsernameAvailable = false; SetHTML('username_status',"<span class=\"error\">Not Permitted</span>"); GetEl('username_change_submit').disabled = false; return; } if(! GuestSignup.oCheckGuestNameReq ) { GuestSignup.oCheckGuestNameReq = createRequestObject(); } GuestSignup.oCheckGuestNameReq.open("get", g_Paths.phpPathSignup + "?check_username=1&potential_username="+encodeURIComponent(sUsername )+"&" + Math.random()); GuestSignup.oCheckGuestNameReq.onreadystatechange = function() { if ( GuestSignup.oCheckGuestNameReq.readyState != 4) { return; } if ( GuestSignup.oCheckGuestNameReq.responseText == -1) { GuestSignup.bUsernameAvailable = true; SetHTML('username_status',"<span class=\"success\">Username Available</span>"); GetEl('username_change_submit').disabled = false; } else { GuestSignup.bUsernameAvailable = false; SetHTML('username_status',"<span class=\"error\">" + GuestSignup.oCheckGuestNameReq.responseText.replace(/\s+$/,'') + "</span>"
 ); GetEl('username_change_submit').disabled = true; } }; GuestSignup.oCheckGuestNameReq.send(null);};GuestSignup.ResetGuestName = function(sMode ){ GuestSignup.sNewUsername = ''; LoadPersonalMenu('reset');};GuestSignup.SubmitGuestName = function(sMode ){ if(GuestSignup.bUsernameAvailable != true || GetEl('username_change_submit').disabled == true ) return false; LoadPersonalMenu.SuspendUpdates = 0; LoadPersonalMenu('reset'); return false;};function ResetAwayStatus(){ g_hSelf['away_state'] = false; TxCmd(FCS.FCTYPE_PRIVACY, g_hSelf['sessionid'], 0, g_hSelf['user_id'], g_hSelf['pmesg_accept'] , null ); FriendsList.Load({ force: true });}function LiveSnapUrl(nUserId, nSize ){ if(g_nAgeCheckRequired ) { return ''; } g_default_clientVideo.Set({ broadcaster: g_hUsers[nUserId] }); return g_default_clientVideo.LiveSnapUrl({ size: nSize, high_res: ( nSize > 320 ) });}function LiveSnapImage(nUserId, nSize, nWidth, nHeight ){ nSize = nSize || 100;
 var sOnLoad=''; if(g_hUsers[ nUserId ] && g_hUsers[ nUserId ].state == w.FCS.FCVIDEO_TX_IDLE && g_hUsers[ nUserId ].platform_id == g_hPlatform.id && ! g_hLoungeIds[ nUserId ] ) { sOnLoad = " t.LiveSnapImage.initialize(this); "; } var sStyle=''; if(nHeight ) sStyle += "height:" + nHeight + "px;"; var sH = ''; sH += "<div style='position:relative;display:inline-block;border-radius:4px;'><i"+"mg class='livesnap_border LiveSnapImage_img' sr"+"c=" + t.LiveSnapUrl(nUserId,nSize) + " onError=\"this.src = ('"+g_Paths.imgClear+"');\"  data-user_id=\"" + nUserId + "\" data-size=\"" + nSize + "\" " + ( sStyle ? " style=\"" + sStyle + "\"" : "" ) + " " + ( sOnLoad ? " onLoad=\"" + sOnLoad + "\"" : "" ) + " ></div>"; return sH;}LiveSnapImage.nSnapDelay = 250;LiveSnapImage.videoIsPlaying = false;LiveSnapImage.bMuteAudio = true;LiveSnapImage.initialize = function(oSnapImg ){ LiveSnapImage.b_videoInitialized = false; LiveSnapImage.nSnapLoadTimer = Date.now(); LiveSnapImage.videoIsPlaying = true; oSnapImg.onload = function() { setTimeout(function() { t.LiveSnapImage.animateImage(oSnapImg); }, LiveSnapImage.nSnapDelay ); }; LiveSnapImage.animateImage(oSnapImg );};LiveSnapImage.animateImage = function(oSnapImg ){ if(oSnapImg.offsetParent == null ) { LiveSnapImage.videoIsPlaying = false; return;
 } var nTimeDelay = ( Date.now() - LiveSnapImage.nSnapLoadTimer ) - LiveSnapImage.nSnapDelay; LiveSnapImage.nSnapLoadTimer = Date.now(); if(nTimeDelay > 0 && nTimeDelay < 200 && ! LiveSnapImage.b_videoInitialized ) { LiveSnapImage.b_videoInitialized = true; setTimeout(function(){ LiveSnapImage.initializeVideo(oSnapImg); },0) } var nNoCacheOffset = oSnapImg.src.indexOf('no-cache='); oSnapImg.setAttribute('src', nNoCacheOffset > -1 ? ( oSnapImg.src.substr(0 , nNoCacheOffset + 9 ) + Math.random() ) : oSnapImg.src ); Log('LiveSnapImage: animateImage: delay: ' + nTimeDelay + ', src: ' + oSnapImg.src );};LiveSnapImage.initializeVideo = function(oSnapImg ){ if(oSnapImg.offsetParent == null ) { return; } Log('LiveSnapImage: initializeVideo'); var nUserId = oSnapImg.dataset.user_id; var nSize = oSnapImg.dataset.size; var hUser = t.g_hUsers[ nUserId ]; var oVideo = document.createElement('div'); oVideo.style.visibility = 'hidden'; oVideo.style.position = 'absolute'; oVideo.style.right = '0px'; oVideo.style.bottom = '0px'; oVideo.style.width = oSnapImg.offsetWidth + 'px'; oVideo.style.height = oSnapImg.offsetHeight + 'px'; clientVideo = new MfcClientVideo(t.g_hVideoServerConfig ); clientVideo.Set({ client_user: t.g_hSelf, broadcaster: hUser, video_container: oVideo, player_type_override: 'videojs', presentation_state: FCS.EVSESSION_NONE,
 autoplayMutedOverlay: false, mute: LiveSnapImage.bMuteAudio, allowFullscreen: false, allowControls: false, capLevelToPlayerSize: true }); clientVideo.PrepareVideo(); LiveSnapImage.b_switchToVideo = false; var callback = function(nDelay) { if(! LiveSnapImage.b_switchToVideo ) { setTimeout(function() { LiveSnapImage.switchToVideo(oSnapImg,oVideo); }, nDelay || 1000 ); } LiveSnapImage.b_switchToVideo = true; }; if(clientVideo.videoPlayer ) { clientVideo.videoPlayer.setOnPlayCallback(function() { Log('LiveSnapImage: setOnPlayCallback'); callback(500); } ); clientVideo.videoPlayer.setOnPlayingCallbac} ); } else { callback(3000); } clientVideo.RenderVideo(); oSnapImg.parentNode.insertBefore(oVideo, oSnapImg ); var oSpinner = oVideo.getElementsByClassName('vjs-loading-spinner'); if(oSpinner && oSpinner[0] ) { oSpinner[0].style.display = 'none'; } oVideo.clientVideo = clientVideo; LiveSnapImage.oVideo = oVideo; setTimeout(function() { LiveSnapImage.monitorVideo(oVideo); }, 5000 );};LiveSnapImage.switchToVideo = function(oSnapImg, oVideo ){ if(oSnapImg.offsetParent == null || oVideo.offsetParent == null ) { Log('LiveSnapImage: snap img and/or video div is no longer in the dom, aborting. '); return;
 } Log('LiveSnapImage: switchToVideo'); oSnapImg.style.position = 'absolute'; oSnapImg.style.top = '0px'; oSnapImg.style.left = '0px'; oSnapImg.style.opacity = 0; setTimeout(function() { if(oSnapImg && oSnapImg.parentNode ) { oSnapImg.parentNode.removeChild(oSnapImg); } }, 200 ); oVideo.style.visibility = 'visible'; oVideo.style.position = 'relative'; setTimeou}, 750 );};LiveSnapImage.monitorVideo = function(oVideo, oSnapImg ){ Log('LiveSnapImage: monitorVideo'); if(! oVideo || oVideo.offsetParent == null ) { Log('LiveSnapImage: shut down and remove video'); if(oVideo && oVideo.clientVideo && oVideo.clientVideo.Disconnect ) { oVideo.clientVideo.Disconnect(); Log('LiveSnapImage: oVideo.clientVideo.Disconnect()' ); } if(oVideo && oVideo.parentNode ) { oVideo.parentNode.removeChild(oVideo); }
 if(oSnapImg && oSnapImg.offsetParent != null ) { oSnapImg.style.opacity = 1; LiveSnapImage.animateImage(oSnapImg ); } LiveSnapImage.videoIsPlaying = false; events.emit('player.ModelMenuBar.HighlightSpeaker', false ); } else { if(oVideo && oVideo.clientVideo && typeof(oVideo.clientVideo.OnVideoPlayerUpdate) === 'function' ) { oVideo.clientVideo.OnVideoPlayerUpdate(); } else { Log('Unable to call oVideo.clientVideo.OnVideoPlayerUpdate()'); } clearTimeout(oVideo.nMonitorVideoTimer ); oVideo.nMonitorVideoTimer = setTimeout(function(){ LiveSnapImage.monitorVideo(oVideo); }, 1000 ); }};LiveSnapImage.drawMute = function(oVideo, oSnapImg ){ if(! LiveSnapImage.oMuteNotice ) { return; } var sUrl = ( t.g_hPlatform.image_url_cdn + 'images/flat/solid/svg' + ( t.g_hPlatform.id == PLAT_CAM ? '' : '_black' ) + '/speaker-' + ( t.g_hSelf.popup_preview_muted ? 3 : 1 ) + '.svg' ); LiveSnapImage.oMuteNotice.innerHTML = "To " + ( g_hSelf.popup_preview_muted ? "Un-Mute" : "Mute" ) + ", click <img src=\"" + sUrl + "\" style=\"height:11px;width:11px;margin-bottom:-1px;opacity:0.7;\"> in top-right of homepage or press the \"M\" key."; events.emit('player.ModelMenuBar.HighlightSpeaker', true );};LiveSnapImage.toggleMute = function(oVideo, oSnapImg ){ if(! LiveSnapImage.videoIsPlaying ) { return false; } UserExtensions.Write('popup_preview_muted', t.g_hSelf.popup_preview_muted ? 0:1 ); if(LiveSnapImage && LiveSnapImage.oVideo && LiveSnapImage.oVideo.clientVideo ) { LiveSnapImage.oVideo.clientVideo.Mute(t.g_hSelf.popup_preview_muted ); }
 events.emit('player.ModelMenuBar.Refresh'); LiveSnapImage.drawMute(); return true;};function WhiteBoardPopup(nUserId, oWindow ){ oWindow = oWindow || window; if(oWindow.WhiteBoardPopup_popup ) { oWindow.WhiteBoardPopup_popup.close(); } oWindow.WhiteBoardPopup_popup = new MfcDhtmlPopup({ mfcMouseTracker: oWindow.g_oMouseTracker, mfcGraphics: oWindow.g, window: oWindow }); var hUser = g_hUsers[nUserId]; if(! hUser ) { return; } var sUrl = "/html/whiteboard.html?username=" + hUser.username + "&user_id=" + hUser.user_id + "&channel=" + PublicChannel(nUserId) + "&hide_whiteboard_editors=1"; var nHeight = oWindow.innerHeight - 200; var sH = "<iframe oncontextmenu=\"return false;\" src=\"" + sUrl + "\" width=800 height=" + nHeight + " frameborder=0></iframe>"; if(WhiteboardNotice && window == oWindow ) { sH += " <div style=\"position: absolute; top: 0px;\"> Open Whiteboard "; if(window.g_sPlayerMode == 'player' && window.g_nBroadcasterId == nUserId ) { sH += " <a href=# onClick=\" WhiteboardNotice.clickLink(); if(WhiteBoardPopup_popup ) { WhiteBoardPopup_popup.close(); } \">below chat</a> or "; } sH += " <a href=# onClick=\" WhiteboardNotice.clickLink({ popup: true, user_id: " + nUserId + " }); if(WhiteBoardPopup_popup ) { WhiteBoardPopup_popup.close(); } \">in a new window</a>. </div> "; } setTimeout(function(){ oWindow.WhiteBoardPopup_popup.open(sH ); },10); return false;};
function onMouseDown_Handler(e ){ var bRightClick; if (!e) var e = window.event; if (e.which) bRightClick = (e.which == 3); else if (e.button) bRightClick = (e.button == 2); if(bRightClick ) { oEvent = ( navigator.appName == "Microsoft Internet Explorer" && event && event.clientX ) ? event : e; if(oEFP = document.elementFromPoint(oEvent.clientX,oEvent.clientY) ) { for(var nCounter=0; nCounter<5; nCounter++ ) { if(oEFP && oEFP.getAttribute('name') ) { break; } else { oEFP = oEFP.parentNode; } } } if(oEFP && oEFP.getAttribute('name') && oEFP.getAttribute('name').match(/user(\d+)/) ) { popUserMenu.open(RegExp.$1,g_oDhtmlPopup); } }}var PopupPreview = {};PopupPreview.convert_to_persistent_callback = function(dhtmlPopup ){ var win = dhtmlPopup.window || window ; var els = win.document.getElementsByClassName('PopupPreview_quicktip'); for(var a=0; a < els.length; a++ ) { els[a].style.display = ''; } var els = win.document.getElementsByClassName('PopupPreview_footer');
 for(var a=0; a < els.length; a++ ) { els[a].style.display = 'none'; }};PopupPreview.getHtml = function(nUserId, hOptions ){ hOptions = hOptions || {}; var hUser = t.g_hUsers[nUserId]; if ( typeof hUser == 'undefined' || hUser === 'undefined' ) { return "<div>This person is offline</div>"; } if(hOptions.mode == 'pm_livesnap' ) { return t.LiveSnapImage(nUserId,320,160,120); } var oPlayerWindow; var nHeight = hOptions.height || 300; if(t && typeof(t.GetCurrentBroadcasterDisplayPattern ) == 'function' ) { var nPattern = t.GetCurrentBroadcasterDisplayPattern(); if(nPattern == 5 ) { nHeight = 420; } } var nAR = hUser.video_aspect_ratio; var nWidth; if(hOptions.width ) { nWidth = hOptions.width; nHeight = Math.round(nWidth / nAR ); } else { nWidth = ( nAR * nHeight ) || 533; } var nAvailableWidth = ( 1 - ( g_oMouseTracker.dQuadX > 0.5 ? 1 - g_oMouseTracker.dQuadX : g_oMouseTracker.dQuadX ) ) * window.innerWidth; if(( nAvailableWidth - 150 ) < nWidth ) { nWidth = nAvailableWidth - 150; nHeight = nWidth * ( 1 / nAR ); } var sColor; if(hUser.chat_text_color ) { if(NightMode_Top.enabled ) { sColor = NightMode.HexInvert(MfcCustomFonts.prototype.lighten_hex(hUser.chat_text_color ,0.8) ); }
 else { sColor = MfcCustomFonts.prototype.lighten_hex(hUser.chat_text_color ,0.92); } } var sSrc; if(hUser['broken_avatar'] ) sSrc = t.g_hPlatform.image_url_cdn + 'files/images/misc/generic_avatar.30x30.gif'; else sSrc = AvatarUrl(nUserId,30); var sExtraStyle = MfcCustomFonts.prototype.get_style(g_hUsers[nUserId] ); var sH = " <div onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup);\"\> <div class=user_style style=\"max-width:" + ( nWidth - 38 ) + "px;min-width:" + ( nWidth - 38 ) + "px;padding:4px;position:relative;padding-left:38px;color:#" + hUser.chat_text_color + ";background-color:" + sColor + ";border-radius:5px;margin-bottom:3px;\"> <img src=\"" + sSrc + "\" style=\"position:absolute;top:3px;left:3px;border-radius:5px;\"> <span class='user_style username' style=\"font-size:14px;" + sExtraStyle + "\"\><b>" + g_hUsers[nUserId].username + "</b></span><b>"; if(hUser.missmfc ) { sH += "<div class='sprite-icons sprite-" + ( hUser.missmfc == 1 ? 'gold': 'silver') + "_crown' style='margin-bottom:-2px;display:inline-block;'></div>"; } sH += " &nbsp; "; if(hUser.missmfc_rank && t.g_hPlatform.id == PLAT_MFC ) { sH += " #" + hUser.missmfc_rank + " &nbsp; "; } if(hUser.cam_score && ! hUser.hide_cam_score && t.g_hPlatform.id == PLAT_MFC ) { sH += "" + parseInt(hUser.cam_score) + "cs &nbsp; "; } sH += " <b>" + ( hUser.room_count || '' ) + "</b><img style=\"margin: 0px 2px -1px 2px;\" height=10 src=\"" + t.g_hPlatform.image_url_cdn + "files/images/icons/png/person.png\"> "; if(g_hSelf.access_level >= FCS.FCLEVEL_PREMIUM ) { var quickTip = new MfcQuickTip({ get_user} }); sH += " <span style='display:none;' class=PopupPreview_quicktip>" + quickTip.a_tag() + "&#9889;</a></span> "; } sH += " <br> <span class=user_style style=\"font-size:11px;" + sExtraStyle + "\">" + ( hUser.blurb || '' ) + "</span> </b> </div> "; if(hUser.topic && ( t.g_hUsers[ nUserId ].platform_id == PLAT_CAM || t.g_hUsers[ nUserId ].platform_id == t.g_hPlatform.id ) ) { var sTopic = hUser.topic || ''; sTopic = sTopic.replace(/(\W+)/g,"$1<wbr>"); sTopic = sTopic.replace(/(\w{30})/g,"$1<wbr>");
 sTopic = sTopic.replace(/&<wbr>lt;/g, "<").replace(/&<wbr>gt;/g, ">"); sH += " <div style=\"max-width:" + nWidth + "px;overflow-wrap: break-word;\"> <table><tr><td align=center valign=center> <div class=user_style style=\"padding:3px 0px;font-size:11px;" + sExtraStyle + "\"><b>Room Topic:</b> " + sTopic + "</div> </td></tr></table> </div> "; } sH += ` <div onClick=" var popup = MfcDhtmlPopup.get_popup('${hOptions.MfcDhtmlPopup_instance_name}'); if(popup ) { popup.close(); } TopLoadPlayer({ broadcaster_id: ${nUserId} }); " style="min-height:;width:${nWidth}px;overflow:hidden;text-align:center;cursor:pointer;" class=PopupPreview_livesnap id=PopupPreview_livesnap>` + t.LiveSnapImage(nUserId,640,nWidth,nHeight) + ` </div> `; if(hOptions.right_click_persist ) { sH += ` <div class=PopupPreview_footer style="text-align:center;color:#888888;position:absolute;width:100%;">Press & hold mouse button for 1 second to keep this popup open.</div> `; } sH += ` </div> `; return sH;};function GetStateMessage(nUserId, nPresentationState, sUsername ){ if(! t.g_hUsers[ nUserId ] ) { return ''; } var sStateMsg=''; var nModelState = g_hUsers[ nUserId ].state; sUsername = sUsername || g_hUsers[ nUserId ].username || 'This user'; if(sUsername ) { sUsername = "<span class='user_style username' style=\"" + MfcCustomFonts.prototype.get_style(g_hUsers[nUserId] ) + "\">" + sUsername + "</span>"; } if(nPresentationState == FCS.EVSESSION_PRIVATE && nModelState == FCS.FCVIDEO_TX_PVT )
 { sStateMsg = "Private Show with " + sUsername; } else if(nPresentationState == FCS.EVSESSION_GROUP && nModelState == FCS.FCVIDEO_TX_GRP ) { sStateMsg = "Group Show with " + sUsername; } else if(nPresentationState == FCS.EVSESSION_CLUB && nModelState == FCS.FCVIDEO_TX_CLUB ) { sStateMsg = "Club Show with " + sUsername; } else if(nPresentationState == FCS.EVSESSION_VOYEUR ) { sStateMsg = "You are Spying on " + sUsername; } else { if(g_hUsers[ nUserId ].new_model && g_hUsers[ nUserId ].new_model <= g_hSelf.new_model_days ) sStateMsg += "<b>*NEW*</b> "; sStateMsg += sUsername; switch (nModelState) { case FCS.FCVIDEO_TX_IDLE: sStateMsg += " is in public chat"; break; case FCS.FCVIDEO_TX_AWAY: sStateMsg += " is away"; break; case FCS.FCVIDEO_TX_PVT: sStateMsg += " is in " + (g_hUsers[ nUserId ]['truepvt'] ? "TruePrivate" : "Private"); break; case FCS.FCVIDEO_TX_GRP: sStateMsg += " is in Group"; break; case FCS.FCVIDEO_TX_CLUB: sStateMsg += " is in a Club Show"; break; case FCS.FCVIDEO_RX_IDLE: sStateMsg += " Webcam is Off"; break; case undefined: case FCS.FCVIDEO_OFFLINE: sStateMsg += " is offline"; break; default: sStateMsg += " is offline (" + nModelState + ")"; break; } } return sStateMsg;}function HideModel(nModelId,hOptions){ hOptions = hOptions || {}; if(hOptions['batch'] ) { for(nK in hOptions['batch'] ) { var hUser = g_hUsers[ hOptions['batch'][nK] ]; if(hUser ) { hUser.hidden = hOptions['unhide'] ? 0 : 1; } }
 TxCmd(FCS.FCTYPE_HIDEUSERS, g_nSessionId, 0, nModelId , hOptions['unhide'] ? FCS.FCCHAN_PART : FCS.FCCHAN_JOIN, "[" + hOptions['batch'].join(',') + "]" ); } else { var hUser = g_hUsers[ nModelId ]; if(( hUser.friend || hUser.bookmarked ) && ! hOptions.confirmed ) { var sMessage = hUser.username + " is in your " + ( hUser.friend ? 'friends' : 'bookmarks' ) + " list, are you sure you wish to hide them?"; DhtmlPrompt({ prompt_type: 'confirm', message: sMessage, callback: () => { hOptions.confirmed = 1; t.HideModel.apply(this,arguments); } }); return; } if(hUser ) { hUser.hidden = hOptions['unhide'] ? 0 : 1; } TxCmd(FCS.FCTYPE_HIDEUSERS, g_nSessionId, 0, nModelId , hOptions['unhide'] ? FCS.FCCHAN_PART : FCS.FCCHAN_JOIN ); } for(var sK in g_hWindows) { if(! g_hWindows[sK].window ) { continue; } if(g_hWindows[sK].window.ConfigureUserControls ) { g_hWindows[sK].window.ConfigureUserControls(); }
 if(g_hWindows[sK].window.OnlineBroadcasterList ) { g_hWindows[sK].window.OnlineBroadcasterList.Refresh('force'); } } if(! hOptions.pm_window ) { g_oDhtmlPopup.close(); } Update_popUserMenu(nModelId ); PopularRooms.Render();}function ParseJSON(sObject ){ if (!sObject) return null; try { return JSON.parse(sObject ); } catch(oError ) { Log("JSON Error: " + oError + ", " + oError.description ); } return null;}events.onRx(FCS.FCTYPE_CLUBSHOW,function(fcMsg){ if (fcMsg.hasOwnProperty('obj') && fcMsg.obj.hasOwnProperty('model')) { Log('SHOW DATA: '); Log(fcMsg.obj); Log('js: ' + JSON.stringify(fcMsg.obj )); FcClubShows(fcMsg.obj.model, fcMsg.obj ); } else Log('CLUBDBG: FCS.FCTYPE_CLUBSHOW Error, missing obj or model in obj payload: ' + fcMsg.serialize());});var FcClubShows_RX = function(fcMsg){ if ( fcMsg.hasOwnProperty('obj') && fcMsg.obj.clubshows ) FcClubShows_Multiple(fcMsg.obj.clubshows );
 else if (fcMsg.hasOwnProperty('obj') && fcMsg.obj.hasOwnProperty('model')) FcClubShows(fcMsg.obj.model, fcMsg.obj );};events.onRx(FCS.FCTYPE_CLUBSHOW,FcClubShows_RX);events.onRx(FCS.FCTYPE_CLUBCMD,FcClubShows_RX);function FcClubShows(model, hShow ){ if (hShow.hasOwnProperty('op')) { if (hShow.op == FCS.FCCHAN_WELCOME) { g_hClubshows[ model ] = hShow; } else if (hShow.op == FCS.FCCHAN_EXPIRE) { if (g_hClubshows.hasOwnProperty(model)) { delete g_hClubshows[model]; } } else Log('CLUBDBG: dropped unsupported clubshow op:' + hShow.op + ' for model ' + model + ': ' + JSON.stringify(hShow)); } else Log('CLUBDBG: FCS.FCTYPE_CLUBSHOW obj missing op: ' + JSON.stringify(hShow));}function FcClubShows_Multiple(aClubShows ){ for(var a=0; a < aClubShows.length; a++ ) { g_hClubshows[ aClubShows[a]['model'] ] = aClubShows[a]; }}FcClubShows.ClubShowHelpHTML_list = function(hClubShow ){ var aClubList=[]; var hUser = t.g_hUsers[hClubShow.model]; for(var a=0; a < hClubShow.clubs.length; a++ ) { if(typeof(hClubShow.clubs[a] ) == 'object' ) { var hClub = hClubShow.clubs[a]; aClubList.push("<li>" + "<a  href=\"javascript: t.MFCShare_DhtmlMenu({ user_id: " + hUser.user_id + ", thing_type: 'clubs', slug: '" + hClub.slug + "', window: window }); \" class=user_style style=\"" + MfcCustomFonts.prototype.get_style(hUser ) + "\">" + hClub.name.replace(/</g,'&lt;') + "</a> "
 + ( hClub.amt > 0 ? ( ' - ' + hClub.amt + ' ' + ( hClub.amt > 1 ? 'tokens' : 'token' ) ) : '' ) + ( parseInt(hClub.dur) > 0 ? ( ' - ' + hClub.dur + ' day membership' ) : ' ' ) + "</li>" ); } } return aClubList;};FcClubShows.ClubShowHelpHTML = function(hClubShow ){ if(t.g_hPlatform.id == PLAT_CAM ) { return ''; } var hUser = t.g_hUsers[hClubShow.model]; var aClubList=[]; var aSlugs=[]; if(hClubShow.clubs ) { for(var a=0; a < hClubShow.clubs.length; a++ ) { if(typeof(hClubShow.clubs[a] ) == 'object' ) { aSlugs.push(hClubShow.clubs[a].slug); } } aClubList = FcClubShows.ClubShowHelpHTML_list(hClubShow ); } var sHtml = hUser.username + " is in a " + "Club Show</a>, the following Club" + ( aClubList.length==1 ? ' has' : 's have' ) + " access:<br><br>" + aClubList.join("") + "<br>"; if(hClubShow.tksid ) { sHtml += "You're in the Club so <a href=# onClick=\"RequestSession('club_show'); return false;\">Click Here to enter the Club Show</a>!"; } else { if(aClubList.length == 1 ) { sHtml += "<span  onClick=\" { t.MFCShare_DhtmlMenu({ user_id: " + hUser.user_id + ", thing_type: 'clubs', slug: '" + ( hClubShow.clubs && hClubShow.clubs[0] && hClubShow.clubs[0].slug ) + "', window: window }); return false; } \" class=user_style style=\" cursor:pointer; " + MfcCustomFonts.prototype.get_style(hUser ) + "\">Join the Club</a> for instant access to the Club Show!"; } else
 { sHtml += "Join one of the Clubs for instant access to the Club Show!"; } } return sHtml;};function TokenSessionsUnavailable(nUserId, clientVideo ){ var retVal = false; var nVal = 0; if ((nVal = t.g_fNoPrivateGroupSupport(nUserId, clientVideo)) > 0) { var errMsg = "Private Sessions, Voyeur, and Group Shows are not supported by your browser." + "<br><br>Please update your browser or " + "<a href=\"https://wiki." + t.g_hPlatform.domain + "/wiki/Technical_Help#Choosing_a_web_browser\" " + " onClick=\" DhtmlPrompt.oDhtmlPopup.close(); \" " + " target=_blank style=\"color:black;background-color:yellow;text-decoration:underline;\">" + "click here to see our browser recommendations." + "</a><br><br>" + " " + nVal; if (nVal == 3) { errMsg = "Private Sessions, Group Shows and Voyeur are not currently available with this model's feed."; } DhtmlPrompt({ prompt_type: 'alert', message: errMsg } ); retVal = true; } return retVal;}events.onRx(FCS.FCTYPE_CMESG,function(fcMsg) { FcChannelMessage(fcMsg ); });function FcChannelMessage(fcMsg ){ var sMessage = decodeURIComponent(fcMsg.data ); var hMsg = fcMsg.obj || {}; for(var sK in hMsg ) { if(typeof(hMsg[sK] ) == "string" ) try{ hMsg[sK] = decodeURIComponent(hMsg[sK] ); } catch(e) { Log("decodeURIComponent failed on: " + hMsg[sK]); } }
 var nUserId; try { if(typeof(hMsg) == 'object' && hMsg.hasOwnProperty('uid') ) { nUserId = hMsg.uid; } } catch(e) { console.log(e ); console.log(hMsg ); console.log(fcMsg ); console.log(sMessage ); } var bHistorical = fcMsg.arg2 & FCS.FCCHAN_OLDMSG; var nPlayerOwnerId = GetRoomOwnerId(fcMsg.to ); if ( g_bLoadChat > 0 && nUserId != g_hSelf['user_id'] ) { LoadChat(); return; } if (fcMsg.arg1 == FCS.FCRESPONSE_ERROR) { if (fcMsg.arg2 == FCS.FCCHAN_ERR_NOCHANNEL) { alert("channel does not exist"); } else if (fcMsg.arg2 == FCS.FCCHAN_ERR_NOTALLOWED) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nPlayerOwnerId ) ) oPlayerWindow.Filtered(sMessage ); } else if ( fcMsg.arg2 == FCS.FCCHAN_ERR_GUESTMUTE && g_hSelf['access_level'] < FCS.FCLEVEL_PREMIUM ) { if(g_hoPlayerWindows[ nPlayerOwnerId ] ) { if (g_hSelf['access_level'] == FCS.FCLEVEL_BASIC) sMessage = "<span class=chat_register> Basic members have been temporarily muted by the " + t.g_hPlatform.performer + ". " + A('purchase') + "Buy tokens once to become a Premium Member for life</a>.</span>"; else if(t.g_hPlatform.id == PLAT_MFC ) sMessage = "<span class=chat_register>Guests have been temporarily muted by the " + t.g_hPlatform.performer + ".<br><br>Members can still chat normally. Please " + A('login') + "login</a> or " + A('register') + "register free</a> to chat.</span>"; else if(t.g_hPlatform.id == PLAT_CAM ) sMessage = "<span class=chat_register>" + A('register') + "To chat on " + t.g_hPlatform.name + ", please click here to create a free account.</a></span>"; var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', nPlayerOwnerId ) ) && oPlayerWindow.ChatQueue ) oPlayerWindow.ChatQueue.Format_Append(sMessage, 0 );
 } } return; } if(fcMsg.arg2 & FCS.FCCHAN_OLDMSG && g_hUsers[nUserId] && ( g_hUsers[nUserId]['state'] == FCS.FCVIDEO_OFFLINE || typeof(g_hUsers[nUserId]['state']) == 'undefined' ) ) { g_hUsers[nUserId]['oldmsg'] = 1; } else if(g_hUsers[nUserId] && g_hUsers[nUserId]['state'] != FCS.FCVIDEO_OFFLINE ) { g_hUsers[nUserId]['oldmsg'] = 0; } if(fcMsg.arg2 == FCS.FCCHAN_WELCOME ) { RoomTopicHandler(sMessage, nPlayerOwnerId ); } if(! g_hoPlayerWindows[ nPlayerOwnerId ] ) { Log('CMESG routing cmesg to '+nPlayerOwnerId+' but it doesnt exist'); return; } if(( g_hSelf['mute_guests'] == 1 && nUserId == 0 && hMsg.nm.substr(0,5) == 'Guest' ) || ( g_hSelf['mute_guests'] == 1 && g_hUsers[nUserId] && g_hUsers[nUserId]['access_level'] == FCS.FCLEVEL_GUEST ) || ( g_hSelf['mute_regs'] == 1 && g_hUsers[nUserId] && g_hUsers[nUserId]['access_level'] == FCS.FCLEVEL_BASIC ) ) { return; } if(hMsg == null ) { Log("FCS.FCTYPE_CMESG called without any json code"); return; }
 var sMessage = hMsg['msg']; sMessage = RemoveDisallowedChatContent(sMessage ); if(fcMsg.from > 0 && typeof(sMessage)=='string' ) sMessage = sMessage.replace(/>/g, "&gt;").replace(/</g, "&lt;"); var hOptions = { 'room_owner_id': nPlayerOwnerId, 'type': 'player', 'obj': sMessage, 'from': nUserId, 'oldmsg': ( fcMsg.arg2 == FCS.FCCHAN_OLDMSG ? 1 : 0 ), 'welcome': ( fcMsg.arg2 == FCS.FCCHAN_WELCOME ? 1 : 0 ) }; if(typeof(hMsg['_tip_sesstype']) === 'number' ) { hOptions['_tip_sesstype'] = hMsg['_tip_sesstype']; } if(hMsg['style'] ) { hOptions['style'] = hMsg['style']; } if(hMsg.user ) { hOptions.user = hMsg.user; } if(fcMsg.arg2 == FCS.FCCHAN_OLDMSG || ( g_hUsers[nUserId] && g_hUsers[nUserId]['oldmsg'] == 1 && ( g_hUsers[nUserId]['state'] == FCS.FCVIDEO_OFFLINE || typeof(g_hUsers[nUserId]['state']) == 'undefined' ) ) ) { hOptions['oldmsg'] = 1; } if(hMsg.lv === 0 ) { hOptions.userDetails = { sessionid: hMsg.sid, username: hMsg.nm, access_level: hMsg.lv }; } if(nPlayerOwnerId ) { hOptions['broadcaster_id'] = nPlayerOwnerId; } var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nPlayerOwnerId ) ) { if(oPlayerWindow && oPlayerWindow.ChatQueue ) {
 if(nPlayerOwnerId != oPlayerWindow.g_nBroadcasterId && oPlayerWindow.g_nBroadcasterId != 0 ) { g_oReportBack = new MfcReportBack('ChannelMsgBug'); g_oReportBack.Send('Version' , nPlayerOwnerId + " : " + oPlayerWindow.g_nBroadcasterId ); } oPlayerWindow.ChatQueue.Format_Append(sMessage, nUserId, hOptions ); } if(nPlayerOwnerId && ! hOptions['oldmsg'] && g_hUsers[ nUserId ] && g_hUsers[ nUserId ]['access_level'] == FCS.FCLEVEL_MODEL && ! g_hSelf['access_level'] ) { oPlayerWindow.g_nModelToGuestChatCount++; } } if(bHistorical && hMsg.msg && ( hMsg.msg.indexOf('share.myfreecams.com') > -1 || hMsg.msg.indexOf('MFCsha.re') > -1 ) && ( hMsg.uid == 19863002 //CharlesBot
 || hMsg.uid == nPlayerOwnerId ) ) { var mfcChatCard = new MfcChatCard({ share_tpl_func: t.MFCShare_DhtmlMenu.chatCardTplMods, get_user_style_func}, callback_func: function(oCard ) { var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', nPlayerOwnerId ) ) && oPlayerWindow.ChatQueue ) { var sHtml = this.ProcessCard(oCard ); if(sHtml ) { var matches = hMsg.msg.match(/((?:share.myfreecams.com|MFCsha.re)[\/\w]+)/); var success = oPlayerWindow.ChatQueue.ChatAppendByMessage(matches[1] || hMsg.msg, sHtml ); if(! success ) { setTimeout(() => { oPlayerWindow.ChatQueue.ChatAppendByMessage(matches[1] || hMsg.msg, sHtml ); }, 500 ); }
 } } } }); mfcChatCard.ProcessChatInput(hMsg.msg ); }}function Sound(sMode, nSound ){ if ( g_hSelf['access_level'] < FCS.FCLEVEL_BASIC ) { return; } var sSound; if(! sSound && Sound.eventSoundFileMap[ sMode ] ) { sSound = Sound.eventSoundFileMap[ sMode ]; } else { nSound = nSound || g_hSelf['pm_sound_type'] || 5; sSound = "ding" + nSound + "_" + sMode; } if(! Sound.hElements ) { Sound.hElements = {}; } if(! Sound.hElements[ sSound ] ) { Sound.hElements[ sSound ] = document.createElement('audio'); } if(Sound.hElements[ sSound ].play ) { var sFile = g_UA.IE ? (sSound + '.mp3') : ( sSound + '.wav' ); Sound.hElements[ sSound ].setAttribute('src', t.g_hPlatform.image_url_cdn + 'sounds/' + sFile ); Sound.hElements[ sSound ].volume = 0.2; Sound.hElements[ sSound ].play(); }}Sound.eventSoundFileMap = { 'sound_model_bookmarked_friend_login': 'ding9', 'sound_model_friend_login': 'gling', 'sound_user_friend_login': 'notify', 'sound_new_model_login': 'diamond', 'sound_model_friend_private': 'heartput', 'sound_new_mywebcam_viewer': 'blop', 'sound_email_notification_model_login': 'model_online'};function FriendLimiter(oCaller){ return; oCaller = oCaller || this;
 var nFriendCount = 0; for(var sK in g_hUsers) { if(g_hUsers[sK]['friend'] ) { nFriendCount++; } } if(g_hSelf['access_level'] == FCS.FCLEVEL_BASIC && nFriendCount > 2000 ) { oCaller.alert("Sorry, only premium members can have more than 2000 friends at a time!\n \n \nYou can remove some from the Set Chat Options window, or purchase some tokens to become a premium member."); return true; } else { return false; } function TxAddRemove(sType, sMixedId, sAction, hOptions ){ hOptions = hOptions || {}; var nFC_TYPE_CODE; if(sType == 'friend' ) { nFC_TYPE_CODE = FCS.FCTYPE_ADDFRIENDREQ; if(sAction == 'add' && FriendLimiter(this) ) return; } else if(sType == 'ignore' ) { nFC_TYPE_CODE = FCS.FCTYPE_ADDIGNORE; if (hOptions['with_alert']) { alert("You will no longer see " + g_hUsers[nIgnoreUserId]['username'] + "'s messages.\n\n You can un-ignore this user at a later time in the 'My Friends & Options' ignore settings.\
 "); } } sMixedId = new String(sMixedId); sMixedId = sMixedId.replace(/\W/g,'').substr(0,32); var bNumericId = sMixedId.match(/^\d+$/) ? true : false; if(sType == 'friend' && sMixedId.length < 2 ) { return; } if(bNumericId ) { var nMode = ''; if(sAction == 'add') { if(sType == 'friend' ) { g_hUsers[ sMixedId ].friend = 1; } nMode = FCS.FCCHAN_JOIN; } else { if(sType == 'friend' ) { delete g_hUsers[ sMixedId ].friend; } nMode = FCS.FCCHAN_PART; } TxCmd(nFC_TYPE_CODE, g_nSessionId, 0, sMixedId , nMode ); } else { TxCmd(nFC_TYPE_CODE, g_nSessionId, 0, 0 , FCS.FCCHAN_JOIN, sMixedId ); } if(sType == 'friend' && bNumericId ) { g_hUsers[ sMixedId ].friend = sAction == 'add' ? 1 : 0; for(var nUserId in g_hoPlayerWindows ) { var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', nUserId ) ) && oPlayerWindow.PeopleBox && oPlayerWindow.PeopleBox.hPeople[ sMixedId ] ) { oPlayerWindow.PeopleBox.RefreshHTML(); }
 } } else if(sType == 'ignore' ) { g_hUsers[ sMixedId ].ignored = sAction == 'add' ? 1 : 0; for(var nUserId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nUserId ) ) { if(g_hUsers[ sMixedId ].ignored ) oPlayerWindow.PeopleBox.RemoveUser(sMixedId); } } } if(bNumericId ) { Update_popUserMenu(sMixedId ); } if(sType == 'friend' ) { Bookmarks.Render(); FriendsList.Load({ force: true }); }} var PmUsernamePrompt = { nUserId: 0, oTimeout: null, sUsername: ''};PmUsernamePrompt.Form = function(hOptions){ hOptions = hOptions || {}; g_oDhtmlPopup.open(" <div style=\"width:240px;height:100px;padding-top:20px;\"> <form onSubmit=\"PmUsernamePrompt.Submit(); return false;\"> Enter the username to look up:<br><br> <input type=text name=pm_username_lookup id=pm_username_lookup value=\"" + ( hOptions.username ? hOptions.username.replace(/\W/g,'') : '' ) + "\" onKeyUp=\"PmUsernamePrompt.QueueLookup(this.value );\"> <input type=button onClick=\"PmUsernamePrompt.QueueLookup(GetEl('pm_username_lookup').value );\" value=\"Lookup\" > <div id=username_recognized style=padding-top:12px;>&nbsp;</div> </form> </div> ",{ no_close_on_mouseout: true, provide_close_button: true }); setTimeou}, 100 );
 if(hOptions.lookup ) { PmUsernamePrompt.QueueLookup(hOptions.username); }};PmUsernamePrompt.Submit = function(){ if ( ! PmUsernamePrompt.nUserId ) return false; popUserMenu.open(g_hUsers[ PmUsernamePrompt.nUserId ],g_hSelf,g_oDhtmlPopup,{ dhtmlPopup_options: { center: true, no_close_on_mouseout: true, provide_close_button: true } }); return false;};PmUsernamePrompt.QueueLookup = function(sUsername ){ PmUsernamePrompt.nUserId = 0; if(! sUsername ) { return; } sUsername = sUsername.replace(/\W/g,''); sUsername = sUsername.substr(0,20); if(! sUsername.match(/\w{4,}/) ) { return; } PmUsernamePrompt.sUsername = sUsername; var fLookup = function() { FcUsernameLookup.Query(sUsername, PmUsernamePrompt.Response ); }; var oEl = GetEl('username_recognized'); if(oEl ) { oEl.innerHTML = "<span style='color:gray;'>Searching...</span>"; } if ( PmUsernamePrompt.oTimeout ) { clearTimeout(PmUsernamePrompt.oTimeout); PmUsernamePrompt.oTimeout = setTimeout(fLookup, 500 ); } else { fLookup(); PmUsernamePrompt.oTimeout = setTimeout(function(){},500); }};PmUsernamePrompt.Response = function(nErrCode, sUsername, hUser, hContext ){ if ( hUser && hUser.user_id ) { PmUsernamePrompt.nUserId = hUser.user_id; g_bUsernameAvailable = false; var oEl = GetEl('username_recognized'); if(oEl ) { oEl.innerHTML = " <span style='color:green;'>Username found!</span> <a href=\"javascript:popUserMenu.open(g_hUsers[" + PmUsernamePrompt.nUserId + "],g_hSelf,g_oDhtmlPopup,{ dhtmlPopup_options: { no_close_on_mouseout: true, provide_close_button: true } }); \">Open Menu</a>\
 "; } var oEl = GetEl('pm_username_lookup_submit'); if(oEl ) { oEl.disabled = false; } } else { g_bUsernameAvailable = true; var oEl = GetEl('username_recognized'); if(oEl ) { oEl.innerHTML = "<span style='color:red;'>We can't find a user by this name</span>"; } var oEl = GetEl('pm_username_lookup_submit'); if(oEl ) { oEl.disabled = true; } }};function ClosePMWindow(nRemoteUserId ){ var sGenericWindowKey = 'pm_friend' + nRemoteUserId; if(g_hWindows[ sGenericWindowKey ] && g_hWindows[ sGenericWindowKey ].type == 'dhtml_window' ) { g_hWindows[ sGenericWindowKey ].close(); } else { var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nRemoteUserId) ) { oPMWindow.g_bCloseWindow = 1; oPMWindow.AssertTop(); } } LoadWindowsList.ShowPreview_close(nRemoteUserId ); if(g_hoPMWindows[ nRemoteUserId ] ) { g_hoPMWindows[ nRemoteUserId ].closed = true; } WindowCloseDetection(); return;}function ClickFriend(nRemoteUserId,hOptions){ var hOptions = hOptions || {}; if(! nRemoteUserId ) { return; }
 if(! g_hoPMWindows[nRemoteUserId] ) { g_hoPMWindows[nRemoteUserId] = {}; g_hoPMWindows[nRemoteUserId]['window'] = 0; g_hoPMWindows[nRemoteUserId]['offline_message_rx'] = 0; PrivateMessageBlinker.Stop(nRemoteUserId ); } if(! g_hoPMWindows[nRemoteUserId]['window'] ) { if(g_hUsers[nRemoteUserId] && ( g_hUsers[nRemoteUserId]['state'] == FCS.FCVIDEO_OFFLINE || typeof(g_hUsers[nRemoteUserId]['state']) == 'undefined' ) ) { if(! g_hoPMWindows[nRemoteUserId]['offline_message_rx'] ) { g_hoPMWindows[nRemoteUserId]['offline_message_rx']++; ReceivePrivateMessage({ 'msg': g_hUsers[nRemoteUserId]['username'] + " is offline. " + g_hUsers[nRemoteUserId]['username'] + " will receive your message the next time they login, depending on their privacy settings.", 'from': nRemoteUserId, 'msguid': 0 }); } } else if(g_hUsers[nRemoteUserId] && g_hoPMWindows[nRemoteUserId] && ( ! g_hoPMWindows[nRemoteUserId]['message_buffer'] || ! g_hoPMWindows[nRemoteUserId]['message_buffer'][nRemoteUserId] ) ) { ReceivePrivateMessage({ 'msg': g_hUsers[nRemoteUserId]['username'] + " is online.", 'from': nRemoteUserId, 'msguid': 0 }); } } if(! g_hoPMWindows[nRemoteUserId]['listing'] ) { LoadWindowsList(); if(g_hoPMWindows[nRemoteUserId] ) {
 g_hoPMWindows[nRemoteUserId]['listing'] = GetEl('private_message_list_'+nRemoteUserId); } } var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nRemoteUserId) ) { oPMWindow.focus(); } return;}events.onRx(FCS.FCTYPE_PMESG,function(fcMsg) { FcPrivateMessage(fcMsg ); });function FcPrivateMessage(fcMsg ){ var nUserId = fcMsg.from; var nPmStamp = 0; hArgs = fcMsg.data.split(':'); if(hArgs.length > 8 ) { nPmStamp = hArgs[8].split('/')[0]; } if ( ! fcMsg.arg1 ) { nPmStamp = fcMsg.arg2; } if ( ! fcMsg.obj ) { return; } for(var sK in fcMsg.obj ) { if(typeof(fcMsg.obj[sK] ) == "string" ) { fcMsg.obj[sK] = decodeURIComponent(fcMsg.obj[sK] ); } } if(fcMsg.obj['msg'] != undefined && typeof(fcMsg.obj['msg'] ) == 'string' ) fcMsg.obj['msg'] = fcMsg.obj['msg'].replace(/>/g, "&gt;").replace(/</g, "&lt;"); fcMsg.obj['msg'] = RemoveDisallowedChatContent(fcMsg.obj['msg'] ); if ( ! fcMsg.obj['msg'] && fcMsg.arg1 == FCS.FCRESPONSE_ERROR ) { ReceivePrivateMessage({ 'msg': "This user is offline and will receive your message the next time he/she logs in.", 'from': fcMsg.arg2, 'msguid': 0 }); return; } else if ( g_bLoadChat > 0 && nUserId != g_hSelf['user_id'] && Rate() > .1 )
 { LoadChat(); return; } else if ( fcMsg.arg1 == FCS.FCRESPONSE_NOTICE ) { nUserId = fcMsg.arg2; var nNotice = 1; if (fcMsg.obj['msg'] && fcMsg.obj['msg'].indexOf("(Auto Reply)") == 0 && fcMsg.from == 0) { nNotice = 0; } ReceivePrivateMessage({ 'type': 'pm', 'msg': fcMsg.obj['msg'], 'from': nUserId, 'window': nUserId, 'pmstamp': nPmStamp, 'notice': nNotice }); } else if (fcMsg.arg1 == FCS.FCCHAN_OLDMSG) { ReceivePrivateMessage({ 'type': 'pm', 'msg': fcMsg.obj['msg'], 'from': nUserId, 'offline': true, 'offline_date': fcMsg.arg2, 'pmstamp': fcMsg.arg2 }); } else { ReceivePrivateMessage({ 'type': 'pm', 'msg': fcMsg.obj['msg'], 'from': nUserId, 'pmstamp': nPmStamp }); } LoadWindowsList.SetPMTitle(nUserId ); LoadWindowsList.ShowPreview(nUserId );}
function SendPrivateMessage(hChatParams ){ if(g_hoPMWindows[ hChatParams.to ] && g_hoPMWindows[ hChatParams.to ]['window'] && g_hoPMWindows[ hChatParams.to ]['window'].Send_LocalEcho ) { g_hoPMWindows[ hChatParams.to ]['window'].Send_LocalEcho(hChatParams.msg ); } else { EstablishPMWindowEntry(hChatParams.to, g_hSelf.user_id ); g_hoPMWindows[ hChatParams.to ]['message_buffer'][ g_hSelf.user_id ].push({ msg: hChatParams.msg }); g_hoPMWindows[ hChatParams.to ]['unread_messages'][ g_hSelf.user_id ].push({ msg: hChatParams.msg }); } TxCmd(FCS.FCTYPE_PMESG, g_nSessionId, hChatParams.to, 0, 0, hChatParams.msg );}function EstablishPMWindowEntry(nPMOwnerId, nMessagingUserId ){ if(! g_hoPMWindows[ nPMOwnerId ] ) g_hoPMWindows[ nPMOwnerId ] = {}; if(! g_hoPMWindows[ nPMOwnerId ]['message_buffer'] ) g_hoPMWindows[ nPMOwnerId ]['message_buffer'] = {}; if(! g_hoPMWindows[ nPMOwnerId ]['unread_messages'] ) g_hoPMWindows[ nPMOwnerId ]['unread_messages'] = {}; if(! g_hoPMWindows[ nPMOwnerId ]['message_buffer'][ nMessagingUserId ] ) g_hoPMWindows[ nPMOwnerId ]['message_buffer'][ nMessagingUserId ] = []; if(! g_hoPMWindows[ nPMOwnerId ]['unread_messages'][ nMessagingUserId ] ) g_hoPMWindows[ nPMOwnerId ]['unread_messages'][ nMessagingUserId ] = [];}function ReceivePrivateMessage(hChatParams ){ var nUserId = hChatParams['from']; var sMessage = hChatParams['msg'] || ''; var nMessagingUserID = hChatParams['msguid']; var nWindow = hChatParams['window'] || nUserId; if (nWindow != nUserId) nMessagingUserID = nWindow; nMessagingUserID = (nMessagingUserID == undefined)? nUserId : nMessagingUserID; if(hChatParams['msguid'] == undefined ) hChatParams['msguid'] = nMessagingUserID;
 if(hChatParams['local_timestamp'] == undefined ) hChatParams['local_timestamp'] = new Date().getTime(); var bChatRoomPM = false; var oPlayerWindow; for(var nBroadcasterId in g_hoPlayerWindows ) { if(nBroadcasterId == 0 ) { continue; } if(oPlayerWindow = WindowHandle.Get('player', nBroadcasterId ) ) { if(oPlayerWindow.ChatCommandHandlers && oPlayerWindow.ChatCommandHandlers.pm_response ) { bChatRoomPM = oPlayerWindow.ChatCommandHandlers.pm_response(nUserId, sMessage ); } } } if(g_hSelf.notification_pm ) { var bFoundFocus = false; for(var sW in g_hWindows ) { try { var oW = g_hWindows[sW]; if(oW && oW.window && oW.window.document && oW.window.document.hasFocus() ) bFoundFocus = true; } catch(e){ console.log(e); } } if(! bFoundFocus ) { MfcNotification.new({ message: ( "Private Message from " + g_hUsers[nUserId].username ), body: sMessage, icon: AvatarUrl(nUserId), onclick: function() { if ( ! g_hoPMWindows[nUserId] || ! g_hoPMWindows[nUserId].window ) A('pm_friend',{ user_id: nUserId, load_video: true, do_click: true }); ClickFriend(nUserId); } });
 } } if(! g_hoPMWindows[nUserId] ) { g_hoPMWindows[nUserId] = {}; } if(sMessage.indexOf('is online') == -1 && ( g_hSelf['pm_sound_mode'] == 'rx' || g_hSelf['pm_sound_mode'] == 'txrx' || ! g_hSelf['pm_sound_mode'] || (g_hSelf['pm_sound_mode'] == 'on_first' && g_hoPMWindows[nUserId] && ! g_hoPMWindows[nUserId]['alerted']) ) ) { Sound('down'); if(g_hoPMWindows[nUserId]) g_hoPMWindows[nUserId]['alerted'] = true; } if(! g_hoPMWindows[nUserId]['message_buffer'] ) { g_hoPMWindows[nUserId]['message_buffer'] = {}; } if(! g_hoPMWindows[nUserId]['unread_messages'] ) { g_hoPMWindows[nUserId]['unread_messages'] = {}; } if(! g_hoPMWindows[nUserId]['listing'] ) { LoadWindowsList(); if(g_hoPMWindows[nUserId] ) g_hoPMWindows[nUserId]['listing'] = GetEl('private_message_list_'+nUserId); } if(sMessage && ! bChatRoomPM && hChatParams.msguid > 0 ) { PrivateMessageBlinker.Start(nUserId ); } if(g_hoPMWindows[nUserId]['message_buffer'][nMessagingUserID] == undefined) { g_hoPMWindows[nUserId]['message_buffer'][nMessagingUserID] = []; } if(g_hoPMWindows[nUserId]['unread_messages'][nMessagingUserID] == undefined) { g_hoPMWindows[nUserId]['unread_messages'][nMessagingUserID] = []; }
 if(sMessage ) { g_hoPMWindows[nUserId]['message_buffer'][ nMessagingUserID ].push(hChatParams ); g_hoPMWindows[nUserId]['unread_messages'][ nMessagingUserID ].push(hChatParams ); } if(TogglePersonalMenu.nDisplay == 0 && ! bChatRoomPM ) { MenuRevealBlinker.Start(nUserId ); } PrivateMessageListener();}var MenuRevealBlinker = { nInterval: 0, oTimer: null};MenuRevealBlinker.Start = function(){ var els = document.getElementsByClassName('btn_unhide_friends'); for(var a=0; a < els.length; a++ ) if(els[a] ) { els[a].classList.add('btn_unhide_friends_blink'); }};MenuRevealBlinker.Stop = function(){ var els = document.getElementsByClassName('btn_unhide_friends'); for(var a=0; a < els.length; a++ ) if(els[a] ) { els[a].classList.remove('btn_unhide_friends_blink'); }};function PrivateMessageListener(){ for(var nUserId in g_hoPMWindows) { for(var key_nUserId in g_hoPMWindows[ nUserId ]['message_buffer'] ) { if(g_hoPMWindows[ nUserId ]['message_buffer'][ key_nUserId ] ) { var oPMWindow; if(( oPMWindow = WindowHandle.Get('pm',nUserId) ) && oPMWindow.Initialize && oPMWindow.Initialize.bInitialized ) { for(var sK in g_hoPMWindows[ nUserId ]['message_buffer'][ key_nUserId ] ) { var hChatLine = g_hoPMWindows[ nUserId ]['message_buffer'][ key_nUserId ][sK]; if(g_hSelf.user_id == key_nUserId ) { oPMWindow.Send_LocalEcho(hChatLine.msg );
 } else { oPMWindow.Receive(hChatLine ); } } g_hoPMWindows[ nUserId ]['message_buffer'][ key_nUserId ] = new Array(); } } } } if(PrivateMessageListener.oPMListenerTimeout ) clearTimeout(PrivateMessageListener.oPMListenerTimeout); PrivateMessageListener.oPMListenerTimeout = setTimeout(PrivateMessageListener,2500);}function WindowCloseDetection(){ var nPopupCount = 0; if ( g_hSelf['access_level'] > 0 && ! document.cookie.match(/(?:^|;)\s*passcode\s*=\s*[^;]+(?:;|$)/) ) { top.location.reload(); return; } var bReloadWindowsList = false; for(var sK in g_hWindows ) { if ( g_hWindows[sK] && sK != '-1' ) { if(g_hWindows[sK] && ! g_hWindows[sK].evaluation_counter ) { g_hWindows[sK].evaluation_counter = 0; } var nDeadWindow = 0; try { if ( ! g_hWindows[sK] ) { nDeadWindow = 10; } if ( g_hWindows[sK].is_loaded && ! nDeadWindow && g_hWindows[sK].window && ! g_hWindows[sK].window.document
 ) { nDeadWindow = 11; } else if ( g_hWindows[sK].window && g_hWindows[sK].window.document ) { g_hWindows[sK].is_loaded = true; } if(! nDeadWindow && g_hWindows[sK].is_loaded ) { if ( g_hWindows[sK].closed ) nDeadWindow = 12; else if ( ! g_hWindows[sK].window ) nDeadWindow = 13; else if ( g_hWindows[sK].window && g_hWindows[sK].window.closed ) nDeadWindow = 14; } } catch(oError) { console.log(oError ); Log("WindowCloseDetection error: " + oError.description + " name: " + oError.name ); if(g_hWindows[sK] && ( g_hWindows[sK].is_loaded || g_hWindows[sK].evaluation_counter > 0 ) ) { Log("WindowCloseDetection error: window existed, but no longer available, is_loaded:" + g_hWindows[sK].is_loaded + ", evaluation_counter: " + g_hWindows[sK].evaluation_counter ); var nDeadWindow = 15; } } if(nDeadWindow ) { Log("WindowCloseDetection kill reference to g_hWindows based on criteria (" + nDeadWindow + ") " + sK ); try { Log("WindowCloseDetection events.offByContext " + sK ); events.offByContext(g_hWindows[ sK ].name ); } catch(e) { console.log(e); } delete g_hWindows[sK]; bReloadWindowsList = true; } if(g_hWindows[sK] ) { g_hWindows[sK].evaluation_counter++; } } }
 for(var nRemoteUserId in g_hoPMWindows ) { var nDeadWindow = 0; try { if(! g_hoPMWindows[ nRemoteUserId ] ) nDeadWindow = 20; if(! nDeadWindow && g_hoPMWindows[ nRemoteUserId ]['closed'] ) nDeadWindow = 21; if(! nDeadWindow && g_hoPMWindows[ nRemoteUserId ]['document'] && ! g_hoPMWindows[ nRemoteUserId ]['document'].body ) nDeadWindow = 22; if(! nDeadWindow && g_hoPMWindows[ nRemoteUserId ]['window'] && ! g_hoPMWindows[ nRemoteUserId ]['window'].document ) nDeadWindow = 23; } catch(oError) { nDeadWindow = 24; Log("g_hoPMWindows WindowCloseDetection exception: " + oError); } if(nDeadWindow ) { Log("WindowCloseDetection kill reference to g_hoPMWindows based on criteria (" + nDeadWindow + ") " + nRemoteUserId ); try { if(t.g_hoPMWindows[ nRemoteUserId ] && g_hUsers[ nRemoteUserId ] && t.g_hoPMWindows[nRemoteUserId]['pm_video'] == true ) { TxCmd(FCS.FCTYPE_PREVIEWCHAN, t.g_hSelf['sessionid'], 0, FCS.FCCHAN_PART, nRemoteUserId ); if ( t.g_hoPMWindows[ nRemoteUserId ] && t.g_hoPMWindows[ nRemoteUserId ].presentation_state && IsTokenSession(g_hoPlayerWindows[ nRemoteUserId ].presentation_state ) && ( ! t.g_hoPlayerWindows[nRemoteUserId] || ! t.g_hoPlayerWindows[nRemoteUserId].presentation_state || ! IsTokenSession(g_hoPlayerWindows[ nRemoteUserId ].presentation_state ) ) ) { TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, g_hUsers[nRemoteUserId]['sessionid'], 0, null ); } } } catch(oError) { Log("WindowCloseDetection PM error: " + oError.description ); if(g_hUsers[ nRemoteUserId ] )
 { TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, g_hUsers[ nRemoteUserId ]['sessionid'], 0, null ); } } try { var sK = 'pm_friend' + nRemoteUserId; Log("WindowCloseDetection events.offByContext " + sK ); if(g_hWindows[ sK ] ) { events.offByContext(g_hWindows[ sK ].name ); } } catch(e) { console.log(e); } delete g_hoPMWindows[nRemoteUserId]; bReloadWindowsList = true; FriendsList.RefreshChatIcons(nRemoteUserId); } } for(var nBroadcasterId in g_hoPlayerWindows ) { try { if(g_hoPlayerWindows[ nBroadcasterId ]['window'] && g_hoPlayerWindows[ nBroadcasterId ]['window'].opener != null ) { g_hoPlayerWindows[ nBroadcasterId ].bIsPopup = true; } } catch(oError ) { Log("g_hoPlayerWindows WindowCloseDetection popup test exception: " + oError.description); } var nDeadWindow = 0; try { if(! g_hoPlayerWindows[ nBroadcasterId ] ) { nDeadWindow = 1; } if(! nDeadWindow && g_hoPlayerWindows[ nBroadcasterId ]['closed'] ) { nDeadWindow = 2; }
 if(! nDeadWindow && ! g_hoPlayerWindows[ nBroadcasterId ]['window'] ) { nDeadWindow = 3; } if(! nDeadWindow && ! g_hoPlayerWindows[ nBroadcasterId ]['window'].g_bPlayerHTMLLoaded ) { nDeadWindow = 4; } if(! nDeadWindow && g_hoPlayerWindows[ nBroadcasterId ]['window'].g_nBroadcasterId && g_hoPlayerWindows[ nBroadcasterId ]['window'].g_nBroadcasterId != nBroadcasterId ) { nDeadWindow = 5; } } catch(oError) { nDeadWindow = 7; Log("g_hoPlayerWindows WindowCloseDetection exception: " + oError.description); if(g_hUsers[ nBroadcasterId ] && g_hUsers[ nBroadcasterId ]['sessionid'] && g_hSelf['access_level'] > FCS.FCLEVEL_BASIC ) { TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, g_hUsers[ nBroadcasterId ]['sessionid'], 0, null ); } } if(nDeadWindow && location.search.indexOf('disable_window_close_detection') == -1 ) { Log("WindowCloseDetection kill reference to g_hoPlayerWindows based on criteria (" + nDeadWindow + ") " + nBroadcasterId );
 TxCmd(FCS.FCTYPE_JOINCHAN, g_nSessionId, 0, t.g_hoPlayerWindows[ nBroadcasterId ]['room_channel'] , FCS.FCCHAN_PART); if(t.g_hoPlayerWindows[nBroadcasterId] ) { if ( t.g_hoPlayerWindows[nBroadcasterId].presentation_state && IsTokenSession(t.g_hoPlayerWindows[ nBroadcasterId ].presentation_state ) && g_hUsers[ nBroadcasterId ] && g_hUsers[ nBroadcasterId ].sessionid ) { TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, g_hUsers[ nBroadcasterId ].sessionid, 0, null ); } } if ( t.g_hoPMWindows[nBroadcasterId] ) { if ( t.g_hoPlayerWindows[nBroadcasterId].presentation_state && IsTokenSession(t.g_hoPlayerWindows[nBroadcasterId].presentation_state ) && ( ! t.g_hoPMWindows[nBroadcasterId] || ! t.g_hoPMWindows[nBroadcasterId].presentation_state || ! IsTokenSession(t.g_hoPMWindows[nBroadcasterId].presentation_state ) ) ) { if(g_hUsers[ nBroadcasterId ] ) { TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, g_hUsers[ nBroadcasterId ]['sessionid'], 0, null ); } } } try { var sK = PublicChannel(nBroadcasterId ); Log("WindowCloseDetection events.offByContext " + sK ); if(g_hWindows[ sK ] ) { events.offByContext(g_hWindows[ sK ].name ); } } catch(e) { console.log(e); } delete g_hoPlayerWindows[ nBroadcasterId ]; bReloadWindowsList = true; } } if(bReloadWindowsList ) { LoadWindowsList(); } if(typeof(WindowCloseDetection.oTimer) != 'undefined' ) { clearTimeout(WindowCloseDetection.oTimer); } WindowCloseDetection.oTimer = setTimeout(WindowCloseDetection, nPopupCount > 1 ? 500 : 1500 );function CloseDhtmlWindow(sWindowKey ){ var nLookForPlayerWindow = parseInt(sWindowKey ); var nPlayerWindowId = 0; if(nLookForPlayerWindow > 0 ) { nPlayerWindowId = ( nLookForPlayerWindow % FCS.CHANNEL_ID_START ); } if(nPlayerWindowId && g_hoPlayerWindows[ nPlayerWindowId ] ) { delete g_hoPlayerWindows[sWindowKey]; } else if(sWindowKey && typeof(sWindowKey)=='string' && sWindowKey.match(/pm_friend(\d+)/) ) { delete g_hoPMWindows[ RegExp.$1 ]; } delete g_hWindows[sWindowKey]; LoadWindowsList();}DhtmlWindowManager = { nCounter: 0};DhtmlWindowManager.Open = function(hOpts ){ var nOpenPopups=0; for(var k in DhtmlWindowManager.register ) { if(DhtmlWindowManager.register[k].closed ) { delete DhtmlWindowManager.register[k]; } else { nOpenPopups++; } } var hDhtmlWindowParams = hOpts.window_params; hDhtmlWindowParams.options = hOpts; hDhtmlWindowParams.MfcMouseTracker = g_oMouseTracker;
 hDhtmlWindowParams.MfcClickDrag = mfcClickDrag; hDhtmlWindowParams.MfcMousePress = mfcMousePress; hDhtmlWindowParams.icon_url = DhtmlWindowManager.GetIconUrl(hOpts.window_key, hOpts.resource ); hDhtmlWindowParams.icon_sprite_css = DhtmlWindowManager.GetIconSpriteCss(hOpts.window_key, hOpts.resource ); hDhtmlWindowParams.maximize_iframe = g_hSelf.single_page_website; hDhtmlWindowParams.containing_div_id = 'dhtml_window_boundry'; hDhtmlWindowParams.title = hDhtmlWindowParams.popup_title || DhtmlWindowManager.GetTitle(hOpts.window_key, hOpts.resource ); hDhtmlWindowParams.title = MfcStringUtilities.parse_template(hDhtmlWindowParams.title, hDhtmlWindowParams ); var sHash = ''; if ( hOpts.page.indexOf('#') > -1 ) { hOpts.page = hOpts.page.split('#'); sHash = '#'+hOpts.page[1]; hOpts.page = hOpts.page[0]; } hDhtmlWindowParams.url = hOpts.page + ( ( hOpts.page.indexOf("?") > -1 ) ? '&' : '?' ) + 'dhtml_window=1'+sHash; var viewportWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; var viewportHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; if(hDhtmlWindowParams.width > 800 && viewportWidth < 1000 ) { hDhtmlWindowParams.width = viewportWidth - 200; } if(hDhtmlWindowParams.height > viewportHeight - 200 ) { hDhtmlWindowParams.height = viewportHeight - 200; } if(t.WindowCloseDetection ) { hDhtmlWindowParams.oCloseWindowHandler = function() { t.CloseDhtmlWindow(hOpts.window_key ); } } if(hOpts.resource == 'player' ) { hDhtmlWindowParams.f_on_resize } } hDhtmlWindowParams.use_plain_container = 1; if ( g_UA.mobile ) { if(hOpts.resource == 'tip' ) { hDhtmlWindowParams.left = Math.round(viewportWidth * 0.35 ); hDhtmlWindowParams.width = Math.round(viewportWidth * 0.65 ) - 85; } else if(g_hSelf['show_main_menu'] && window.innerWidth > 800 ) {
 hDhtmlWindowParams.left = 20; hDhtmlWindowParams.width = viewportWidth - 200; } else { hDhtmlWindowParams.width = viewportWidth - 80; hDhtmlWindowParams.left = Math.round(( viewportWidth - 30 ) - hDhtmlWindowParams.width ) / 2; } } else if(! hDhtmlWindowParams.left && ! hDhtmlWindowParams.top ) { if(hOpts.resource == "pm_friend" ) { var dQuadX = g_oMouseTracker.dQuadX; if(g_hSelf['show_main_menu'] ) { dQuadX = dQuadX * 1.4; } hDhtmlWindowParams.left = g_oMouseTracker.clientX - parseInt(hDhtmlWindowParams.width * dQuadX ); hDhtmlWindowParams.top = g_oMouseTracker.clientY - parseInt(hDhtmlWindowParams.height * g_oMouseTracker.dQuadY ); } else { hDhtmlWindowParams.top = ( viewportHeight - hDhtmlWindowParams.height ) - 100; hDhtmlWindowParams.left = ( viewportWidth - hDhtmlWindowParams.width ) - 50; if(g_hSelf['show_main_menu'] ) { hDhtmlWindowParams.left -= 200; } } hDhtmlWindowParams.left -= ( ( nOpenPopups % 3 ) * 30 ); hDhtmlWindowParams.top -= ( ( nOpenPopups % 3 ) * 30 ); } if(t && t.g_hSelf && t.g_hSelf.single_page_website ) { hDhtmlWindowParams.top += document.body.scrollTop; }
 if(! hDhtmlWindowParams.width ) { hDhtmlWindowParams.width = 800; } if(! hDhtmlWindowParams.height ) { hDhtmlWindowParams.height = 600; } oDW = new MfcDhtmlWindow(hDhtmlWindowParams ); DhtmlWindowManager.register[ hOpts.window_key ] = oDW; DhtmlWindowManager.nCounter++; return oDW;};DhtmlWindowManager.register = {};DhtmlWindowManager.PeopleIconNumber = function(hUser ){ if(! hUser || ! hUser.username ) { return 0; } if(hUser.username.match(/^..[abc1]/i) ) return 1; else if(hUser.username.match(/^..[def2]/i) ) return 2; else if(hUser.username.match(/^..[ghi3]/i) ) return 3; else if(hUser.username.match(/^..[jkl4]/i) ) return 4; else if(hUser.username.match(/^..[mno5]/i) ) return 5; else if(hUser.username.match(/^..[pqr6]/i) ) return 6; else if(hUser.username.match(/^..[stu7]/i) ) return 7; else if(hUser.username.match(/^..[vwxy]/i) ) return 8; else if(hUser.username.match(/^..[z890_]/i) ) return 9;};DhtmlWindowManager.PeopleIconGender = function(hUser ){ return hUser.access_level == FCS.FCLEVEL_MODEL ? 'woman' : 'man';};DhtmlWindowManager.GetIconSpriteCss = function(sWindowKey, sResource ){ if(typeof(sWindowKey) == 'string' && sWindowKey.match(/pm_friend(\d+)/) && RegExp.$1 > 0 ) { var nUserId = RegExp.$1; if(g_hUsers[nUserId] ) { var nIcon = DhtmlWindowManager.PeopleIconNumber(g_hUsers[nUserId]); var sGender = DhtmlWindowManager.PeopleIconGender(g_hUsers[nUserId]); return 'sprite-icons sprite-small_' + sGender + '_' + nIcon; } } else if(typeof(sWindowKey) == 'string' && sWindowKey.match(/^\d{7,10}$/) ) { var nRoomOwnerId = sWindowKey % FCS.CHANNEL_ID_START; if(nRoomOwnerId == g_hLoungeIds.Lounge ) { return 'sprite-icons sprite-lounge16x16'; } else if(nRoomOwnerId == g_hLoungeIds.Lounge1000 ) { return 'sprite-icons sprite-lounge100016x16'; }
 else if(nRoomOwnerId == g_hLoungeIds.Lounge10000 ) { return 'sprite-icons sprite-lounge1000016x16'; } } else if(g_hResources[ sWindowKey ] && g_hResources[ sWindowKey ].sprite_css ) { return g_hResources[ sWindowKey ].sprite_css; } else if(g_hResources[ sResource ] && g_hResources[ sResource ].sprite_css ) { return g_hResources[ sResource ].sprite_css; } return 'sprite-icons sprite-popup12x12';};DhtmlWindowManager.GetIconUrl = function(sWindowKey, sResource ){ var sIconFile; if(typeof(sWindowKey) == 'string' && sWindowKey.match(/pm_friend(\d+)/) ) { var nUserId = RegExp.$1; if(g_hUsers[nUserId] ) { var nIcon = DhtmlWindowManager.PeopleIconNumber(g_hUsers[nUserId]); var sGender = DhtmlWindowManager.PeopleIconGender(g_hUsers[nUserId]); sIconFile = 'people/small_' + sGender + '_' + nIcon + '.png'; } } else if(typeof(sWindowKey) == 'string' && sWindowKey.match(/^\d{7,10}$/) ) { var nRoomOwnerId = sWindowKey % FCS.CHANNEL_ID_START; if(nRoomOwnerId == g_hLoungeIds.Lounge ) { sIconFile = 'png/lounge.48x48.png'; } else if(nRoomOwnerId == g_hLoungeIds.Lounge1000 ) { sIconFile = 'png/lounge1000.48x48.png'; } else if(nRoomOwnerId == g_hLoungeIds.Lounge10000 ) { sIconFile = 'png/lounge10000.48x48.png'; } } else if(g_hResources[ sWindowKey ] && g_hResources[ sWindowKey ].sm_icon ) { sIconFile = g_hResources[ sWindowKey ].sm_icon; } else if(g_hResources[ sResource ] && g_hResources[ sResource ].sm_icon ) { sIconFile = g_hResources[ sResource ].sm_icon; } if(! sIconFile ) { sIconFile = 'png/popup.12x12.png'; } return t.g_hPlatform.image_url_cdn + 'files/images/icons/' + sIconFile;};DhtmlWindowManager.GetTitle = function(sWindowKey, sResource )
{ var sTitle; if(typeof(sWindowKey) == 'string' && ( sWindowKey.match(/pm_friend(\d+)/) || sWindowKey.match(/tip(\d+)/) || sWindowKey.match(/^(\d{8,10})$/) ) ) { var nRoomOwnerId = RegExp.$1 % FCS.CHANNEL_ID_START; sTitle = (g_hUsers[nRoomOwnerId] && typeof g_hUsers[ nRoomOwnerId ].username != 'undefined') ? g_hUsers[ nRoomOwnerId ].username : ( sWindowKey.match(/pm_friend(\d+)/) ) ? 'Private Message' : ' '; } else if(g_hResources[ sWindowKey ] && g_hResources[ sWindowKey ].title ) { sTitle = g_hResources[ sWindowKey ].title; } else if(g_hResources[ sResource ] && g_hResources[ sResource ].title ) { sTitle = g_hResources[ sResource ].title; } if(! sTitle ) { if(sResource ) { sTitle = sResource.replace(/_/g,' '); } else if(sWindowKey ) { sTitle = sWindowKey.replace(/_/g,' '); } } return sTitle;};function LoadWindowsList(){ var oFloatingList = GetEl('floating_windows_list'); var oFixedList = GetEl('windows_list'); if(! oFloatingList || ! oFixedList ) { return; } var sCurrentList=''; var sWindowList = ""; var nUnitHeight = 26; var nTotalHeight = 0;
 for(var sWindowId in g_hWindows ) { if(g_hWindows[sWindowId].type != 'dhtml_window' || sWindowId.match(/pm_friend\d+/) ) { continue; } sCurrentList += sWindowId + ' '; nTotalHeight += nUnitHeight; var sTitle = DhtmlWindowManager.GetTitle(sWindowId ); var sImageUrl = DhtmlWindowManager.GetIconUrl(sWindowId ); var sImageSpriteCss = DhtmlWindowManager.GetIconSpriteCss(sWindowId ); sWindowList += " <div class=window_button_container> <div class='window_button'> <div class=window_button_label > <a href=\"javascript:javascript:g_hWindows['"+sWindowId+"'].restore();\" > " + sTitle + " </a> </div> <div class=window_button_x title=\"Close this Window\" onClick=\"g_hWindows['"+sWindowId+"'].close();\"> "; if(1 ) sWindowList += "<div class='sprite-icons sprite-window_menu_x_2'></div>"; else sWindowList += "<img src=\"" + t.g_hPlatform.image_url_cdn + "files/styles/mfc/images/misc/window_menu_x_2.png\">"; sWindowList += " </div> </div> <div style='position:absolute;left:-4px;top:4px;width:16px;'> <a href=\"javascript:javascript:g_hWindows['"+sWindowId+"'].restore();\">"; if(sImageSpriteCss ) { sWindowList += "<div class='sprite-link " + sImageSpriteCss + "'></div>"; } else { sWindowList += "<i"+"mg style=\"" + sStyle + "\" sr"+"c=" + sImageUrl + " style='vertical-align:bottom;margin:0px;'>"; } sWindowList += "</a> </div> </div> "; } var sPMList = ""; for(var nUserId in g_hoPMWindows) {
 var hUser; if(! ( hUser = g_hUsers[nUserId] ) || nUserId == 0 ) { continue; } sCurrentList += nUserId + ' '; nTotalHeight += nUnitHeight; var sStyle=''; var sWebcam = ""; if(hUser['state'] == FCS.FCVIDEO_OFFLINE || typeof(hUser['state']) == "undefined" ) { if ( g_UA.IE ) sStyle = "filter:progid:DXImageTransform.Microsoft.Alpha(opacity=50);"; else sStyle = "-moz-opacity:0.5;opacity:0.5;"; } else if(IsBroadcastState(hUser['state'] ) && hUser['state'] != FCS.FCVIDEO_TX_AWAY ) { nIconLeft = -6; sWebcam = "<div class='sprite-icons sprite-tiny_webcam cpo_listeners' data-cpouid='"+nUserId+"' data-cpo_left_click=player style='position: absolute; top: -1px; left: 5px; border: 1px solid #EEE; border-radius: 3px; background-color: white; cursor: pointer; ' onClick=\"popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\" " +  "></div>"; } var sIcon; if(g_hUsers[nUserId].avatars ) { var sSrc; if(hUser['broken_avatar'] ) sSrc = t.g_hPlatform.image_url_cdn + 'files/images/misc/generic_avatar.20x20.gif'; else sSrc = AvatarUrl(nUserId,20); sIcon = "<img style=\"cursor:pointer;\" sr"+"c='" + sSrc + "' class='tiny_avatar_border' height=16 width=16 onClick=\"popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\" onError=\" this.src = '" + t.g_hPlatform.image_url_cdn + "files/images/icons/people/small_woman_1.png?2'; t.g_hUsers[" + nUserId + "]['broken_avatar'] = 1; \" >"; } else { sIcon = "<div class='sprite-link " + popUserMenu.people_icon_sprite_css(nUserId ) + "' onClick='popUserMenu.open("+nUserId+",g_oDhtmlPopup);' ></div>"; } sPMList += " <div class=window_button_container > <div style='position:absolute;top:3px;left:-5px;width:16px;'> " + sIcon + " </div> <div class='window_button' id=private_message_list_"+nUserId+" onMouseEnter=\" LoadWindowsList.ShowPreview_mouseenter("+nUserId+"); \" onMouseLeave=\" LoadWindowsList.ShowPreview_mouseleave("+nUserId+"); \"> " + A('pm_friend',{no_title:true,user_id:nUserId,username:hUser['username']}) + " <div class=window_button_label\
 id=private_message_blinker_"+nUserId+"  > <span " +  " class='user_style username' style=\"color:blue; " + MfcCustomFonts.prototype.get_style(g_hUsers[nUserId] ) + " font-weight:bold; \"> " + hUser['username'] + " </span> </div> </a> <div class=window_button_x title=\"Close PM Window\" onClick=\"ClosePMWindow(" + nUserId + ");\"> "; if(1 ) sPMList += "<div class='sprite-icons sprite-window_menu_x_2'></div>"; else sPMList += "<img src=\"" + t.g_hPlatform.image_url_cdn + "files/styles/mfc/images/misc/window_menu_x_2.png\">"; sPMList += " </div> </div> " + sWebcam + " </div> "; with({ nUserId: nUserId }) { setTimeout(function(){ LoadWindowsList.SetPMTitle(nUserId ); },500); } } if(LoadWindowsList.sCurrentList == sCurrentList ) { return; } LoadWindowsList.sCurrentList = sCurrentList; if(sWindowList || sPMList ) { var oWindowContainer; if(oWindowContainer = GetEl('windows_list_tr') ) { oWindowContainer.style.display='block'; } var sHtml = sWindowList; if(sWindowList && sPMList ) { nTotalHeight += 15; sHtml += "<div style='font-size:10px;'>&nbsp;</div>"; } sHtml += sPMList; oFixedList.style.display='block'; oFixedList.style.height= ( nTotalHeight ) + 'px';
 if(g_hSelf.floating_windows_list ) { oFloatingList.style.display='block'; oFloatingList.style.height= ( nTotalHeight - 4 ) + 'px'; SetHTML(oFloatingList, sHtml, { 'force': true } ); SetHTML(oFixedList, '', { 'force': true } ); } else { oFloatingList.style.display='none'; SetHTML(oFloatingList, '', { 'force': true } ); SetHTML(oFixedList, sHtml, { 'force': true } ); } } else { LoadWindowsList.close(); }};LoadWindowsList.ShowPreview = function(nUserId, hOpts ){ hOpts = hOpts || {}; if(! g_hSelf.show_pm_preview ) { return; } var oDhtmlWindow = DhtmlWindowManager.register[ 'pm_friend' + nUserId ]; if(oDhtmlWindow && ! oDhtmlWindow.minimized && ! oDhtmlWindow.closed ) { return; } if(( g_hSelf.display_pm_inline == 1 && g_nBroadcasterId == nUserId ) || ( g_hSelf.display_pm_inline == 3 && g_nBroadcasterId > 0 ) ) { return; } if(! g_hoPMWindows[nUserId] || ! g_hoPMWindows[nUserId].unread_messages[nUserId] || ! g_hoPMWindows[nUserId].unread_messages[nUserId].length ) { return; } var sMessage = g_hoPMWindows[nUserId].unread_messages[nUserId][ g_hoPMWindows[nUserId].unread_messages[nUserId].length - 1 ].msg; sMessage = LoadWindowsList.cleanUserMessage(sMessage );
 var preview_movement = GetEl('window_button_preview_movement_' + nUserId ); if(preview_movement ) { preview_movement.classList.add('window_button_preview_movement_remove'); } setTimeou}, hOpts.no_delay ? 0 : 150 );};LoadWindowsList.ShowPreview_exec = function(nUserId, sMessage ){ var private_message_list = GetEl('private_message_list_' + nUserId ); if(! private_message_list ) { return; } var preview_container = GetEl('window_button_preview_container_' + nUserId ); if(preview_container ) { preview_container.remove(); } var preview_container = document.createElement('div'); preview_container.id = "window_button_preview_container_" + nUserId; preview_container.classList.add('window_button_preview_container'); var preview_movement = document.createElement('div'); preview_movement.id = "window_button_preview_movement_" + nUserId; preview_movement.classList.add('window_button_preview_movement'); var preview_content = document.createElement('span'); preview_content.id = "window_button_preview_content_" + nUserId; preview_content.classList.add('window_button_preview_content'); preview_content.onclick = () => { A('pm_friend',{ user_id: nUserId, load_video: true, do_click: true }); }; preview_content.oncontextmenu = (e) => { e.preventDefault(); popUserMenu.right_click_open(e,nUserId); }; preview_content.style.cursor = 'pointer'; preview_content.style.fontFamily = MfcCustomFonts.prototype.get_font_family(g_hUsers[ nUserId ] ); if(! NightMode_Top.enabled ) { preview_content.style.color = MfcCustomFonts.prototype.get_font_color(g_hUsers[ nUserId ] ); } var sHtml = ''; if(! TogglePersonalMenu.nDisplay ) { sHtml += "<img class=preview_content_avatar src=\"" + AvatarUrl(nUserId,30) + "\"> <b>" + g_hUsers[ nUserId ].username + "</b>: &nbsp;"; } else { sHtml += "<img class=preview_content_chat_bubble src='" + t.g_hPlatform.image_url_cdn + "files/ico/chat_bubble.svg'>"; } sHtml += sMessage; if(! TogglePersonalMenu.nDisplay ) { sHtml += "<div onClick=\" event.stopPropagation(); t.Load('toggle_menu');\" style=\"display:inline-block;padding:0px 10px;\">&#10230;</div>"; } preview_content.innerHTML = sHtml; preview_movement.appendChild(preview_content); preview_container.appendChild(preview_movement); if(! TogglePersonalMenu.nDisplay ) {
 preview_movement.classList.add('hidden_menu'); preview_content.classList.add('hidden_menu'); var layout_table = GetEl('layout_table'); var coords = getAbsoluteOffset(private_message_list); preview_container.style.left = document.documentElement.clientWidth + 'px'; preview_container.style.top = coords.y + 'px'; preview_container.style.zIndex = 101; preview_container.style.margin = '1px -1px 0px 0px'; preview_movement.style.left = '0px'; layout_table.parentNode.insertBefore(preview_container,layout_table); } else if(! g_hSelf.floating_windows_list ) { var friends = GetEl('friends'); if(friends.scrollTop > 0 ) { return; } preview_movement.classList.add('in_menu'); preview_content.classList.add('in_menu'); var friends = GetEl('friends'); var coords = getRelativeOffset(private_message_list,friends); preview_container.style.left = coords.x + 'px'; preview_container.style.top = coords.y + 'px'; preview_container.style.zIndex = 101; friends.parentNode.insertBefore(preview_container,friends); } else { preview_movement.classList.add('in_menu'); preview_content.classList.add('in_menu'); preview_container.style.left = '15px'; preview_container.style.top = '1px'; private_message_list.parentNode.insertBefore(preview_container,private_message_list); } setTimeou},50); LoadWindowsList.ShowPreview_clearTimers(nUserId ); LoadWindowsList.ShowPreview_timers[ nUserId ].close = setTimeout(() => { LoadWindowsList.ShowPreview_close(nUserId );
 },10000);};LoadWindowsList.ShowPreview_close = function(nUserId ){ var preview_movement = GetEl("window_button_preview_movement_" + nUserId ); if(preview_movement ) { preview_movement.classList.add('window_button_preview_movement_remove'); } LoadWindowsList.ShowPreview_clearTimers(nUserId ); LoadWindowsList.ShowPreview_timers[ nUserId ].close_remove = setTimeout(() => { var preview_container = GetEl('window_button_preview_container_' + nUserId ); if(preview_container ) { preview_container.remove(); } },600);};LoadWindowsList.ShowPreview_mouseenter = function(nUserId ){ LoadWindowsList.ShowPreview_clearTimers(nUserId ); if(GetEl('window_button_preview_container_' + nUserId ) ) { return; } LoadWindowsList.ShowPreview(nUserId,{ no_delay: 1 });};LoadWindowsList.ShowPreview_mouseleave = function(nUserId ){ LoadWindowsList.ShowPreview_clearTimers(nUserId ); LoadWindowsList.ShowPreview_timers[ nUserId ].mouseleave = setTimeou},2500);};LoadWindowsList.ShowPreview_timers = {};LoadWindowsList.ShowPreview_clearTimers = function(nUserId ){ LoadWindowsList.ShowPreview_timers[ nUserId ] = LoadWindowsList.ShowPreview_timers[ nUserId ] || {}; clearTimeout(LoadWindowsList.ShowPreview_timers[ nUserId ].close ); clearTimeout(LoadWindowsList.ShowPreview_timers[ nUserId ].close_remove ); clearTimeout(LoadWindowsList.ShowPreview_timers[ nUserId ].mouseleave );};LoadWindowsList.SetPMTitle = function(nUserId ){ var el = GetEl('private_message_list_' + nUserId ); if(! g_hoPMWindows[nUserId] || ! g_hoPMWindows[nUserId].unread_messages || ! g_hoPMWindows[nUserId].unread_messages[nUserId] || g_hoPMWindows[nUserId].unread_messages[nUserId].length == 0 ) { if(el ) el.title = "Private Message " + ( t.g_hUsers[nUserId] ? ( ' with ' + t.g_hUsers[nUserId].username ) : '' ); return; } 
 var aMessages = [ g_hoPMWindows[nUserId].unread_messages[nUserId].length + ' message' + ( g_hoPMWindows[nUserId].unread_messages[nUserId].length > 1 ? 's':'' ) + ' from ' + ( t.g_hUsers[nUserId] && t.g_hUsers[nUserId].username ) + ': ' ]; var min = 0; if(g_hoPMWindows[nUserId].unread_messages[nUserId].length > 5 ) { aMessages.push('...'); min = g_hoPMWindows[nUserId].unread_messages[nUserId].length - 5; } for(var a=min; a < g_hoPMWindows[nUserId].unread_messages[nUserId].length; a++ ) { aMessages.push(' ' + LoadWindowsList.cleanUserMessage(g_hoPMWindows[nUserId].unread_messages[nUserId][a].msg ) ); } if(el ) { el.title = aMessages.join('\n'); }};LoadWindowsList.cleanUserMessage = function(sCleanMsg ){ sCleanMsg = sCleanMsg.replace(/[<>"']/g,''); sCleanMsg = sCleanMsg.replace(/#~u,.*\W([a-z]+)~#/g,'[$1]'); sCleanMsg = sCleanMsg.replace(/#~e,\d+,(\w+)[^#]+#/g,'[$1]'); sCleanMsg = sCleanMsg.replace(/#~[^#]+#/g,'<emote>'); sCleanMsg = sCleanMsg.replace(/\s+$/g,''); sCleanMsg = sCleanMsg.replace(/^\s+/g,''); return sCleanMsg;};LoadWindowsList.close = function(sHtml ){ var oEl; if(oEl = GetEl('floating_windows_list') ) { oEl.style.display='none'; } if(oEl = GetEl('windows_list') ) { oEl.style.display='none'; } if(oEl = GetEl('windows_list_pin') ) { oEl.style.display='none'; } if(oEl = GetEl('windows_list_tr') ) { oEl.style.display='none'; }};LoadWindowsList.setFloat };LoadWindowsList.Notice = function(){ var oEl; if(oEl = GetEl('floating_windows_list') ) { oEl.style.backgroundColor='#FFB'; } if(oEl = GetEl('windows_list') ) { oEl.style.backgroundColor='#FFB'; }};LoadWindowsList.Unnotice = function()
{ var oEl; if(oEl = GetEl('floating_windows_list') ) { oEl.style.backgroundColor=''; } if(oEl = GetEl('windows_list') ) { oEl.style.backgroundColor=''; }};function ToggleHeader(hOptions){ hOptions = hOptions || {}; if(g_hSelf['show_header'] == undefined ) g_hSelf['show_header'] = 1; if(! hOptions['render_only'] || hOptions.show_header ) { if(hOptions.show_header != undefined ) g_hSelf['show_header'] = hOptions.show_header; else if(g_hSelf['show_header'] == 2 && ToggleHeader.displayed == true ) g_hSelf['show_header'] = 0; else g_hSelf['show_header'] = g_hSelf['show_header'] == 1 ? 0 : 1; UserExtensions.Write('show_header', g_hSelf['show_header'] ); $('#header_display').val(g_hSelf.show_header + '' ); } if(g_hSelf.show_header == 2 && player.g_sPlayerMode == 'player' ) { hOptions.hide = true; } if(GetEl('header_main') ) { if(! g_hSelf['show_header'] || hOptions.hide ) { ToggleHeader.displayed = false; SlideHeader('shrink'); } else if(g_hSelf['show_header'] == 1 || hOptions.reveal ) { ToggleHeader.displayed = true; SlideHeader('grow'); } } setTimeout(function() { if(window.player && player.LayoutSizing && player.LayoutSizing.size_chat_area
 && player.RefreshMessageBar ) { player.LayoutSizing.size_chat_area(); player.RefreshMessageBar(); } ResizeHandler(); LoadMenu(); }, 500 );}ToggleHeader.displayed = true;function SlideHeader(sMode) { var hw = GetEl('header_main'); var ob = GetEl('outer_body'); if ( sMode == 'grow' ) { ob.classList.remove('header_slim'); hw.classList.add('expanded'); ob.classList.add('header_expanded'); } else { hw.classList.remove('expanded'); ob.classList.remove('header_expanded'); ob.classList.add('header_slim'); }}var PrivateMessageBlinker = {};PrivateMessageBlinker.Start = function(nUserId ){ if(g_hoPMWindows[nUserId] ) { g_hoPMWindows[nUserId].blinking = true; } FriendsList.RefreshChatIcons(nUserId ); PrivateMessageBlinker.Execute(nUserId, 1 );};PrivateMessageBlinker.Stop = function(nUserId ){ if(g_hoPMWindows[nUserId] ) { g_hoPMWindows[nUserId].blinking = false; if(g_hoPMWindows[nUserId]['blinker_phase'] != 0 ) FriendsList.RefreshChatIcons(nUserId ); } PrivateMessageBlinker.Execute(nUserId, -1 );};PrivateMessageBlinker.Execute = function(nUserId, nSetPhase )
{ if(! g_hoPMWindows[nUserId] ) return; if(typeof(g_hoPMWindows[nUserId]['blinker_phase'] ) == 'undefined' ) g_hoPMWindows[nUserId]['blinker_phase'] = 0; var pml = GetEl('private_message_list_'+nUserId); if ( !!pml ) { if ( nSetPhase === 1 ) { pml.classList.add('active'); } else { pml.classList.remove('active'); } }};function AutoNotes(){};AutoNotes.getHtml = function(oNotes, nWindowId ){ var hUser = t.g_hUsers[ oNotes.subject_id ]; if(! hUser ) { return; } var aTmp = oNotes.notes.replace(/</g,'&lt;').split('\n'); var sViewAll=''; if(aTmp.length > 8 ) { var sViewAll = "<div>" + A('user_notepad',{ 'load_user_id': hUser.user_id }) + "More...</a></div>"; } oNotes.notes = aTmp.slice(0,8).join('<br>'); var sHtml = " <div class=\"autonote_inchat\" > <div class=\"autonote_inchat_close\" onClick=\"t.AutoNotes.openMenu({ window: window, container: this.parentNode, nUserId: " + hUser.user_id + ", nWindowId: '" + nWindowId + "' });\">x</div> " + A('user_notepad',{ 'load_user_id': hUser.user_id }) + "Notes</a> for  <span class='user_style username' onClick=\"popUserMenu.open(" + hUser.user_id + ",g_oDhtmlPopup);\" style=\"cursor:pointer;font-weight:bold;" + MfcCustomFonts.prototype.get_style(hUser ) + "\" " +  "> " + hUser['username'] + "</span> &nbsp; </b>  <span style=\"font-family:courier new;padding:5px;\"> " + oNotes.notes + " " + sViewAll + " </span> </div> ";
 return sHtml;};AutoNotes.openMenu = function(hOptions ){ AutoNotes.currentEl = hOptions.container; AutoNotes.nUserId = hOptions.nUserId; AutoNotes.sType = hOptions.sType; AutoNotes.nWindowId = hOptions.nWindowId; AutoNotes.window = hOptions.window; var sLinks; if(hOptions.nWindowId && hOptions.nWindowId.indexOf('pm_') == 0 ) sLinks = A('user_notepad',{ 'load_user_id': hOptions.nUserId, 'automatic_notes_pm':'0' }) + "<span onClick=\"g_oDhtmlPopup.close();\">Do not show notes in PM windows.</span></a>"; else sLinks = A('user_notepad',{ 'load_user_id': hOptions.nUserId, 'automatic_notes_chatroom':'0' }) + "<span onClick=\"g_oDhtmlPopup.close();\">Do not show notes in chat rooms.</span></a>"; hOptions.window.g_oDhtmlPopup.open(" <div style=\"width:210px;padding-top:0px;line-height:25px;\"> <a href=\"javascript:t.AutoNotes.closeAutoNotes();\">Close this note.</a><br> " + sLinks + "<br>\<!-- " + A('user_notepad',{ 'load_user_id': hOptions.nUserId }) + "<span onClick=\"g_oDhtmlPopup.close();\">Change Notes settings.</span></a><br> --> </div> ",'no_close_on_mouseout,provide_close_button,enable_context_menu');};AutoNotes.closeAutoNotes = function(hOptions ){ if(AutoNotes.currentEl ) { AutoNotes.currentEl.style.display='none'; } AutoNotes.window.g_oDhtmlPopup.close();};function NewsFeed_InChat(){};NewsFeed_InChat.hSuspendedWindows = {};NewsFeed_InChat.getHtml = function(sType,hNewsItem,nWindowId){ var sHtml=''; var sStyle=''; var sClass=''; var nAccessLevel = g_hUsers[nUserId] ? g_hUsers[nUserId]['access_level'] : FCS.FCLEVEL_PREMIUM; var nUserId = hNewsItem['user_id']; if(NewsFeed_InChat.hSuspendedWindows[ sType + nWindowId ] && nUserId != MFC_NEWS_USER_ID ) { return ''; } if(nUserId == MFC_NEWS_USER_ID ) { nAccessLevel = 5; sClass = 'newsfeed_inchat_mfcnews';
 } sMsg = ParseEmoteOutput.prototype.Parse(hNewsItem['msg'], { allow_user_images: g_hSelf['allow_user_images'], in_chat_news_feed: 1, access_level: nAccessLevel, onload_code: "if(typeof(ChatBox) != 'undefined' && ChatBox.SmoothScroll && ! this.doOnce ) { this.doOnce=1; ChatBox.SmoothScroll('img_onload'); } ", onclick_code: "t.EnlargeImage.open(( g_oDhtmlPopup != undefined ? g_oDhtmlPopup : null ) ,'%image%','%shortcut%')" } ); var sHtml = " <div class=\"newsfeed_inchat " + sClass + "\" > "; if(nUserId != MFC_NEWS_USER_ID ) { sHtml += " <div class='newsfeed_inchat_close' onClick=\"t.NewsFeed_InChat.openMenu({ window: window, container: this.parentNode, nUserId: " + nUserId + ", sType: '" + sType + "', nWindowId: " + nWindowId + " });\">x</div> "; } var sUserFont = ! g_hUsers[nUserId] || g_hUsers[nUserId].state == FCS.FCVIDEO_OFFLINE || typeof(g_hUsers[nUserId]['state']) == 'undefined' ? 'color:black;' : MfcCustomFonts.prototype.get_style(g_hUsers[nUserId] ); sHtml += " <img class=newsfeed_inchat_avatar src=\"" + AvatarUrl(nUserId,30) + "\" onClick=\"popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\" " +  + " draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; \"> <span onClick=\"popUserMenu.open(" + nUserId + ",g_oDhtmlPopup);\" class='user_style username' style=\"cursor:pointer;font-weight:bold;" + sUserFont + "\" " +  ">" + hNewsItem['username'] + "</span> " + A('news_feed',{ 'user_id': nUserId, style: sUserFont }) + "News Feed</a></b>:  " + sMsg + " </div> "; return sHtml;};NewsFeed_InChat.openMenu = function(hOptions ){ NewsFeed_InChat.currentEl = hOptions.container; NewsFeed_InChat.nUserId = hOptions.nUserId; NewsFeed_InChat.sType = hOptions.sType; NewsFeed_InChat.nWindowId = hOptions.nWindowId; NewsFeed_InChat.window = hOptions.window; hOptions.window.g_oDhtmlPopup.open(" <div style=\"width:210px;padding-top:0px;line-height:25px;\"> <a href=\"javascript:t.NewsFeed_InChat.closeNewsItem();\">Close this news feed alert.</a><br> " + A('news_feed',{ mode:'hidden', manual_username: g_hUsers[hOptions.nUserId].username , popup_menu:1 }) + "<span onClick=\"g_oDhtmlPopup.close();\">Ignore news feeds from this user.</span></a><br> " + A('news_feed',{ user_id: hOptions.nUserId }) + "<span onClick=\"g_oDhtmlPopup.close();\">Change news feed alert settings.</span></a><br> <a href=\"javascript:t.NewsFeed_InChat.suspendNewsItems();\">No more alerts in this window.</a><br> </div>\
 ",{ no_close_on_mouseout:true ,provide_close_button:true , enable_context_menu:true });};NewsFeed_InChat.closeNewsItem = function(){ if(NewsFeed_InChat.currentEl ) { NewsFeed_InChat.currentEl.style.display='none'; } NewsFeed_InChat.window.g_oDhtmlPopup.close();};NewsFeed_InChat.suspendNewsItems = function(sType, nWindowId ){ NewsFeed_InChat.hSuspendedWindows[ NewsFeed_InChat.sType + NewsFeed_InChat.nWindowId ] = true; NewsFeed_InChat.window.g_oDhtmlPopup.update("<br><br>You will no longer receive News Feed updates in this window for the remainder of this session.");};function FormatChat(sMsg, nUserId, hOptions ){ hOptions = hOptions || {}; var bEmote = false; var sExtraClass_Name = ''; var sExtraClass_Chat = ''; var sExtraStyle = ''; var sExtraStyle = ''; var sExtraContainerStyle = ''; var sContainerClass = ''; if(! sMsg ) return ''; if(nUserId != g_hSelf['user_id'] && nUserId != 0 ) { sMsg = sMsg.replace(/&quot;/g,'"'); sMsg = sMsg.replace(/&#?\w+;?/g,''); } if(nUserId != 0 ) { sMsg = sMsg.replace(/</g,'&lt;'); sMsg = sMsg.replace(/`/g,' '); } var hUser = {}; if(nUserId && g_hUsers[nUserId] ) { hUser = g_hUsers[nUserId]; } else if(hUser.sessionid && typeof(hUser.access_level ) == 'undefined' ) { hUser.access_level=0; } for(var sK in hOptions.userDetails ) hUser[sK] = hOptions.userDetails[sK]; if(hUser.access_level >= FCS.FCLEVEL_PREMIUM
 && ( ! g_UA.IE || g_UA.IE >= 10 ) && sMsg.substr(0,9) == '*sarcasm*' ) { sExtraClass_Chat += 'sarcasm '; sMsg = sMsg.substr(10); } if(hUser['access_level'] >= FCS.FCLEVEL_PREMIUM && sMsg.substr(0,9) == '{*emote*}' ) { bEmote = true; sMsg = sMsg.substr(10,1024); } if(sType == 'system' && sMsg && sMsg.match(/(has tipped \w+ \d+ tokens: '.{170})/) ) { sMsg = sMsg.replace(/has tipped \w+ \d+ tokens: .*/, RegExp.$1 ) + "...'"; } if(nUserId != 0 && sMsg && sMsg.match(/(http[s]?:[^\s"']+)/) ) { var sUrl = RegExp.$1; sUrl.match(/http[s]?:\/\/([^\/]+)/); if(hUser['access_level'] >= FCS.FCLEVEL_PREMIUM ) { sMsg = sMsg.replace(/http[s]?:[^\s"']+/,"<a rel=\"noopener noreferrer\" target=_blank href=\"" + sUrl.replace(/"/g,'') + "\" ><span style=\"font-weight:bold;font-size:10px;\">" + sUrl + "</span></a>"); } else { sMsg = sMsg.replace(/http[s]?:[^\s]{0,}/,""); } } sMsg = ParseEmoteOutput.prototype.Parse(sMsg, { allow_user_images: g_hSelf['allow_user_images'], access_level: hUser['access_level'], offline: hOptions['offline'], onload_code: "if(typeof(ChatBox) != 'undefined' && ChatBox.SmoothScroll && ! this.doOnce ) { this.doOnce=1; ChatBox.SmoothScroll('img_onload'); } ", onclick_code: "t.EnlargeImage.open(( g_oDhtmlPopup != undefined ? g_oDhtmlPopup : null ),'%image%','%shortcut%')" } ); var sMode = ''; if(hOptions['mode'] ) { sMode = hOptions['mode'] + "_";
 } var sSelf_Or_Other = ''; if(IsBroadcastState(hUser['state']) ) { sSelf_Or_Other = 'model'; } else if(nUserId == g_hSelf['user_id'] ) { sSelf_Or_Other = 'self'; } else { sSelf_Or_Other = 'other'; } if(hOptions['extra_class'] ) { sExtraClass_Name += hOptions['extra_class'] + '_name '; sExtraClass_Chat += hOptions['extra_class'] + '_chat '; } var sType = ""; if ( hOptions['promo'] ) sType = "promo"; else if ( hOptions['chat_style'] ) sType = hOptions['chat_style']; else if ( hUser['access_level'] == '5' ) sType = "admin"; else if ( hUser['access_level'] == '4' ) sType = "model"; else if ( hUser['access_level'] == '2' ) sType = "premium"; else if ( hUser['access_level'] == '1' ) sType = "registered"; else if ( hUser['access_level'] == '-1' ) sType = "system"; else if ( hUser['sessionid'] > 0 ) sType = "guest"; else if ( hUser['user_id'] == 0 ) sType = "system"; else sType = "system"; var sOfflineMsg = ''; var sH = ''; var sDate = ''; if(hOptions['date'] || hOptions['mode'] == 'private' ) { if(! hOptions['date'] ) { if(! hOptions['local_timestamp'] ) { hOptions['local_timestamp'] = new Date().getTime(); }
 var oDate = new Date(hOptions['local_timestamp']); hOptions['date'] = ( oDate.getHours() > 12 ? oDate.getHours() - 12 : oDate.getHours() || 12 ) + ":" + MfcStringUtilities.char_padding(oDate.getMinutes(), 2, 0 ) + " " + ( oDate.getHours() > 11 ? 'PM' : 'AM' ); } sDate = "<span class=chat_date style=\"width:70px;white-space:nowrap;padding:0px 10px 0px 20px;font-size:10px;color:#33aa33;display:" + ( g_hSelf.show_pm_timestamp || hOptions.show_pm_timestamp ? 'inline' : 'none' ) + ";"; if (! g_UA.IE ) sDate += "padding-left:0px;"; sDate += "\">[" + hOptions['date'] + "]</span>"; } if(hUser['access_level'] > 0 ) sContainerClass += "user" + nUserId + " "; if(hOptions && hOptions['mode'] && hOptions['mode'] == 'private' ) { sExtraClass_Name += " pmname "; sExtraClass_Chat += " pmchat "; } else if(hOptions['offline'] ) { var then = new Date(hOptions['offline_date'] * 1000); var hours = then.getHours(); var min = then.getMinutes(); if (hours < 10) hours = "0" + hours; if (min < 10) min = "0" + min; sOfflineMsg = " <font style='font-size:10px;'>[" + (then.getMonth()+1) + "-" + then.getDate() + " " + hours + ":" + min + "]</font> "; sH = "<i>"; } if(! g_hSelf['chat_text_ignore'] ) { sExtraStyle = MfcCustomFonts.prototype.get_style(hUser ); } var ATag = ''; if(hOptions['mode'] != 'private' || bEmote ) { if(hOptions.user_menu_a_tag ) { ATag = hOptions.user_menu_a_tag; } else if(g_hSelf['access_level'] > 0 ) { ATag = "<a href=\"javascript:popUserMenu.open('" + nUserId + "',g_oDhtmlPopup,{ broadcaster_id: 0" + ( hOptions.broadcaster_id || 0 ) + " }); \" style=\"text-decoration:none;\">"; }
 else if(g_hSelf['access_level'] == FCS.FCLEVEL_GUEST ) { ATag = A("members_feature",{supress_decoration:true}); } } var sAvatar = ''; if(hUser.access_level ) { var sSrc, sStyle=''; if(hUser.broken_avatar || ! hUser.avatars ) { sSrc = popUserMenu.people_icon(nUserId ); sStyle = "opacity:0.5;height:12px;width:12px;"; } else { sSrc = AvatarUrl(nUserId,20); } sAvatar += "<a title=\"" + hUser.username + "'s avatar. You can enable or disable in-chat avatars under 'Options'.\"><img class=\"in_chat_avatar \" style=\"cursor:pointer;" + sStyle + "\" onClick=\" popUserMenu.open("+nUserId+");\" draggable=\"true\" ondragstart=\" t.nDragUserId="+nUserId+"; \" ondragend=\"\" sr"+"c='" + sSrc + "' class='tiny_avatar_border' height=16 width=16 onError=\" this.src = '" + t.g_hPlatform.image_url_cdn + "files/images/icons/people/small_woman_1.png'; if(t.g_hUsers[" + nUserId + "] ) { t.g_hUsers[" + nUserId + "]['broken_avatar'] = 1; } \" ></a>"; } var sClubEmojis = ''; var hModel; if(hUser.share_badges && hUser.share_badges[ hOptions['room_owner_id'] ] && ( hModel = g_hUsers[ hOptions['room_owner_id'] ] ) ) { var aOrder=[]; for(var nBadgeId in hUser.share_badges[ hOptions['room_owner_id'] ] )
 { var hClub; if(hClub = hModel.emoji_clubs[ nBadgeId ] ) aOrder.push(MfcStringUtilities.char_padding(hClub.amt, 10, 0, 'left' ) + ":" + nBadgeId); } aOrder.sort(); var html=''; for(var a=0; a < aOrder.length; a++ ) { nBadgeId = aOrder[a].split(':')[1]; if(hModel.emoji_clubs[ nBadgeId ] ) { var shareUrl = "//share." + t.g_hPlatform.domain + "/m/" + hModel.emoji_clubs[ nBadgeId ]['slug']; var shareTitle = hUser.username + " is a member of " + PossessiveApostrophe(hModel.username) + " MFC Share Club: " + hModel.emoji_clubs[ nBadgeId ]['name'].replace(/"/g,''); html += "<span class=MfcChannelMembers_ShareBadges_emoji><a title=\"" + shareTitle + "\" target=_blank href=" + shareUrl + ">" + decodeURIComponent(hModel.emoji_clubs[ nBadgeId ]['emoji'] ) + "</a></span>"; } } sClubEmojis = "<span class=MfcChannelMembers_ShareBadges_container><span class=MfcChannelMembers_ShareBadges>" + html + "</span></span>"; } var sExtraMouseCode=''; if (hUser['access_level'] > 0 && hOptions['mode'] != 'private') sExtraMouseCode += "onMouseover=\"this.style.textDecoration = 'underline';\" onMouseout=\"this.style.textDecoration = 'none';\" "; if (sType == 'system' && typeof(hOptions['_tip_sesstype']) === 'number') { if(hOptions['_tip_sesstype'] == FCS.EVSESSION_SPECIAL) { if(hOptions['style'] ) sExtraStyle += hOptions['style']; else sExtraClass_Chat += 'chat_tip special '; } else if(hOptions['_tip_sesstype'] == FCS.EVSESSION_TIP) { sExtraClass_Chat += 'chat_tip '; } sMsg.replace(/Registered/,A('register') + "Registered</a>"); var hModel; if(( hModel = g_hUsers[ hOptions.broadcaster_id ] ) && hOptions.user
 && hOptions.user.user_id == g_hSelf.user_id && ! hModel.friend && ! hModel.bookmarked && ! FormatChat.hShow_BF_links_once[ hOptions.broadcaster_id ] ) { sMsg += "<a href=# onClick=\" return InChat_AddFriendOrBookmark(this," + hOptions.broadcaster_id + ",'friend'); \" class=\"inchat_add_bookmark_or_friend\" title=\"Add a remove friend\">+ Friend</a>"; sMsg += "<a href=# onClick=\" return InChat_AddFriendOrBookmark(this," + hOptions.broadcaster_id + ",'bookmarked'); \" class=\"inchat_add_bookmark_or_friend\" title=\"Add or remove bookmark\">+ Bookmark</a>"; FormatChat.hShow_BF_links_once[ hOptions.broadcaster_id ] = true; } } if(TopHighlightChat.hUsers[ nUserId ] ) sExtraContainerStyle += 'background-color:' + ( NightMode_Top.enabled ? '#000066' : TopHighlightChat.hUsers[ nUserId ] ) + ';'; else if(hOptions.type=='player' && g_hSelf.highlight_friends_chat && hUser.friend ) sExtraContainerStyle += NightMode_Top.enabled ? 'background-color:#000066;' : 'background-color:#FFFF99;'; else if(hOptions.mode == 'private' && nUserId == g_hSelf.user_id ) sExtraContainerStyle += ( NightMode_Top.enabled ? 'background-color:#111111;' : 'background-color:#FBFBFB;' ) + 'border-radius:4px;'; var sContainer=''; { sContainer = ` onMouseEnter=" if(window.HighlightChatUsers ) { HighlightChatUsers.mouseover(true,${nUserId}); } " onMouseLeave=" if(window.HighlightChatUsers ) { HighlightChatUsers.mouseover(false,${nUserId}); } " `; } if(hOptions['welcome'] && typeof(sMsg) == 'string' ) { var sTopic = ConditionString(sMsg,{ link_affiliated_sites: true, remove_html: true, break_long_strings: true } ); sH += " <div class=user_style style=\" " + MfcCustomFonts.prototype.get_style(g_hUsers[ hOptions['room_owner_id'] ] ) + " padding: 5px 5px 5px 0px; font-size:17px; overflow-wrap: break-word; \"> Room Topic: " + ProcessDynamicTopic(g_hUsers[ hOptions['room_owner_id'] ], sTopic ) + "\
 </div> <br> "; } else if(hOptions['notice'] == 1 ) { sH += "<div style='text-decoration:none;font-size:13px;font-weight:bold;color:#FF0000;'>* " + sMsg + "</div>"; } else if(bEmote ) { sH += "<div class='inline_emote chat_" + sType + "'>* " + ATag + "<span class='username' " + sExtraMouseCode + " >" + hUser['username'] + sOfflineMsg + "</span></a> " + sMsg+"</div>"; } else { var sPrefix = ''; var sUsername = hUser['username']; if(hOptions.inline_pm ) { if(nUserId == g_hSelf.user_id ) { sContainerClass += 'chat_pm_send '; sPrefix = 'PM to '; sUsername = hOptions.username; } else { sContainerClass += 'chat_pm_receive '; sPrefix = 'PM from '; } } var sName = ''; if(hUser.username != 'FCServer' && sUsername ) { sName = ATag + "<span class='user_style chat_size " + sMode + "name_" + sType + " " + sMode + "name_" + sSelf_Or_Other + " " + sExtraClass_Name + "' " + sExtraMouseCode + " style='text-decoration:none;" + sExtraStyle + "' " + ">" + sPrefix + sUsername + sOfflineMsg + "</span></a>"; sName += sClubEmojis + ':'; } var stamp = new Date().getTime();
 var nAttributeUserId = hOptions.user && hOptions.user.user_id ? hOptions.user.user_id : nUserId; sH += "<div class='chat_container chat_size " + sContainerClass + "' title=\"" + ( hUser.username || '' ) + "\"" + " data-stamp=\"" + stamp + "\" data-user_id=\"" + nAttributeUserId + "\" data-session_id=\"" + ( hUser.sessionid || 0 ) + "\" " + sContainer + ( sExtraContainerStyle ? ( ' style="' + sExtraContainerStyle + '" ' ) : '' ) + ">" + sDate + sAvatar + "<span class='username username_container'>" + sName + "</span>" + "<span class=' user_style chat_size \n " + sMode + "chat \n " + sMode + "chat_"+sType + "\n " + sMode + "chat_"+sSelf_Or_Other + "\n " + sExtraClass_Chat + "\n ' style='" + sExtraStyle + "'> " + sMsg + " </span></div>"; } if (hOptions['offline'] || hOptions['oldmsg']) sH += "</i>"; if(sH.match(/Guest\d\d\d\d\d/) && ( sH.match(/has tipped/) || sH.match(/is online/) ) ) { g_oReportBack = new MfcReportBack('GuestMessage'); g_oReportBack.Send(sH + "\t" + JSON.stringify(arguments) ); } return sH;}FormatChat.hShow_BF_links_once = {};function InChat_AddFriendOrBookmark(caller, nUserId, sMode ){ var hUser; if(! ( hUser = g_hUsers[ nUserId ] ) ) { return; } if(sMode == 'bookmarked' ) { if(hUser.bookmarked ) t.Bookmarks.Delete(hUser.user_id ); else t.Bookmarks.Add(hUser.user_id ); } else { t.TxAddRemove('friend', hUser.user_id, hUser.friend ? 'remove' : 'add' ); }
 caller.innerHTML = ( hUser[sMode] ? '-' : '+' ) + ' ' + ( sMode == 'friend' ? 'Friend' : 'Bookmark' ); caller.style.color = ( hUser[sMode] ? 'rgba(0,0,255,0.4)' : '' ); if(hUser[sMode] ) { caller.innerHTML = '- ' + ( sMode == 'friend' ? 'Friend' : 'Bookmark' ); caller.style.color = 'rgba(0,0,255,0.4)'; g_oReportBack = new MfcReportBack('InChat_AddFriendOrBookmark'); g_oReportBack.Send(JSON.stringify({ model: hUser.username, mode: sMode }) ); } else { caller.innerHTML = '+ ' + ( sMode == 'friend' ? 'Friend' : 'Bookmark' ); caller.style.color = ''; }}var LoadVideo = setTimeout;events.onRx(FCS.FCTYPE_DETAILS,function(fcMsg) { FcDetails(fcMsg); });function FcDetails(fcMsg ){ if(g_nSessionId != fcMsg.to ) { return; } if (fcMsg.from == FCS.FCTYPE_TOKENINC && fcMsg.obj && IsTokenSession(fcMsg.obj.type ) ) { var bActiveTokenSession = false; if(t.g_hoPlayerWindows[ fcMsg.obj.model ] && IsTokenSession(t.g_hoPlayerWindows[ fcMsg.obj.model ].presentation_state ) ) { bActiveTokenSession = true; } if(t.g_hoPMWindows[ fcMsg.obj.model ] && IsTokenSession(t.g_hoPMWindows[ fcMsg.obj.model ].presentation_state ) ) { bActiveTokenSession = true; }
 if(! bActiveTokenSession && 0 ) { g_oReportBack = new MfcReportBack('FcDetails TokenSess Error'); g_oReportBack.Send('not active on client' , decodeURIComponent(fcMsg.data ) ); var nModelIdentifier; if(g_hUsers[fcMsg.obj.model] && g_hUsers[fcMsg.obj.model].sessionid ) nModelIdentifier = g_hUsers[fcMsg.obj.model].sessionid; else nModelIdentifier = fcMsg.obj.model; TxCmd(FCS.FCTYPE_ENDSESSION, g_nSessionId, 0, nModelIdentifier, 0, null ); } } g_hSelf['tokens'] = ( fcMsg.arg1 > 2147483647 ) ? ( ( 4294967297 - fcMsg.arg1 ) * -1 ) : fcMsg.arg1; g_hSelf['rewards_points'] = ( fcMsg.arg2 > 2147483647 ) ? ( ( 4294967296 - fcMsg.arg2 ) * -1 ) : fcMsg.arg2; FcTokenInc({ arg1: g_hSelf['tokens'] }); g_bFCTYPE_DETAILS_Received = true; LoginTimer.checkPoint('g_bFCTYPE_DETAILS_Received'); if(g_bFCTYPE_MODELGROUP_Received && ! g_bLoginDone ) { g_bLoginDone = true; PostLoginProcedures(); }}function LoadChat(){ if ( g_bLoadChat == 1 ) { for(var a = 0; a < 2; a++) { LoadVideo("LoadChat()", 20000 * Rate()); } if ( ! g_bLoadChat ) g_bLoadChat = 1; }}function StartVoyeur(nModelId, nPrvSessId)
{ for (var nWindowId in g_hoPlayerWindows) { if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { if(oPlayerWindow.Lounge && oPlayerWindow.Lounge.nModelId == nModelId ) { oPlayerWindow.FcStartVoyeur(nPrvSessId ); } } } var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nModelId) ) { oPMWindow.FcStartVoyeur(nPrvSessId ); } var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nModelId ) ) { oPlayerWindow.FcStartVoyeur(nPrvSessId ); }}events.onRx(FCS.FCTYPE_SESSIONSTATE,function(fcMsg) { FcSessionState(fcMsg); });function FcSessionState(fcMsg ){ var nState = fcMsg.arg1; var nUserId = fcMsg.arg2; var hUser; if ( ! ( hUser = g_hUsers[ nUserId ] ) ) { return; } if(g_hUsers[nUserId].state < FCS.FCVIDEO_RX_IDLE && g_hUsers[nUserId].previous_state >= FCS.FCVIDEO_RX_IDLE ) { g_hUsers[nUserId].broadcast_start_time = new Date().getTime(); } if(FcSessionState.bModelsLoaded == false ) { FcSessionState.nLoadingCount++; var nNow = Math.floor(new Date().getTime() / 1000); if(nNow > FcSessionState.nLastModelProgress ) { for ( var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) oPlayerWindow.ModelMenuBar.Message.Set(); } FcSessionState.nLastModelProgress = nNow; } } var bColdStart = false; if(hUser['access_level'] == FCS.FCLEVEL_MODEL && ( ( g_nBroadcasterCount == 0 && nState < 90 ) || ( g_nBroadcasterCount == 1 && nState >= 90 ) ) ) { bColdStart = true; UpdateModelCount(); } if(! FcSessionState.bRefreshModelList_TimerLock || bColdStart ) { for ( var nWindowId in g_hoPlayerWindows )
 { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { if(oPlayerWindow.OnlineBroadcasterList ) { oPlayerWindow.OnlineBroadcasterList.Refresh(bColdStart ? 'force' : '' ); } } } UpdateModelCount(); FcSessionState.bRefreshModelList_TimerLock = true; setTimeout(function() { FcSessionState.bRefreshModelList_TimerLock = false; }, 5000 ); } if(g_bLoginDone && hUser['state'] == FCS.FCVIDEO_TX_AWAY && hUser['truepvt'] ) { hUser['truepvt'] = 0; } if(typeof(hUser ) == 'object' && hUser.friend && hUser.access_level == FCS.FCLEVEL_MODEL && FcSessionState.hNotificationDuplicateFilter[ hUser.user_id ] != hUser['state'] ) { var bNotificationHistory = false; var sSound = ''; if ( hUser['state'] == FCS.FCVIDEO_TX_GRP ) { if ( g_hSelf['sound_model_friend_private'] == 1 ) { sSound = 'sound_model_friend_private'; } bNotificationHistory = true; NotificationHistory("<span class=\"top_notification group\"><a href=\"javascript:popUserMenu.open("+nUserId+",g_oDhtmlPopup);\"><b>" + hUser['username'] + "</b></a> is in a Group Show.</span>","bw.group_door.16x16.png",sSound); } else if ( hUser['state'] == FCS.FCVIDEO_TX_CLUB ) { if ( g_hSelf['sound_model_friend_private'] == 1 ) { sSound = 'sound_model_friend_private'; } bNotificationHistory = true; NotificationHistory("<span class=\"top_notification club\"><a href=\"javascript:popUserMenu.open("+nUserId+",g_oDhtmlPopup);\"><b>" + hUser['username'] + "</b></a> is in a Club Show.</span>","bw.club_door.16x16.png",sSound); } else if ( hUser['state'] == FCS.FCVIDEO_TX_PVT )
 { if ( g_hSelf['sound_model_friend_private'] == 1 ) { sSound = 'sound_model_friend_private'; } bNotificationHistory = true; NotificationHistory("<span class=\"top_notification private\"><a href=\"javascript:popUserMenu.open(" + hUser.user_id + ",g_oDhtmlPopup); \"><b>" + hUser['username'] + "</b></a> is in " + ( hUser.truepvt ? "a TruePrivate." : "Private Chat." ) + "</span>", ( hUser.truepvt ? "bw.locked_door.16x16.png" : "bw.closed_door.16x16.png" ), sSound ); } else if ( hUser['state'] == 0 && hUser['previous_state'] != 0 ) { bNotificationHistory = true; NotificationHistory("<span class=\"top_notification public\"><a class=\"menu_notification\" href=\"javascript:popUserMenu.open("+nUserId+",g_oDhtmlPopup);\">" + hUser['username'] + "</a> is in Public Chat.</span>","bw.open_door.16x16.png"); } if(bNotificationHistory ) { FcSessionState.hNotificationDuplicateFilter[ hUser.user_id ] = hUser['state']; } if(sSound ) { Sound(sSound); } } var oPMWindow; if(g_hoPMWindows[nUserId] && ( oPMWindow = WindowHandle.Get('pm',nUserId) ) ) { if(hUser.access_level == FCS.FCLEVEL_MODEL && ( hUser.state == FCS.FCVIDEO_TX_IDLE || hUser.state == FCS.FCVIDEO_TX_AWAY ) ) { g_hoPMWindows[nUserId].presentation_state = FCS.EVSESSION_NONE; } oPMWindow.RefreshSessionState(); } var oPlayerWindow; if(g_hoPlayerWindows[ nUserId ] && ( oPlayerWindow = WindowHandle.Get('player', nUserId ) ) ) { if(hUser.access_level == FCS.FCLEVEL_MODEL && ( hUser.state == FCS.FCVIDEO_TX_IDLE || hUser.state == FCS.FCVIDEO_TX_AWAY ) ) { g_hoPlayerWindows[nUserId].presentation_state = FCS.EVSESSION_NONE; } oPlayerWindow.RefreshSessionState(); oPlayerWindow.WhiteboardNotice({ mode: 'update' }); oPlayerWindow.ModelMenuBar.Refresh(); } for(var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { if(! g_hLoungeIds[ oPlayerWindow.g_nBroadcasterId ] || oPlayerWindow.Lounge.nModelId != nUserId ) { continue; } oPlayerWindow.RefreshSessionState();
 } } if(hUser['access_level'] == FCS.FCLEVEL_MODEL ) { RoomTopicHandler(null, nUserId ); if(typeof(FcSessionState.oRateLimit) != 'undefined' ) clearTimeout(FcSessionState.oRateLimit ); FcSessionState.oRateLimit = setTimeou}, 1000 ); if (hUser['state'] == FCS.FCVIDEO_TX_IDLE && hUser['previous_state'] != FCS.FCVIDEO_TX_IDLE && OnlineModelSoundNotification.qualifySound(hUser)) { OnlineModelSoundNotification.playSound(hUser); } } if(window.mfcBroadcasterDisplay && mfcBroadcasterDisplay.updateLabel ) { mfcBroadcasterDisplay.updateLabel(hUser ); } if(hUser.state != hUser.previous_state && mfcBroadcasterDisplay && mfcBroadcasterDisplay.hOptions && mfcBroadcasterDisplay.hOptions.oAnimatedLiveSnaps && mfcBroadcasterDisplay.hOptions.oAnimatedLiveSnaps.updateByUserId ) { var now = new Date().getTime(); if(( now - t.g_nInstanceTime ) > 5000 ) { var oAnimatedLiveSnaps = mfcBroadcasterDisplay.hOptions.oAnimatedLiveSnaps; var time = 500; if(hUser.previous_state == FCS.FCVIDEO_TX_AWAY || hUser.previous_state >= 90 ) { time = 12000; } setTimeou},time); }
 }}FcSessionState.hNotificationDuplicateFilter = {};FcSessionState.ModelReset };FcSessionState.ModelReset();function FcSessionState_RateLimited(fcMsg ){ var nState = fcMsg.arg1; var nUserId = fcMsg.arg2; for(var nWindowId in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) { if(oPlayerWindow.Lounge.nModelId == nUserId ) { oPlayerWindow.RefreshMessageBar(); } } }}events.onRx(FCS.FCTYPE_ENDSESSION,function(fcMsg) { FcEndSessions(fcMsg ); });function FcEndSessions(fcMsg ){ var nModelId = fcMsg.arg1; var nSessionType = fcMsg.arg2;
 if ( g_hoPlayerWindows[nModelId] && g_hoPlayerWindows[nModelId]['window'] ) { g_hoPlayerWindows[nModelId].presentation_state = FCS.EVSESSION_NONE; g_hoPlayerWindows[nModelId]['private_session_id'] = 0; } if (g_hoPMWindows[nModelId] && g_hoPMWindows[nModelId]['window'] ) { g_hoPMWindows[nModelId].presentation_state = FCS.EVSESSION_NONE; g_hoPMWindows[nModelId]['private_session_id'] = 0; } var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', nModelId ) ) { oPlayerWindow.FcEndSession(nModelId, nSessionType ); } var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',nModelId) ) { oPMWindow.FcEndSession(nModelId, nSessionType ); } var EndLoungeTokenSession = function(nWindowId ) { if(( oPlayerWindow = WindowHandle.Get('player', nWindowId ) ) && oPlayerWindow.Lounge.nModelId && oPlayerWindow.Lounge.nModelId == nModelId )
 { g_hoPlayerWindows[nWindowId].presentation_state = FCS.EVSESSION_NONE; oPlayerWindow.FcEndSession(nModelId, nSessionType ); oPlayerWindow.RefreshMessageBar({ force: 1 }); } }; for(var nWindowId in g_hoPlayerWindows ) { EndLoungeTokenSession(nWindowId ); } for(var nChannelId in UCR.hRooms ) { EndLoungeTokenSession(GetRoomOwnerId(nChannelId ) ); }}var TogglePersonalMenu = { nDisplay: 1, bDone: 0, nGrowShrinkProgress: 0, oDiv: null, nTimeout: 0, nWidth: 188, bUserSpecified: false, bFinished: false, bFirstRun: true};TogglePersonalMenu.Init = function(){ var els = document.getElementsByClassName('reveal_menu_hover'); for(var a=0; a < els.length; a++ ) { els[a].addEventListener('mouseenter',function(){ TogglePersonalMenu.RevealMenuHover(1); }); els[a].addEventListener('mouseleave}); }};TogglePersonalMenu.Execute = function(hOptions){ hOptions = hOptions || {}; if(g_nAgeCheckRequired ) { hOptions.display = false; } clearTimeout(TogglePersonalMenu.nTimeout ); MenuRevealBlinker.Stop(); if(! hOptions.render_only ) { TogglePersonalMenu.bUserSpecified = true; } if(typeof(hOptions.display ) != 'undefined' ) { TogglePersonalMenu.nDisplay = hOptions.display ? 1 : 0; } else if(TogglePersonalMenu.bFirstRun && g_bChatOverlayMode ) { TogglePersonalMenu.nDisplay = 0;
 } else { TogglePersonalMenu.nDisplay = g_hSelf['show_main_menu'] ? 1 : 0; } if(typeof(hOptions.display ) != 'undefined' && ! hOptions['render_only'] ) { UserExtensions.Write('show_main_menu', TogglePersonalMenu.nDisplay ); } LoadMenu(); LoadPersonalMenu('reset'); TogglePersonalMenu.bFinished = false; TogglePersonalMenu.sDisplay = TogglePersonalMenu.nDisplay ? 'block' : 'none'; if(! hOptions.no_animation ) { TogglePersonalMenu.nWidth = ( g_hSelf.single_page_website || g_UA.tablet || g_UA.mobile ) ? 170 : 188; } else { GetEl('friends').style.display = TogglePersonalMenu.sDisplay; TogglePersonalMenu.Finish(); } if(window.player && player.RefreshMessageBar ) { player.RefreshMessageBar(); } var b = GetEl('outer_body'); if ( TogglePersonalMenu.nDisplay == 1 ) { b.classList.add('personal_menu_active'); } else { b.classList.remove('personal_menu_active'); }; TogglePersonalMenu.RevealMenuHover_Cloak(TogglePersonalMenu.nDisplay ); setTimeout(ResizeHandler, 320 ); TogglePersonalMenu.bFirstRun = false; var els = document.getElementsByClassName('window_button_preview_container'); for(var a=0; a < els.length; a++ ) { els[a].remove(); }
 var friends_table = GetEl('friends_table'); if(friends_table ) { friends_table.style.overflow = TogglePersonalMenu.nDisplay ? 'visible' : 'hidden'; }};TogglePersonalMenu.Finish = function(){ TogglePersonalMenu.bFinished = true; if(window.player && player.OnResizeHandler ) player.OnResizeHandler();};TogglePersonalMenu.RevealMenuHover = function(bState){ if(bState ) TogglePersonalMenu.RevealMenuHover_timer = setTimeout(TogglePersonalMenu.RevealMenuHover_Execute,400); else clearTimeout(TogglePersonalMenu.RevealMenuHover_timer );}; TogglePersonalMenu.RevealMenuHover_Execute = function(bState){ TogglePersonalMenu.Execute({ display: true, render_only: 1 }); var friends_table = GetEl('friends_table'); if(friends_table ) { friends_table.addEventListener('mouseleave', TogglePersonalMenu.RevealMenuHover_Close, { once: true }); } TogglePersonalMenu.RevealMenuHover_Cloak(1);};TogglePersonalMenu.RevealMenuHover_Cloak = function(bActive){ var els = document.getElementsByClassName('reveal_menu_hover'); for(var a=0; a < els.length; a++ ) { els[a].style.display = bActive ? 'none' : 'block'; }};TogglePersonalMenu.RevealMenuHover_Close = function(){ TogglePersonalMenu.Execute({ display: false });};function ChatStreamImage_FlagBad(hOptions ){ hOptions = hOptions || {}; if(! hOptions.filename && ! hOptions.shortcut ) { return; } if(! ChatStreamImage_FlagBad.oReq ) ChatStreamImage_FlagBad.oReq = createRequestObject(); ChatStreamImage_FlagBad.oReq.open("get","../php/ParseChatStream.php?flag_bad=1&user_id=" + g_hSelf['user_id'] + "&shortcut=" + hOptions.shortcut + "&filename=" + hOptions.filename
 + "&" + Math.random()); ChatStreamImage_FlagBad.oReq.onreadystatechange = function() { if(ChatStreamImage_FlagBad.oReq.readyState != 4 ) return; }; ChatStreamImage_FlagBad.oReq.send(null);}function ChatStreamImage(nHostUserId,sCallingWindowType,sMessage){ try { g_oChatStreamImage_Req.open("get","../php/chat_stream_image.php?host_user_id=" + nHostUserId + "&calling_window_type=" + sCallingWindowType + "&message=" + encodeURIComponent(sMessage) + "&user_id=" + g_hSelf['user_id']); g_oChatStreamImage_Req.onreadystatechange = ChatStreamImage_Response; g_oChatStreamImage_Req.send(null); } catch (oError) { Log('ChatStreamImage() ajax open caught exception: ' + oError.description ); }}function ChatStreamImage_Response(){ if (g_oChatStreamImage_Req.readyState != 4 ) return; var sResponse = g_oChatStreamImage_Req.responseText; aResponseFields = sResponse.split('\t'); var hResponseFields = { response_code: aResponseFields[0], host_user_id: aResponseFields[1], calling_window_type: aResponseFields[2], message: aResponseFields[3], original_message: aResponseFields[4] || '' }; if (sResponse.match(/ERROR/i)) { if (hResponseFields['calling_window_type'] == 'player') { g_hoPlayerWindows[ hResponseFields['host_user_id'] ]['window'].ChatQueue.Format_Append(hResponseFields['message'], 0 ); hResponseFields['original_message'] = URLEncoding.encode(hResponseFields['original_message'], 'cmesg' ); TxCmd(FCS.FCTYPE_CMESG, t.g_nSessionId, t.g_hoPlayerWindows[ hResponseFields['host_user_id'] ]['room_channel'] , 0, 0, hResponseFields['original_message']); } else if (hResponseFields['calling_window_type'] == 'pm') { TxPrivateMessage(hResponseFields['host_user_id'],hResponseFields['original_message']); try { g_hoPMWindows[ hResponseFields['host_user_id'] ]['window'].Receive({ msg: hResponseFields['message'], msguid: g_hSelf['user_id'] });
 } catch(oError) { } } } else if ( ! sResponse.match(/OK/)) { g_hoPlayerWindows[ nPlayerOwnerId ]['window'].ChatQueue.Format_Append("There was an error. Please contact support.\n\n", 0 ); } else { if (hResponseFields['calling_window_type'] == 'player') { hResponseFields['message'] = URLEncoding.encode(hResponseFields['message'], 'cmesg' ); TxCmd(FCS.FCTYPE_CMESG, t.g_nSessionId, t.g_hoPlayerWindows[ hResponseFields['host_user_id'] ]['room_channel'] , 0, 0, hResponseFields['message']); } else if (hResponseFields['calling_window_type'] == 'pm') { TxPrivateMessage(hResponseFields['host_user_id'], hResponseFields['message']); try { g_hoPMWindows[ hResponseFields['host_user_id'] ]['window'].Receive({ msg: hResponseFields['message'], msguid: g_hSelf['user_id'] }); } catch(oError) { alert("PM Window Image Error: " + oError.description); } } } return;}function ChatStreamImageSubmit(oCaller,sURL){ var sURL = sURL || oCaller.GetEl('chat_stream_image_url').value; sURL = sURL.replace(/^\s+/,''); sURL = sURL.replace(/\s+$/,''); if (! sURL.match(/https?:[\S]+.(jpeg|jpg|gif|png)/i)) { alert("No valid image URL found."); return; } oCaller.Send(sURL); var el = oCaller.GetEl('chat_stream_image_popup'); if(el ) { el.style.display='none'; } return false;}
var g_nClientInfo_Retries = 0;var ClientInfo = { oRequest: createRequestObject(), sTZ: 0, nUID: 0, sSystemInfo: 0, sSystemFonts: 0};ClientInfo.ClientConnect = function(hOptions ){ hOptions = hOptions || {}; var sData = "r=" + Math.round(Math.random() * 1000000) + "&mode=client_connect" + "&conn_mode=" + hOptions.conn_mode + "&chat_server=" + hOptions.server //SelectChatServer.sHost
 + "&loc_host=" + window.location.host + "&src=www"; ClientInfo.oRequest.open("POST",'../php/client_info.php'); ClientInfo.oRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); ClientInfo.oRequest.onreadystatechange = ClientInfo.Response; ClientInfo.oRequest.send(sData );};ClientInfo.GetSupplementalData = function(){ var sData = "r=" + Math.round(Math.random() * 1000000) + "&mode=supplemental_data"; ClientInfo.oRequest.open("POST",'../php/client_info.php'); ClientInfo.oRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); ClientInfo.oRequest.onreadystatechange = ClientInfo.Response; ClientInfo.oRequest.send(sData );};ClientInfo.Submit = function(){ if(ClientInfo.oRequest == null ) ClientInfo.oRequest = createRequestObject(); var mfcClientInfo = new MfcClientInfo(); var aSystemInfo; var hSystemInfo = {}; var sSelectiveSystemInfo = ''; var sCrcSystemInfo; var sCrcSystemFonts; var sCrcSystemFontsSorted; var sSystemFontsSorted; var sDPITest;
 var oTime = new Date(); ClientInfo.oTZ = -oTime.getTimezoneOffset() / 60; if(typeof(Storage) !== 'undefined' ) { ClientInfo.nUID = mfcClientInfo.GetClientUID(); } if(1 ) { var aFonts = mfcClientInfo.FontTest() || []; sDPITest = mfcClientInfo.GetDPI('entropic'); sCrcSystemFonts = MfcCrc32.prototype.string(aFonts.join('') ); sCrcSystemInfo = MfcCrc32.prototype.string(sDPITest ); } try { GetEl('login_uid').value = ClientInfo.nUID; } catch(e) { } var hardwareConcurrency; try { hardwareConcurrency = window.navigator.hardwareConcurrency; } catch(e) { } var sData = "r=" + Math.round(Math.random() * 1000000) + "&record_unique=1" + "&baf=" + ( g_hQS['baf'] || '' ) + "&uid=" + ClientInfo.nUID + "&tz=" + ClientInfo.oTZ + "&dpi_test=" + sDPITest + "&username=" + ( g_hCk['username'] || '' ) + "&passcode=" + ( g_hCk['passcode'] || '' ) + "&co=" + oTime.getTime() + "&sz=" + (screen.width + 'x' + screen.height) + "&session_id=" + g_nSessionId + "&hardwareConcurrency=" + ( hardwareConcurrency || '' ) + "&sCrcSystemInfo=" + ( encodeURIComponent(sCrcSystemInfo) || '' ) + "&sCrcSystemFonts=" + ( encodeURIComponent(sCrcSystemFonts) || '' ) + "&sCrcSystemFontsSorted=" + ( encodeURIComponent(sCrcSystemFontsSorted) || '' ) + "&chat_server=" + encodeURIComponent(SelectChatServer.sHost) + "&conn_mode=" + g_sConnectionMode + "&loc_host=" + window.location.host + "&flashver=" + encodeURIComponent(GetSwfVer()); try {
 ClientInfo.oRequest.open("POST",'../php/client_info.php'); ClientInfo.oRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); ClientInfo.oRequest.onreadystatechange = ClientInfo.Response; ClientInfo.oRequest.send(sData ); } catch (oError) { g_oReportBack = new MfcReportBack('ClientInfo'); g_oReportBack.Send('Submit' , oError.description ); }};ClientInfo.Response = function(){ if(ClientInfo.oRequest.readyState != 4) return; var aJSON = ParseJSON(ClientInfo.oRequest.responseText ) || []; for(a=0; a < aJSON.length; a++ ) { var hJSON = aJSON[a]; if(hJSON == null ) { continue; } if(hJSON.token ) { g_hSelf.token = hJSON.token; } else if(hJSON.quickbuy_availability ) { g_hSelf.quickbuy_availability = hJSON.quickbuy_availability; } else if ( hJSON.custom_alerts ) { CustomAlerts.customAlertSummary = hJSON.custom_alerts; CustomAlerts.initialize(); } else if ( hJSON.user_notepad ) { var aUserNotepad = hJSON.user_notepad.split(','); for(var nK=0; nK < aUserNotepad.length; nK++ ) { toggleNotesFlag(aUserNotepad[nK], 1); } FriendsList.Load({ force: true }); } else if ( ! hJSON.user_notepad && ! g_hSelf.deleted_demo_note ) { toggleNotesFlag(g_hSelf.user_id, 1);
 FriendsList.Load({ force: true }); } if(hJSON.load_chat ) { g_bLoadChat = 1; LoadChat(); } } events.emit('ClientInfo.Response'); return;};var VideoCycler = {};VideoCycler.hModes = { 'all_available': { short: ('All Public ' + t.g_hPlatform.Performer + 's'), long: ( 'All Public ' + t.g_hPlatform.Performer + 's, by your ' + t.g_hPlatform.performer + ' list' ) }, 'most_popular': { short: 'Most Popular Room', long: 'Follow the Most Popular Room' }, 'popular5': { short: 'Popular 5', long: 'Top 5 Popular Rooms' }, 'popular25': { short: 'Popular 25', long: 'Top 25 Popular Rooms' }, 'popular100': { short: 'Popular 100', long: 'Top 100 Popular Rooms' }, 'trending': { short: 'Most Trending', long: 'Follow the Top Trending Room' }, 'new': { short: ( 'New ' + t.g_hPlatform.Performer + 's' ), long: ( 'Only New ' + t.g_hPlatform.Performer + 's' ) }, 'friends': { short: 'Friends', long: 'Only Friends' }, 'bookmarked': { short: 'Bookmarks', long: ( 'Only Bookmarked ' + t.g_hPlatform.Performer + 's' ) }, 'friends_bookmarked': { short: 'Friends & Bookmark', long: 'Only Friends & Bookmarked' }, 'private': { short: 'In Private', long: ( t.g_hPlatform.Performer + 's in Private Sessions' ) }, 'group': { short: 'In Group Show', long: ( t.g_hPlatform.Performer + 's in Group Shows' ) }};for(var sC in g_hRegionConfig ){ if(sC == 'UN' ) { continue; } t.VideoCycler.hModes['models_in_'+sC] = { short: (g_hRegionConfig[sC].name ), long: ('Models in ' + g_hRegionConfig[sC].name ) };}
var CustomAlerts = { customAlertSummary: {}, currentlyOnline: {}, combinedXRef: {}, firstCallback: true};CustomAlerts.initialize = function(){ CustomAlerts.mfcCustomAlerts = new MfcCustomAlerts({ token: g_hSelf.token, get_onlineMatches_callback: CustomAlerts.get_onlineMatches_callback }); CustomAlerts.poll(); for(var nId in CustomAlerts.customAlertSummary ) { var name = CustomAlerts.customAlertSummary[nId].alert_name; VideoCycler.hModes['custom_alert_' + nId ] = { short: name, long: ( "Custom Selection - " + name ) }; }};CustomAlerts.poll = function(){ var wantsOnlineNotifications = false; for(var id in CustomAlerts.customAlertSummary ) { if(CustomAlerts.customAlertSummary[id].notification_option_bits & 4 ) // online notification
 wantsOnlineNotifications = true; } clearTimeout(CustomAlerts.poller ); if(g_hSelf.show_custom_alert_matches || CustomAlerts_SideMenu.bIsDisplayed ) { CustomAlerts.timerDuration = ( g_hSelf.model_list_refresh_seconds * 1000 ) || 30000; } else if(g_hSelf.custom_alert_sound_config ) { CustomAlerts.timerDuration = 180000; } else if(g_bLoginDone && wantsOnlineNotifications ) { CustomAlerts.timerDuration = 600000; } else {
 return; } CustomAlerts.get_onlineMatches(); CustomAlerts.poller = setTimeout(CustomAlerts.poll, CustomAlerts.timerDuration );};CustomAlerts.processAudibleAlerts = function(config ){ config = config || {}; if(! g_hSelf.custom_alert_sound_config ) { return; } CustomAlerts.soundConfig = JSON.parse(decodeURIComponent(g_hSelf.custom_alert_sound_config ) ); var hDiscovered={}; for(var caId in CustomAlerts.customAlerts ) { for(var a=0; a < CustomAlerts.customAlerts[ caId ].list.length; a++ ) { var nModelId = CustomAlerts.customAlerts[ caId ].list[a]; if(! CustomAlerts.currentlyOnline[ nModelId ] ) { if(! hDiscovered[ caId ] ) { hDiscovered[ caId ] = []; } hDiscovered[ caId ].push(nModelId ); CustomAlerts.currentlyOnline[ nModelId ] = 1; } } } if(config.mode == 'initialize' ) { return; } for(var caId in CustomAlerts.soundConfig ) { var aMatches = []; if(hDiscovered[ caId ] ) { for(var a = 0; a < hDiscovered[ caId ].length; a++ ) { var nUserId = hDiscovered[ caId ][ a ]; if(g_hUsers[ nUserId ] ) { aMatches.push(A('player',{ broadcaster_id: nUserId }) + "<span onMouseDown=\" popUserMenu.right_click_open(event,"+nUserId+",g_oDhtmlPopup); \">" + g_hUsers[ nUserId ].username + "</span></a>"); } }
 } if(aMatches.length == 0 ) { continue; } var sMore = ''; if(aMatches.length > 1 ) { var nExtra = aMatches.length - 1; aMatches = aMatches.splice(0, 1 ); aMatches.push(" & " + nExtra + " others ") } if(aMatches.length == 1 ) { var sMessage = aMatches.join('') + " matching " + A('custom_alerts',{ customAlertId: caId }) + "<b>" + CustomAlerts.customAlerts[caId].customAlert['alert_name'].replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</b></a> has logged in."; } else { var sMessage = aMatches.join('') + " matching " + A('custom_alerts',{ customAlertId: caId }) + "<b>" + CustomAlerts.customAlerts[caId].customAlert['alert_name'].replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</b></a> logged in. "; } var sIcon = null;//'<img src="' + t.g_hPlatform.image_url_cdn + 'files/images/icons/svg/check_box_white.svg" height="12">';
 var sSound = CustomAlerts.soundConfig[ caId ]; Sound('up',sSound); NotificationHistory(sMessage, sIcon, sSound ); }};CustomAlerts.get_onlineMatches = function(){ if(! CustomAlerts.mfcCustomAlerts ) CustomAlerts.mfcCustomAlerts = new MfcCustomAlerts({ token: g_hSelf.token, get_onlineMatches_callback: CustomAlerts.get_onlineMatches_callback }); CustomAlerts.mfcCustomAlerts.get_onlineMatches();};CustomAlerts.get_onlineMatches_callback = function(res ){ if(typeof(res ) == 'object' ) { CustomAlerts.customAlerts = res; } else { return; } for(var caId in CustomAlerts.customAlerts ) { for(var a=0; a < CustomAlerts.customAlerts[caId].list.length; a++ )
 { CustomAlerts.customAlerts[caId].sets[ CustomAlerts.customAlerts[caId].list[a] ].custom_alert = caId; } } WindowHandle.CallEach('player', function(oWin ) { if(oWin.OnlineBroadcasterList && oWin.OnlineBroadcasterList.Refresh ) { oWin.OnlineBroadcasterList.Refresh(CustomAlerts.firstCallback ? 'force' : '' ); } } ); if(CustomAlerts_SideMenu.bIsDisplayed ) { CustomAlerts_SideMenu.GetData_Callback(); } if(CustomAlerts.firstCallback ) { setTimeout(function() { CustomAlerts.firstCallback = false; }, 15000 ); CustomAlerts.processAudibleAlerts({ mode: 'initialize' }); } else { CustomAlerts.processAudibleAlerts(); }};function toggleNotesFlag(nUserId, nStatus){ g_hSelf.user_notepad_cache[nUserId] = nStatus; if ( ! g_hUsers[nUserId] ) { return; } g_hUsers[nUserId].notes = nStatus; if(g_hUsers[nUserId].access_level == FCS.FCLEVEL_MODEL ) { clearBroadcasterHtmlCaches(nUserId); }}function clearBroadcasterHtmlCaches(nUserId){ for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.mfcBroadcasterDisplay.ClearBroadcasterHtmlCacheById(nUserId);
 } }}function PruneUsers(){ this.nCycleTime = 1000*60*3; this.nModelRemovalDelay = 1000*60*15; this.bDebugMode = false; this.nTimer = 0; this.StartTimer();};PruneUsers.prototype.StartTimer = function(){ this.StopTimer(); this.nTimer = setInterva}, this.nCycleTime);};PruneUsers.prototype.StopTimer = function(){ if(this.nTimer > 0 ) { clearInterval(this.nTimer); this.nTimer = 0; }};PruneUsers.prototype.DebugMsg = function(msg){ if(this.bDebugMode ) { Log(`[ManagerUsers] ${msg}`); }};PruneUsers.prototype.Cycle = function(){ const options = { now: Date.now() }; for(const nUserId in g_hUsers ) { if(nUserId < 100 ) { continue; } this.CheckUser(g_hUsers[nUserId], options); }
};PruneUsers.prototype.CheckUser = function(hUser, options ){ options = options || {}; const now = options.now || Date.now(); const removeAt = now + this.nModelRemovalDelay; if(this.CanUserBeRemoved(hUser) ) { if(hUser.access_level == FCS.FCLEVEL_MODEL ) { if(typeof(hUser._remove_at) === 'number' ) { if(hUser._remove_at <= now ) { this.RemoveUser(hUser ); } } else { this.DebugMsg(`Setting removal time for ${hUser.username}[${hUser.user_id}] to ${removeAt}`); hUser._remove_at = removeAt; } } else { this.RemoveUser(hUser); } } else if(hUser._remove_at > 0 ) { this.DebugMsg(`User ${hUser.username}[${hUser.user_id}] is no longer deletable, removing '_remove_at'`); delete hUser._remove_at; }};PruneUsers.prototype.CheckByUserId = function(nUserId, options ){ const hUser = g_hUsers[nUserId]; if(hUser ) { this.CheckUser(hUser, options); }};PruneUsers.prototype.RemoveUser = function(hUser ){ this.DebugMsg(`Removing user ${hUser.username}[${hUser.user_id}]`); delete g_hUsers[hUser.user_id];};PruneUsers.prototype.CanUserBeRemoved = function(hUser ){
 if(hUser.user_id == g_hSelf['user_id'] ) { return false; } if(hUser.retain ) { return false; } if(hUser.friend || hUser.bookmarked ) { return false; } if(g_hLoungeIds[hUser.user_id] ) { return false; } if(g_hoPlayerWindows[hUser.user_id] || g_hoPMWindows[hUser.user_id] ) { return false; } if(hUser.access_level == FCS.FCLEVEL_MODEL ) { if(hUser.state != FCS.FCVIDEO_OFFLINE ) { return false; } } else { if(this.IsInOurRooms(hUser) ) { return false; } } return true;};PruneUsers.prototype.IsInOurRooms = function(hUser ){ if(hUser.rooms ) { for(const nRoomUserId in g_hoPlayerWindows ) { if(hUser.rooms[ nRoomUserId ] ) { return true; } } } return false;};var pruneUsers = new PruneUsers();function SaveSetting(sSetting,sVal,sVal2,oCallback){ if(UserExtensions.hExtNamesToIds[ sSetting ] ) { UserExtensions.Write(sSetting, sVal ); if(sSetting != 'webcam_security_level' && sSetting != 'chat_text_color' && sSetting != 'chat_text_font' && sSetting != 'chat_text_font_flags'
 && sSetting != 'chat_background_id' ) { return; } } g_hSelf[ sSetting ] = sVal; if(( g_UA.mobile ) && ( sSetting == 'video_size' || sSetting == 'video_width' || sSetting == 'models_per_page' || sSetting == 'hide_people' || sSetting == 'online_model_order' ) ) { return; } if(g_hSelf['access_level'] <= FCS.FCLEVEL_GUEST ) { return; } sVal2 = (sVal2 == 'undefined' ) ? '' : sVal2; try { var oReq = createRequestObject(); oReq.open("get","../php/user_settings.php?user_id=" + g_hSelf['user_id'] + "&update=1&key="+sSetting+"&value="+encodeURIComponent(sVal)+"&value2="+encodeURIComponent(sVal2)+"&token=" + g_hSelf.token + "&" + Math.random() ); oReq.onreadystatechange = function() { if(oReq.readyState != 4 ) { return; } try { if(oReq.responseText == 1 ) { TxCmd(FCS.FCTYPE_RELOADSETTINGS, g_nSessionId, 0 ); } else if(oReq.responseText.charAt(0) == '{' ) { var res = ParseJSON(oReq.responseText); if(sSetting == 'rule_violation_confirm' && res.success )
 { t.g_hSelf['rule_violation'] = 0; t.Load('homepage'); } } else if(oReq.responseText ) { eval(oReq.responseText ); } } catch(oError) { console.log(oError); g_oReportBack = new MfcReportBack('SaveSetting'); g_oReportBack.Send('Response', "SaveSetting:Response catch: " + oError.description + " " + oReq.responseText ); } if(typeof(oCallback) == 'function' ) { oCallback(oReq.responseText ); } }; oReq.send(null); } catch(oError) { console.log(oError); g_oReportBack = new MfcReportBack('SaveSetting'); g_oReportBack.Send('Send' , oError.description ); }}function GetDocumentDimensions(oDoc,oWin){ oDoc = oDoc || document; var nWidth; var nHeight; if (typeof(oWin.innerWidth ) == 'number') { nWidth = oWin.innerWidth; nHeight = oWin.innerHeight; } else if (oDoc.documentElement && (oDoc.documentElement.clientWidth || oDoc.documentElement.clientHeight )) { nWidth = document.documentElement.clientWidth; nHeight = oDoc.documentElement.clientHeight; } else if (oDoc.body && (oDoc.body.clientWidth || oDoc.body.clientHeight )) {
 nWidth = oDoc.body.clientWidth; nHeight = oDoc.body.clientHeight; } return { width: nWidth, height: nHeight };}var UCR = { hRooms: {}, bAutoRoomOpen: false, bInitialLoadDone: false};events.onRx(FCS.FCTYPE_UCR,function(fcMsg) { UCR.Receive(fcMsg); });UCR.Request = function(){ TxCmd(FCS.FCTYPE_UCR, g_nSessionId, 0, FCS.FCCHAN_JOIN, 0);};UCR.Receive = function(fcMsg ){ if(! fcMsg.arg1 && fcMsg.arg2 == FCS.FCRESPONSE_ERROR ) { alert('Member Room Error'); } if(fcMsg.arg1 ) { if(fcMsg.arg2 == FCS.FCCHAN_JOIN ) { var aRoomNameStyle = new Array(); if(fcMsg.obj.c.opt & FCS.FCOPT_ITALICS ) aRoomNameStyle.push("font-style:italic;"); if(fcMsg.obj.c.font ) aRoomNameStyle.push("font-family:" + MfcCustomFonts.prototype.fonts[ fcMsg.obj.c.font ].name + ";"); if(fcMsg.obj.c.color && UCR.hColors[ fcMsg.obj.c.color ] ) aRoomNameStyle.push("color:#" + fcMsg.obj.c.color + ";"); fcMsg.obj.name_font_style = aRoomNameStyle.join(''); fcMsg.obj.name = fcMsg.obj.name.replace(/&\S+/,''); fcMsg.obj.originator_id = fcMsg.obj.id - FCS.CHANNEL_ID_START; if(! g_hUsers[ fcMsg.obj.originator_id ] ) { g_hUsers[ fcMsg.obj.originator_id ] = { username: fcMsg.obj.o.name || 'RoomOriginator', user_id: fcMsg.obj.originator_id, access_level: '2', state: '0', photos: '0', rating: '-2',
 cam_score: '0', aboutme: 'Member Created Room', active: '1', blurb: 'Member Created Room', topic: 'Member Created Room', creation_date: '2011-04-28 00:12:00', avatars: '1', model_group: '1' }; } g_hUsers[ fcMsg.obj.originator_id ].chat_background_id = ( fcMsg.obj.c.bg || 0 ); g_hUsers[ fcMsg.obj.originator_id ].retain = true; UCR.hRooms[ fcMsg.arg1 ] = fcMsg.obj; if(g_hSelf.user_id == fcMsg.obj.originator_id && UCR.bAutoRoomOpen ) { TopLoadPlayer({ broadcaster_id: fcMsg.obj.originator_id }); UCR.bAutoRoomOpen = false; } } else if(fcMsg.arg2 == FCS.FCCHAN_PART ) { delete UCR.hRooms[ fcMsg.arg1 ]; } } if(UCR.bInitialLoadDone || ( ! UCR.bInitialLoadDone && fcMsg.arg2 == FCS.FCCHAN_WELCOME )) { if(g_hWindows['user_created_rooms'] ) { try { g_hWindows['user_created_rooms'].window.UCRPopup.RefreshRooms(); } catch(e) { Log("UCR error: " + e.message); } } else { TxCmd(FCS.FCTYPE_UCR, g_nSessionId, 0, FCS.FCCHAN_PART, 0); } UCR.bInitialLoadDone = true; }};UCR.CreateRoom = function(nPermissionsMask, sName, nFont, nFontOptions, sFontColor, nBackground, nVideoMode, sDescription ){ var sData = '{' + '"perm":' + nPermissionsMask + ',' + '"name":"' + sName + '",' + '"video":' + nVideoMode + ',' + '"description":"' + sDescription + '",' + '"c":{' +
 '"font":' + nFont + ',' + '"opt":' + nFontOptions + ',' + '"bg":' + ( nBackground || 0 ) + ',' + '"color":"' + sFontColor + '"' + '}' + '}'; TxCmd(FCS.FCTYPE_MYUCR, g_nSessionId, 0, nPermissionsMask, FCS.FCCHAN_JOIN, sData);};UCR.hColors = { "FF0000": "Red", "00FF00": "Green", "0000FF": "Blue", "FF00FF": "Magenta", "000000": "Black", "70DB93": "Aquamarine", "5C3317": "Baker'sChocolate", "9F5F9F": "BlueViolet", "B5A642": "Brass", "D9D919": "BrightGold", "A62A2A": "Brown", "8C7853": "Bronze", "A67D3D": "BronzeII", "5F9F9F": "CadetBlue", "D98719": "CoolCopper", "B87333": "Copper", "FF7F00": "Coral", "42426F": "CornflowerBlue", "5C4033": "DarkBrown", "2F4F2F": "DarkGreen", "4A766E": "DarkGreenCopper", "4F4F2F": "DarkOliveGreen", "9932CD": "DarkOrchid", "871F78": "DarkPurple", "6B238E": "DarkSlateBlue", "2F4F4F": "DarkSlateGrey", "97694F": "DarkTan", "7093DB": "DarkTurquoise", "855E42": "DarkWood", "545454": "DimGrey", "856363": "DustyRose", "D19275": "Feldspar", "8E2323": "Firebrick", "F5CCB0": "Flesh", "238E23": "ForestGreen", "CD7F32": "Gold", "DBDB70": "Goldenrod", "C0C0C0": "Grey", "527F76": "GreenCopper", "93DB70": "GreenYellow",
 "215E21": "HunterGreen", "4E2F2F": "IndianRed", "9F9F5F": "Khaki", "C0D9D9": "LightBlue", "A8A8A8": "LightGrey", "8F8FBD": "LightSteelBlue", "E9C2A6": "LightWood", "32CD32": "LimeGreen", "E47833": "MandarianOrange", "8E236B": "Maroon", "32CD99": "MediumAquamarine", "3232CD": "MediumBlue", "6B8E23": "MediumForestGreen", "9370DB": "MediumOrchid", "426F42": "MediumSeaGreen", "7F00FF": "MediumSlateBlue", "7FFF00": "MediumSpringGreen", "70DBDB": "MediumTurquoise", "DB7093": "MediumVioletRed", "A68064": "MediumWood", "2F2F4F": "MidnightBlue", "23238E": "NavyBlue", "4D4DFF": "NeonBlue", "FF6EC7": "NeonPink", "00009C": "NewMidnightBlue", "EBC79E": "NewTan", "CFB53B": "OldGold", "FF7F00": "Orange", "FF2400": "OrangeRed", "DB70DB": "Orchid", "8FBC8F": "PaleGreen", "BC8F8F": "Pink", "EAADEA": "Plum", "D9D9F3": "Quartz", "5959AB": "RichBlue", "6F4242": "Salmon", "8C1717": "Scarlet", "238E68": "SeaGreen", "6B4226": "Semi-SweetChocolate", "8E6B23": "Sienna", "E6E8FA": "Silver", "3299CC": "SkyBlue", "007FFF": "SlateBlue", "FF1CAE": "SpicyPink", "00FF7F": "SpringGreen", "236B8E": "SteelBlue", "38B0DE": "SummerSky", "DB9370": "Tan", "D8BFD8": "Thistle", "ADEAEA": "Turquoise",
 "5C4033": "VeryDarkBrown", "CDCDCD": "VeryLightGrey", "4F2F4F": "Violet", "CC3299": "VioletRed", "D8D8BF": "Wheat", "99CC32": "YellowGreen"};var RoomHelper_TopHandlers = { authorized_rooms: {}};events.onRx(FCS.FCTYPE_ROOMHELPER,function(fcMsg) { RoomHelper_TopHandlers.Receive(fcMsg ); });RoomHelper_TopHandlers.Receive = function(fcMsg ){ var nModel = fcMsg.arg1; var nResponse = fcMsg.arg2; if ( ! g_hUsers[nModel] ) { return; } if(nResponse >= 100 ) { g_hUsers[nModel].roomHelper = nResponse; if(g_hSelf.user_id == nResponse ) { RoomHelper_TopHandlers.authorized_rooms[ nModel ] = true; if(oPlayerHandle = WindowHandle.Get('player', nModel ) ) { oPlayerHandle.g_roomHelper.UpdateExternals(); oPlayerHandle.g_roomHelper.ReceiveMessage("You are now " + PossessiveApostrophe(g_hUsers[nModel].username) + " room helper."); } } } else if(nResponse == FCS.FCRESPONSE_NOTICE ) { if(fcMsg.obj && fcMsg.obj.topic != undefined ) { g_hUsers[nModel].topic_template = URLEncoding.decode(fcMsg.obj.topic,'topic'); } } else if(nResponse == FCS.FCRESPONSE_SUSPEND ) {
 delete RoomHelper_TopHandlers.authorized_rooms[ nModel ]; if(g_hSelf.user_id == g_hUsers[nModel].roomHelper ) { if(oPlayerHandle = WindowHandle.Get('player', nModel ) ) { oPlayerHandle.g_roomHelper.UpdateExternals(); oPlayerHandle.g_roomHelper.ReceiveMessage("You are no longer " + PossessiveApostrophe(g_hUsers[nModel].username ) + " room helper"); } } delete g_hUsers[nModel].roomHelper; } else if(nResponse == FCS.FCRESPONSE_SUCCESS ) { if(oPlayerHandle = WindowHandle.Get('player', nModel ) ) oPlayerHandle.g_roomHelper.ReceivedCommand(fcMsg.obj ); } else if(nResponse == FCS.FCRESPONSE_ERROR || fcMsg.obj._msg ) { Log('ROOMHELPER ERROR: nResponse == FCS.FCRESPONSE_ERROR, received error message: ' + fcMsg.obj._msg ); if(oPlayerHandle = WindowHandle.Get('player', nModel ) ) oPlayerHandle.g_roomHelper.ReceiveMessage(fcMsg.obj._msg ); }};RoomHelper_TopHandlers.Send = function(nCommandType, nModelId, hPayload ){ var hUser; if(( hPayload.op == 'mute' || hPayload.op == 'unmute' ) && hPayload.username && ( hUser = RoomHelper_TopHandlers.GetUserByUsername(hPayload.username ) ) ) { hUser.muted = hPayload.op == 'mute'; } if(hPayload.countdown != undefined ) { delete hPayload.topic; } TxCmd(FCS.FCTYPE_ROOMHELPER, g_nSessionId, 0, nCommandType, nModelId, JSON.stringify(hPayload) );};
RoomHelper_TopHandlers.CommandReceiver = function(hOptions ){ hOptions = hOptions || {}; var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', hOptions.broadcaster_id ) ) && oPlayerWindow.g_roomHelper ) { var hUser = t.g_hUsers[ hOptions.user_id || hOptions.sessionid ]; if(! hUser ) { return; } hOptions.sid = hOptions.sessionid || 0; if(hOptions.ban ) { oPlayerWindow.g_roomHelper.Ban([ '/ban', ( hUser ? hUser.username : 0 ) ], hOptions ); } else if(hOptions.kick ) { oPlayerWindow.g_roomHelper.Kick([ '/kick', ( hUser ? hUser.username : 0 ) ], hOptions ); } else if(hOptions.mute ) { oPlayerWindow.g_roomHelper.muteUser([ '/mute', ( hUser ? hUser.username : 0 ) ], hOptions ); } else if(hOptions.unmute ) { hOptions.unmute = 1; oPlayerWindow.g_roomHelper.muteUser([ '/unmute', ( hUser ? hUser.username : 0 ) ], hOptions ); } }};RoomHelper_TopHandlers.GetUserByUsername = function(sUsername ){ for(nUserId in g_hUsers ) { var hUser = g_hUsers[ nUserId ]; if(hUser.username && hUser.username.toLowerCase() == sUsername.toLowerCase() ) { return hUser; } } return {};};var RoomData = { bDone: false
};RoomData.Request = function(){ TxCmd(FCS.FCTYPE_ROOMDATA, g_nSessionId, 0, FCS.FCCHAN_JOIN, 0);};events.onRx(FCS.FCTYPE_ROOMDATA,function(fcMsg) { RoomData.Receive(fcMsg ); });RoomData.Receive = function(fcMsg ){ if(fcMsg.arg1 == FCS.FCTYPE_ROOMDATA ) { if(typeof(fcMsg.obj ) != 'object' ) { return; } var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', fcMsg.obj.model ) ) { if(fcMsg.arg2 == FCS.FCRESPONSE_NOTICE ) { oPlayerWindow.Countdown.Receive(fcMsg.obj); oPlayerWindow.RoomHelper_PlayerHandlers.ReceiveCountdown(fcMsg.obj); } else if(fcMsg.arg2 == FCS.FCRESPONSE_ERROR ) { oPlayerWindow.RoomHelper_PlayerHandlers.ReceivedMessage(fcMsg.obj._msg ); } } } else if(fcMsg.arg1 == 0 && fcMsg.arg2 == FCS.FCCHAN_WELCOME ) { RoomData.bDone = true; ExtraMenuSelector.Load(g_hSelf.extra_menu_mode || 'default' ); for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { oPlayerWindow.OnlineBroadcasterList.Refresh(); } } } else if ( fcMsg.arg1 == 0 && fcMsg.arg2 == 0 && fcMsg.obj ) { if ( fcMsg.obj !== null && Object.prototype.toString.call(fcMsg.obj ) === '[object Object]' )
 { for (var sK in fcMsg.obj) { LoadModelsFromObject.hRoomCounts[sK] = fcMsg.obj[sK]; if (g_hUsers[sK]) { g_hUsers[sK].room_count = fcMsg.obj[sK]; } } if(! RoomData.bDone ) { RoomData.Receive({ arg1: 0, arg2: FCS.FCCHAN_WELCOME }); } } else if ( isArray(fcMsg.obj) ) { var nUserId = 0; for(var n = 0; n < fcMsg.obj.length; n=n+2 ) { nUserId = fcMsg.obj[n]; LoadModelsFromObject.hRoomCounts[ fcMsg.obj[n] ] = fcMsg.obj[n+1]; if(g_hUsers[ nUserId ] ) { g_hUsers[ fcMsg.obj[n] ].room_count = fcMsg.obj[n+1]; } } } }};events.onRx(FCS.FCTYPE_NEWSITEM,function(fcMsg) { FcNewsItem(fcMsg ); });function FcNewsItem(fcMsg ){ if(GetEl('news_feed_menu_item') ) { GetEl('news_feed_menu_item').style.backgroundColor = '#FFFF0088'; setTimeout(function() { GetEl('news_feed_menu_item').style.backgroundColor = '#FFFFFF88'; }, 300000 ); } if(fcMsg.obj['user_id'] == 36948 ) { fcMsg.obj['user_id'] = MFC_NEWS_USER_ID; fcMsg.obj['username'] = t.g_hPlatform.name + '_News'; } var hUser; if(hUser = g_hUsers[ fcMsg.obj['user_id'] ] ) { hUser.lastnews = parseInt(Date.now() / 1000 ); }
 fcMsg.obj['msg'] = ConditionString(fcMsg.obj['msg'],{ link_affiliated_sites: true, remove_html: true, break_long_strings: true } ); if(fcMsg.obj['msg'].indexOf('MFCTEST') > -1 && ! top.g_sClearCode ) return; if(fcMsg.obj['user_id'] == MFC_NEWS_USER_ID ) fcMsg.obj['username'] = t.g_hPlatform.name; NotificationHistory(A('news_feed', fcMsg.obj ) + "<b>News Feed</b></a> from <b>" + "<a href=\"javascript:popUserMenu.open(" + fcMsg.obj['user_id'] + ",g_oDhtmlPopup);\">" + fcMsg.obj['username'] + "</a>", "bw.news.png" ); if(g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN || g_hSelf['access_level'] <= FCS.FCLEVEL_GUEST ) { for(var sK in g_hoPlayerWindows) { if(g_hoPlayerWindows[sK].presentation_state == FCS.EVSESSION_NONE || g_hoPlayerWindows[sK].presentation_state == FCS.EVSESSION_VOYEUR || g_hoPlayerWindows[sK].presentation_state == undefined || ( g_hoPlayerWindows[sK].presentation_state == FCS.EVSESSION_PRIVATE && ! ( g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN_NOPVT ) ) || ( g_hoPlayerWindows[sK].presentation_state == FCS.EVSESSION_GROUP && ! ( g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN_NOGRP ) ) || ( g_hoPlayerWindows[sK].presentation_state == FCS.EVSESSION_CLUB && ! ( g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN_NOGRP ) ) ) { var oPlayerWindow; if(oPlayerWindow = WindowHandle.Get('player', sK ) ) { var nPlayerWindow = ( window.player && player.g_nBroadcasterId == sK ) ? 0 : sK; oPlayerWindow.ChatQueue.Append(NewsFeed_InChat.getHtml('player',fcMsg.obj,sK) ); } } } } if(g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_PM || g_hSelf['access_level'] <= FCS.FCLEVEL_GUEST ) { for (var sK in g_hoPMWindows) { if(( g_hoPMWindows[sK].presentation_state == FCS.EVSESSION_NONE ) || ( g_hoPMWindows[sK].presentation_state == FCS.EVSESSION_VOYEUR )
 || ( ( g_hoPMWindows[sK].presentation_state == FCS.EVSESSION_PRIVATE ) && ! ( g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN_NOPVT ) ) || ( ( g_hoPMWindows[sK].presentation_state == FCS.EVSESSION_GROUP ) && ! ( g_hSelf['news_feed_options'] & FCS.FCNEWSOPT_IN_CHAN_NOGRP ) ) ) { var oPMWindow; if(oPMWindow = WindowHandle.Get('pm',sK) ) { oPMWindow.AppendContents(NewsFeed_InChat.getHtml('pm',fcMsg.obj,sK) ); } } } }}events.onRx(FCS.FCTYPE_TOKENIN});function TipReceived(fcMsg ){ if (fcMsg.obj) { if (fcMsg.obj.sesstype == FCS.EVSESSION_TIP) { if ( ! ( fcMsg.obj.flags & FCS.TKOPT_TIP_HISTORY ) ) { var sUser = fcMsg.obj.u[2]; var hSender = g_hUsers[ fcMsg.obj.u[1] ]; if(hSender && hSender.access_level < FCS.FCLEVEL_PREMIUM && fcMsg.obj.u[2] != 'anonymous' ) { t.Log('TipReceived error; sender not premium: ' + fcMsg.obj.u[1] ); g_oReportBack = new MfcReportBack('FCS.FCTYPE_TOKENINC Error'); g_oReportBack.Send(JSON.stringify(fcMsg.obj ) ); } if (fcMsg.obj.flags & FCS.TKOPT_TIP_ANON) sUser = "An anonymous user"; var sMsg = sUser + " has tipped " + fcMsg.obj.m[2]; if(! (fcMsg.obj.flags & FCS.TKOPT_TIP_HIDDEN_AMT) ) sMsg += " " + fcMsg.obj.tokens + " tokens"; if(fcMsg.obj.msg != undefined && typeof(fcMsg.obj.msg ) == 'string' ) fcMsg.obj.msg = fcMsg.obj.msg.replace(/>/g, "&gt;").replace(/</g, "&lt;"); if (fcMsg.obj.flags & FCS.TKOPT_TIP_PUBLICMSG)
 sMsg += ": <span class=tipMsg>'" + fcMsg.obj.msg + "'</span>"; else sMsg += "."; FcChannelMessage({ from: 0, to: fcMsg.obj.ch, arg1: 0, arg2: 0, obj: { "sid":0, "uid":0, "nm":"FCServer", "lv":-1, "vs":127, "msg": encodeURIComponent(sMsg), 'user': { session_id: fcMsg.obj.u[0], user_id: fcMsg.obj.u[1], username: fcMsg.obj.u[2] }, "_tip_sesstype": FCS.EVSESSION_TIP } }); } } else if (fcMsg.obj.sesstype == FCS.EVSESSION_SPECIAL ) { if(typeof(fcMsg.obj.extdata ) == 'object' ) { var sTipStyle=''; if(fcMsg.obj.extdata.share_post_data && fcMsg.obj.extdata.share_post_data.color ) { var sColor = fcMsg.obj.extdata.share_post_data.color.replace(/[^\w#]/g,''); if(t.NightMode_Top.enabled ) { sColor = NightMode.HexInvert(sColor); } sTipStyle += "background-color:" + sColor + ";"; sTipStyle += "color:" + MfcCustomFonts.prototype.lighten_hex(sColor , t.NightMode_Top.enabled ? 0.6 : -0.6 ) + ";"; } var sMsg = ''; if(g_hUsers[ fcMsg.obj.u[1] ] ) { sMsg += "<a href=\"javascript:Player_popUserMenu_open(" + fcMsg.obj.u[1] + "); \" "; sMsg += " class=user_style style=\"" + MfcCustomFonts.prototype.get_style(g_hUsers[ fcMsg.obj.u[1] ] ) + "\""; sMsg += ">" + fcMsg.obj.u[2] + "</a>"; } else { sMsg += fcMsg.obj.u[2]; }
 var sTitle = ''; if(fcMsg.obj.extdata && fcMsg.obj.extdata.share_post_data ) { sTitle = fcMsg.obj.extdata.share_post_data.poll_option_title || fcMsg.obj.extdata.share_post_data.tipmenu_title || fcMsg.obj.extdata.trns_title || ''; if(fcMsg.obj.extdata.share_post_data.poll_option_title ) { sTitle += ' | ' + fcMsg.obj.extdata.share_post_data.poll_option_title; } if(fcMsg.obj.extdata.share_post_data.tipmenu_option_title ) { sTitle += ' | ' + fcMsg.obj.extdata.share_post_data.tipmenu_option_title; } } else if(fcMsg.obj.extdata.trns_title ) { sTitle = fcMsg.obj.extdata.trns_title; } sMsg += " has tipped " + "<a href=\"javascript:Player_popUserMenu_open(" + fcMsg.obj.m[1] + "); \" class=user_style style=\"" + MfcCustomFonts.prototype.get_style(g_hUsers[ fcMsg.obj.m[1] ] ) + "\">" + fcMsg.obj.m[2] + "</a>" + " " + fcMsg.obj.tokens + " token" + ( fcMsg.obj.tokens > 1 ? 's':'' ); if(fcMsg.obj.extdata.share_post_data && ( fcMsg.obj.extdata.share_post_data.thing_type=='Auction' || fcMsg.obj.extdata.share_post_data.thing_type=='AuctionBid' ) ) { if(fcMsg.obj.extdata.share_post_data.thing_type=='AuctionBid' ) sMsg += ' to bid on '; else if(fcMsg.obj.extdata.share_post_data.thing_type=='Auction' ) sMsg += fcMsg.obj.extdata.share_post_data.instant_win ? " to Instant Win " : " to Win "; if(fcMsg.obj.extdata.share_post_data.trns_title ) { sMsg += "<a href=\"//share." + t.g_hPlatform.domain + fcMsg.obj.extdata.trns_url + "\" target=\"_blank\" class=user_style style=\"" + MfcCustomFonts.prototype.get_style(g_hUsers[ fcMsg.obj.m[1] ] ) + "\">" + sTitle.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</a>"; } if(fcMsg.obj.extdata.share_post_data.thing_type=='AuctionBid' ) sMsg += ': ' + fcMsg.obj.extdata.share_post_data.new_high_bid + ' token' + ( fcMsg.obj.extdata.share_post_data.new_high_bid > 1 ? 's':'' ); else if(fcMsg.obj.extdata.share_post_data.thing_type=='Auction' ) sMsg += '! Congratulations!'; } else { sMsg += " for <a href=\"//share." + t.g_hPlatform.domain + fcMsg.obj.extdata.trns_url + "\" target=\"_blank\" class=user_style style=\"" + MfcCustomFonts.prototype.get_style(g_hUsers[ fcMsg.obj.m[1] ] ) + "\">" + sTitle.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</a>";
 } FcChannelMessage({ from: 0, to: fcMsg.obj.ch, arg1: 0, arg2: 0, obj: { "sid":0, "uid":0, "nm":"FCServer", "lv":-1, "vs":127, "msg": encodeURIComponent(sMsg), "user": { session_id: fcMsg.obj.u[0], user_id: fcMsg.obj.u[1], username: fcMsg.obj.u[2] }, "style": sTipStyle, "_tip_sesstype": FCS.EVSESSION_SPECIAL } }); } } }}function inheritPresentationState(wid, srcWindows, dstWindows){ var inheritedState = false; var src = null, dst = null; if ( isObject(dstWindows ) && ( dstWindows.hasOwnProperty(wid ) ) && isObject(( dst = dstWindows[ wid ] ) ) ) { var hProps = { "presentation_state": FCS.EVSESSION_NONE, "private_session_id": undefined, "group_session_id": undefined, "club_session_id": undefined }; for ( var sK in hProps) if (typeof(hProps[sK]) != "undefined") dst[ sK ] = hProps[ sK ]; if ( isObject(srcWindows ) && ( srcWindows.hasOwnProperty(wid ) ) && isObject(( src = srcWindows[ wid ] ) ) 
 && ( src.hasOwnProperty('presentation_state') ) && ( src.presentation_state != FCS.EVSESSION_NONE ) ) // .. and isnt default sess state?
 { for ( var sK in hProps) { if (src.hasOwnProperty(sK ) && typeof(src[ sK ]) != "undefined") { dst[ sK ] = src[ sK ]; inheritedState = true; } } } } return inheritedState;}function OBSVideoServer(nBroadcasterId ){ return !!( g_hUsers.hasOwnProperty(nBroadcasterId) && g_hUsers[ nBroadcasterId ].hasOwnProperty('videoserver') && g_default_clientVideo && typeof(g_default_clientVideo.IsObsVideo) === 'function' && g_default_clientVideo.IsObsVideo(t.g_hUsers[ nBroadcasterId ].videoserver ) );}function WebRTCSupported(nBroadcasterId ){ if ( g_hUsers.hasOwnProperty(nBroadcasterId) && g_hUsers[ nBroadcasterId ].hasOwnProperty('webrtc_video') && g_hUsers[ nBroadcasterId ].webrtc_video && g_default_clientVideo && g_default_clientVideo.bWebrtcSupported ) { return 1; } if(g_default_clientVideo && g_default_clientVideo.bTranscodedWebrtcSupported ) return 2; return 0;}function DrawVideo(nUserId, hOptions, oCaller)
{ console.log('DrawVideo OBSOLETE '); return;}var EnlargeImage = { oReq: null, oImg: null, oCaller: null, sImgSrc: '', sShortcut: '', sMediumSrc: ''};EnlargeImage.open = function(oDhtmlPopop, sImgSrc, sShortcut ){ if(! oDhtmlPopop )
 { window.open(('../html/image_popup.html?image=' + encodeURIComponent(sImgSrc )),'_blank','status=0'); return; } EnlargeImage.oDhtmlPopop = oDhtmlPopop; EnlargeImage.sImgSrc = sImgSrc; EnlargeImage.sShortcut = sShortcut; EnlargeImage.sMediumSrc = sImgSrc.replace(/(.+)\.(\w{3})$/,"$1.200x.$2"); EnlargeImage.oImg = new Image(); EnlargeImage.oImg.onload = EnlargeImage.exec; EnlargeImage.oImg.src = EnlargeImage.sMediumSrc;};EnlargeImage.exec = function(){ var sExtra = ''; if(g_hSelf.access_level >= FCS.FCLEVEL_PREMIUM ) { sExtra = " <span id=add_to_my_library_" + EnlargeImage.sShortcut.replace(/\W/g,'') + "> <a href=\"javascript:t.EnlargeImage.SaveToUserLib(document);\">Add to My Library</a> </span> | "; } EnlargeImage.oDhtmlPopop.open(" <div style=\"text-align:center;padding-top:20px;padding-bottom:10px;\"> <i"+"mg class=chat_image_medium sr"+"c=\"" + EnlargeImage.sMediumSrc + "\" onMouseover=\"if(this.width >= 199 ){ this.style.cursor='pointer'; }\" onClick=\"if(this.width >= 199 ) { window.open('../html/image_popup.html?image=" + encodeURIComponent(EnlargeImage.sImgSrc) +"', '_blank', 'height=' + (this.height + 20) + ',width=' + (this.width + 20) + ',status=0'); } \"> </div> <div style='text-align:center;border:0px solid red;white-space:nowrap;'> " + sExtra + " <a href=\"javascript:if(confirm('Are you sure you wish to flag this chat image?')) { alert('" + t.g_hPlatform.name + " administrators will be notified.');t.ChatStreamImage_FlagBad({ shortcut: '" + EnlargeImage.sShortcut + "', filename: '" + EnlargeImage.sImgSrc + "'}); } g_oDhtmlPopup.close(); \">Flag as offensive</a> | <a href=\"javascript:g_oDhtmlPopup.close(); \" " + ( g_UA.mobile ? "style='font-size:19px;'" : "" ) + ">Close</a> </div> ");};EnlargeImage.SaveToUserLib = function(oCaller ){ EnlargeImage.oCaller = oCaller; if(EnlargeImage.oReq == null ) EnlargeImage.oReq = createRequestObject(); 
 EnlargeImage.oReq.open("get","../php/user_chat_images.php?update_user_library=1&action=add&shortcut=" + EnlargeImage.sShortcut ); EnlargeImage.oReq.onreadystatechange = function() { if ( EnlargeImage.oReq.readyState != 4) { return; } var oEl; if(oEl = EnlargeImage.oCaller.getElementById("add_to_my_library_" + EnlargeImage.sShortcut.replace(/\W/g,'') ) ) oEl.innerHTML = "<b>Saved!</b>"; }; EnlargeImage.oReq.send(null);};eval('\x52\x61\x74\x65\x20\x3d\x20\x4d\x61\x74\x68\x2e\x72\x61\x6e\x64\x6f\x6d');var ToggleMenu = {};ToggleMenu.Toggle = function(sMenu ){ g_hSelf['show_'+sMenu] = g_hSelf['show_'+sMenu] ? 0 : 1; if(sMenu == 'personal_menu' ) { UserExtensions.Write('show_' + sMenu, g_hSelf['show_'+sMenu] || 0 ); } else if(sMenu == 'online_friends') { UserExtensions.Write('show_' + sMenu, g_hSelf['show_'+sMenu] || 0 ); } else if(sMenu == 'bookmarks') { UserExtensions.Write('show_' + sMenu, g_hSelf['show_'+sMenu] || 0 ); } else if(sMenu == 'offline_friends') { SaveSetting('show_' + sMenu, g_hSelf['show_'+sMenu] || 0 ); } ToggleMenu.Label(sMenu );};ToggleMenu.Label = function(sMenu ){ if(g_hSelf['show_'+sMenu] == undefined ) g_hSelf['show_'+sMenu] = ( sMenu == 'offline_friends' ) ? 0 : 1; var oEl; if(g_hSelf['show_'+sMenu] ) { if(oEl = GetEl(sMenu+'_toggle_icon') ) { oEl.src = t.g_hPlatform.image_url_cdn + 'files/images/svg/minimize2.svg'; } if(oEl = GetEl(sMenu+'_list_wrapper') ) { oEl.style.display=''; } } else { if(oEl = GetEl(sMenu+'_toggle_icon') ) { 
 oEl.src = t.g_hPlatform.image_url_cdn + 'files/images/svg/maximize2.svg'; } if(oEl = GetEl(sMenu+'_list_wrapper') ) { oEl.style.display='none'; } } if(sMenu == 'personal_menu' ) { if(oEl = GetEl('friends_private_messages') ) { oEl.style.display = g_hSelf['show_'+sMenu] ? 'block' : 'none'; } if(oEl = GetEl('inbox_alert_title_line') ) { ( g_hSelf['show_'+sMenu] ) ? oEl.classList.remove('active') : oEl.classList.add('active'); } } if(sMenu == 'online_friends' ) { if(oEl = GetEl('online_friend_count') ) { ( g_hSelf['show_'+sMenu] ) ? oEl.classList.remove('active') : oEl.classList.add('active'); } if(oEl = GetEl('online_friends_title') ) { oEl.innerHTML = g_hSelf['show_'+sMenu] ? 'Online Friends' : 'Friends'; } } if(sMenu == 'bookmarks' ) { if(oEl = GetEl('bookmarks_count') ) { ( g_hSelf['show_'+sMenu] ) ? oEl.classList.remove('active') : oEl.classList.add('active'); } if(oEl = GetEl('bookmarks_title') ) { oEl.innerHTML = 'Bookmarks'; } } var oEl; if(oEl = GetEl(sMenu + '_list_grip') ) { oEl.style.visibility = g_hSelf['show_'+sMenu] ? 'visible' : 'hidden'; }};function BuildJSONModelMap(){ var hModelMap = {}; for(var nUserId in g_hUsers ) { if ( ( g_hUsers[nUserId].access_level == FCS.FCLEVEL_MODEL ) && ( g_hUsers[nUserId].friend != 1 ) && ( g_hUsers[nUserId].state == FCS.FCVIDEO_OFFLINE || typeof(g_hUsers[nUserId]['state']) == 'undefined' ) ) { continue; } hModelMap[ nUserId ] = { username: g_hUsers[nUserId].username, friend: g_hUsers[nUserId].friend,
 state: g_hUsers[nUserId].state, access_level: g_hUsers[nUserId].access_level }; } try { s = JSON.stringify(hModelMap); } catch (e) { s = "{}"; } return s;}var DebugKeyCombo = {};function GlobalKeyPress(e){ if(! e ) { var e = window.event; } if(g_oAPopup && g_oAPopup.isOpen ) { if(e.keyCode == 27 ) alert("Press \"Enter\" to accept the terms."); else if(e.keyCode == 13 ) g_oAPopup.close(); } if(e.keyCode == 77 ) { LiveSnapImage.toggleMute(); } else if(e.keyCode == 27 ) { if(g_oDhtmlPopup.bIsOpen ) { g_oDhtmlPopup.close(); } } else if(e.ctrlKey && e.keyCode == 90 ) { if(DebugKeyCombo.nLastKey == 88 ) { DebugKeyCombo.nLastKey = null; if(g_bDebug ) { g_bDebug = false; DebugControls.Unload(); } else { g_bDebug = true; DebugControls.Load(); } } }
 else if(e.ctrlKey && e.keyCode == 88 ) { DebugKeyCombo.nLastKey = e.keyCode; }}var DhtmlWindowMode = { nApplicableBit: g_UA.desktop ? WINDOW_MODE_DESKTOP_DHTML : WINDOW_MODE_MOBILE_DHTML};DhtmlWindowMode.Set = function(setting ){ if(setting == 'toggle' ) { setting = ! ( g_hSelf.window_mode & DhtmlWindowMode.nApplicableBit ); document.getElementById('window_mode_select').value = setting ? 1 : 0; } if(setting == true ) { g_hSelf.window_mode = g_hSelf.window_mode | DhtmlWindowMode.nApplicableBit; } else { g_hSelf.window_mode = g_hSelf.window_mode ^ DhtmlWindowMode.nApplicableBit; } UserExtensions.Write('window_mode',g_hSelf.window_mode); if(! g_UA.desktop ) { DhtmlWindowMode.Checkbox(); }};DhtmlWindowMode.isActive = function(){ return g_hSelf.window_mode & DhtmlWindowMode.nApplicableBit;};DhtmlWindowMode.Checkbox = function(){ if(g_hPlatform.id == PLAT_MFC ) GetEl('use_mobile_site').style.display = "inline"; GetEl('dhtml_window_mode').style.display = "block"; if(g_hSelf.access_level >= FCS.FCLEVEL_BASIC ) { SetHTML('window_settings_link', t.A('user_settings',{ load: 'window_settings' }) + "windows</a>" ); } if(g_hSelf.window_mode & DhtmlWindowMode.nApplicableBit ) { GetEl('window_mode_select').value = 1; }};DhtmlWindowMode.CloseMessage = function(){ GetEl('dhtml_window_mode').style.display = "none";
};DhtmlWindowMode.GoToMobile = function(){ var hash = top.location.hash.substr(1,top.location.hash.length); var sUrl = 'https://m.' + t.g_hPlatform.domain + '/'; if(g_hQS['omp'] == 1 ) { sUrl += '?ue1000=default'; } sUrl += ( hash && hash != 'Homepage' ? ( 'models/' + hash ) : '' ); top.location.href=sUrl;};MenuSizing = {};MenuSizing.SetHeight = function(){ if(g_UA.mobile ) { return; } var hOption_to_Div_map = { bookmarks_list_height: 'bookmarks_list_scroll', personal_menu_list_height: 'personal_menu_list_wrapper', online_friends_list_height: 'online_friends_scroll', offline_friends_list_height: 'offline_friends_list_scroll' }; for(var sOpt in hOption_to_Div_map ) { var oEl = GetEl(hOption_to_Div_map[sOpt] ); if(g_hSelf[ sOpt ] && g_hSelf[ sOpt ] > -1 && oEl ) { oEl.style.height = g_hSelf[ sOpt ] + 'px'; } }};MenuSizing.SaveHeight = function(sGripId ){ if(! mfcClickDrag || ! mfcClickDrag.hAdjustmentResults || ! mfcClickDrag.hAdjustmentResults[sGripId] || ! mfcClickDrag.hAdjustmentResults[sGripId].Y || ! mfcClickDrag.hAdjustmentResults[sGripId].Y.height ) { return; } var sOptName = sGripId.replace(/_grip$/,'_height'); var sValue = -1; if(! mfcClickDrag.hAdjustmentResults[sGripId].Y.height.maximum )
 { sValue = mfcClickDrag.hAdjustmentResults[sGripId].Y.height.value; } var oEl; if(sOptName == 'bookmarks_list_height' && mfcClickDrag.hAdjustmentResults[sGripId].Y.height.maximum && ( oEl = GetEl('bookmarks_list_scroll') ) ) { oEl.style.height=''; } UserExtensions.Write(sOptName, sValue );};var BrowserHistoryControl = { aOutgoingKeyVals: [] };BrowserHistoryControl.Append = function(hState, sHash, hOutgoingState ){ if(g_UA.Opera ) { return; } hState = hState || {}; sHash = sHash || ''; hState.historic_call = 1; BrowserHistoryControl.aOutgoingKeyVals.push(hOutgoingState ); top.window.history.pushState(hState , window.document.title, '#' + sHash );};BrowserHistoryControl.Execute = function(e ){ if(g_UA.Opera ) { return; } if(e && e.state && e.state.load ) { var hState = e.state; var hOutgoingState = BrowserHistoryControl.aOutgoingKeyVals.pop(); for(var sParam in hOutgoingState ) { hState[ sParam ] = hOutgoingState[ sParam ]; } Load(e.state.load, hState ); }};
function GeneralError(sMessage ){ g_sGeneralErrorMessage = sMessage; WindowHandle.CallEach('player', function(oWin ) { if(oWin.OnlineBroadcasterList.Refresh ) oWin.OnlineBroadcasterList.Refresh(); } );}function InstantiateDhtmlPopup() { g_oDhtmlPopup = new MfcDhtmlPopup({ persistent: true, mfcMouseTracker: g_oMouseTracker, mfcGraphics: g }); g_oDhtmlPopup2 = new MfcDhtmlPopup({ persistent: true, instance_name: 'g_oDhtmlPopup2', mfcMouseTracker: g_oMouseTracker, mfcGraphics: g }); g_oDhtmlPopup_child = new MfcDhtmlPopup({ persistent: true, instance_name: 'popup_child', mfcMouseTracker: g_oMouseTracker, mfcGraphics: g });}var dhtmlPopop_TopCallback = {};dhtmlPopop_TopCallback.resize = function(sInstanceName, hSizeLoc ){ var hMainLoc = FindAbsoluteOffset('main'); hSizeLoc.top = ( hSizeLoc.top - hMainLoc.y ); hSizeLoc.left = ( hSizeLoc.left - hMainLoc.x ); hSizeLoc.left -= 16; if(window.player && player.g_bPlayerHTMLLoaded ) player.dhtmlPopop_PlayerCallback.resize(sInstanceName, hSizeLoc );};dhtmlPopop_TopCallback.close = function(sInstanceName )
{ if(window.player && player.g_bPlayerHTMLLoaded ) { setTimeou}, 0 ); }}function MFCShare_DhtmlMenu(opts ){ opts = opts || {};
 var nUserId = opts.user_id || window.g_nBroadcasterId || 0; var hUser = g_hUsers[ nUserId ]; var oWindow = opts.window || window; if(! oWindow.MFCShare_DhtmlMenu ) { oWindow.MFCShare_DhtmlMenu = {}; } if(oWindow.MFCShare_DhtmlMenu.popup && oWindow.MFCShare_DhtmlMenu.popup.bIsOpen ) { oWindow.MFCShare_DhtmlMenu.popup.close(); delete oWindow.MFCShare_DhtmlMenu.popup; return; } oWindow.MFCShare_DhtmlMenu.popup = new MfcDhtmlPopup({ instance_name: 'MFCShare_DhtmlMenu', window: oWindow, extra_content_style: 'padding:0px;', translucent_on_move: true }); var oWindow = opts.window || window; var sThingType = opts.thing_type || 'tipmenus'; var sSrc = '//share.myfreecams.com/iframes/' + sThingType + '/'; if(sThingType === 'albums' ) { sSrc += opts.thing; } else { sSrc += hUser.username + '/' + ( opts.slug || opts.thing || '' ); } sSrc += '?origin=www'; if(NightMode_Top.enabled ) { sSrc += '&color_scheme_dark=true'; } var height = oWindow.innerHeight > 2000 ? 800 : ( oWindow.innerHeight - 70 ); var width = 500; var sHtml = "<iframe id=MFCShare_DhtmlMenu_iframe name=MFCShare_DhtmlMenu_iframe frameborder=0 border=0 sr"+"c='" + sSrc + "' style=\"width:" + width + "px;height:" + height + "px;border-radius:5px;\"><\/iframe>"; var left = oWindow.innerWidth - width - ( g_hSelf['show_main_menu'] ? 208 : 17 ); oWindow.MFCShare_DhtmlMenu.popup.open(sHtml, { no_close_on_mouseout: true, no_close_button: true, outside_click_close: true, left: left, top:26, 'container_class': 'slide_from_right' });}t.MFCShare_DhtmlMenu.chatCardTplMods = function(tpl ){ if(tpl.card && tpl.card.url && tpl.card.url.match(/\/(a|m)\/(\w+)/) ) { var sThingType; var sThing = RegExp.$2; if(RegExp.$1 === 'a' ) sThingType = 'albums';
 if(RegExp.$1 === 'm' ) sThingType = 'clubs'; tpl.card.url = "javascript: t.MFCShare_DhtmlMenu({ thing_type: '" + sThingType + "', thing: '" + sThing + "', window: window });"; tpl.html = tpl.html.replace(/href=["']?{{url}}["']? target=["']?_blank["']?/g,'href="{{url}}"'); } return tpl;};window.addEventListener('message', (message) => { const { data } = message; if (typeof (data) !== 'object') { console.log('Message data is not an object'); return; } if (!(('type' in data) && data.type === 'mfcshare')) { console.log('Message is not originating from MFC Share',data); return; } if (!('action' in data)) throw new Error('Message data does not contain key `action`'); switch (data.action) { case 'close_ShareSearchiframe': if(ShareSearch ) { ShareSearch.NoMatches(); } break; case 'set_height_ShareSearchiframe': if(ShareSearch ) { ShareSearch.setIframeHeight(data.height ); } break; case 'closeTipmenu': for(var sK in g_hoPlayerWindows ) { var oPlayerWindow; if(( oPlayerWindow = WindowHandle.Get('player', sK ) ) && oPlayerWindow.MFCShare_DhtmlMenu ) { oPlayerWindow.MFCShare_DhtmlMenu.popup.close(); } } break; default: throw new Error('Action could not be found'); break; }});
var g_oResiz}function ResizeHandler(){ setTimeou},500);}var g_nTryOnLoadTimer = 0;var g_nFlashStatusTimer = 0;var g_bFlashMfcChatLoaded = false;var g_oFlashStatusFirstRun = null;var g_nLoadSetupTries = 0; function TryOnLoad() { clearTimeout(g_nTryOnLoadTimer);
 g_nLoadSetupTries++; if (g_sConnectionMode == 'flash') { if (typeof(zgw_XmlOnLoad) === 'function') zgw_XmlOnLoad(); else g_nTryOnLoadTimer = setTimeout(TryOnLoad, 50); } else if ( LoadAll ) { LoadAll(); } else { }}function mfcChatSwfLoaded(){ g_bFlashMfcChatLoaded = true; clearInterval(g_nFlashStatusTimer); TryOnLoad()};var InitialLoadingScreen = { containerId: 'initial_loading_container', messageContainerId: 'initial_loading_message_container', messageId: 'initial_loading_message', debugId: 'initial_loading_debug', hide: function() { if(InitialLoadingScreen.hidden ) { return; } var el; ( el = GetEl(InitialLoadingScreen.containerId) ) && ( el.style.display = "none" ); ( el = GetEl("main") ) && ( el.style.visibility = "visible" ); ( el = GetEl(InitialLoadingScreen.messageContainerId) ) && ( el.classList.add('post_load') ); InitialLoadingScreen.hidden = true; }, reveal: function() {
 if(! InitialLoadingScreen.hidden ) { return; } var el; ( el = GetEl(InitialLoadingScreen.containerId) ) && ( el.style.display = "block" ); InitialLoadingScreen.hidden = false; }, updateMessage: function(message,debug) { if ( ! message ) { if ( g_nConnectingMode == FCS.FCTYPE_CONNECTED ) { message = "Logged in! Seeing who's online"; } } var el; if(el = GetEl(InitialLoadingScreen.messageId) ) { el.style.display = 'block'; el.innerHTML = message; } var el; if(el = GetEl(InitialLoadingScreen.debugId) ) { if(debug ) el.innerHTML = debug; else el.innerHTML = g_sConnectionMode + " : " + SelectChatServer.sHost; } }};var g_oDhtmlPopup;var g_oDhtmlPopup2;var g_oDhtmlPopup_child;InstantiateDhtmlPopup();var popUserMenu = new PopUserMenu(t,{ persist: 1 });var hSidebarOptions = { bHideSidebarOnCustomization: false, aPanels: [ new MfcSidebarPanel({ nId: 1, sName: 'menu', bEnabled: true,
 bDisplayed: true, sSelector: '#main_menu_tr', fGetPanelTitle: function() { return 'Menu'; } }), new MfcSidebarPanel({ nId: 2, sName: 'online_friends', bEnabled: false, bDisplayed: true, sSelector: '#online_friends_tr', fGetPanelTitle: function() { return 'Online Friends'; } }), new MfcSidebarPanel({ nId: 3, sName: 'offline_friends', bEnabled: false, bDisplayed: false, sSelector: '#offline_friends_tr', fGetPanelTitle: function() { return 'Offline Friends'; } }), new MfcSidebarPanel({ nId: 4, sName: 'combined_panel', bEnabled: true, bDisplayed: true, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_4', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Combined Panel'; }, hEvents: { fCloneCompleted}, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('combined_panel', 'menu_extras_4'); else ExtraMenuSelector.Undisplay('combined_panel'); } } }), new MfcSidebarPanel({ nId: 6, sName: 'model_history', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_6',
 sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Recently Visited'; }, hEvents: { fCloneCompleted: function($el) { $el.find('#menu_extras_heading_6').text('Recently Visited Rooms'); $el.find('#menu_extras_selector_6').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('model_history', 'menu_extras_6'); else ExtraMenuSelector.Undisplay('model_history'); } } }), new MfcSidebarPanel({ nId: 7, sName: 'popular_rooms', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_7', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Most Popular Rooms'; }, hEvents: { fCloneCompleted: function($el) { $el.find('#menu_extras_heading_7').text('Most Popular Rooms'); $el.find('#menu_extras_selector_7').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('popular_rooms', 'menu_extras_7'); else ExtraMenuSelector.Undisplay('popular_rooms'); } } }), new MfcSidebarPanel({ nId: 8, sName: 'trending_rooms', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_8', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Trending Rooms'; }, hEvents: { fCloneCompleted: function($el) {
 $el.find('#menu_extras_heading_8').text('Trending Rooms'); $el.find('#menu_extras_selector_8').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('trending_rooms', 'menu_extras_8'); else ExtraMenuSelector.Undisplay('trending_rooms'); } } }), new MfcSidebarPanel({ nId: 9, sName: 'bookmarks', bEnabled: false, bDisplayed: true, sSelector: '#bookmarks_tr', fGetPanelTitle: function() { return 'Bookmarks'; } }) ], aDefaultOrder: [ 'menu', 'online_friends', 'bookmarks', 'combined_panel', 'recommend', 'custom_alerts', 'tags_topics', 'miss_mfc', 'popular_rooms', 'trending_rooms', 'model_history', 'offline_friends' ], hSelectors: { sSidebar: '#sidebar_panels_container', sCustomization: '#sidebar_customize_container', sToggleCustomizationLink: '#sidebar_toggle_customize', sPanelSortableDisplayedList: '#sidebar_panel_displayed_order_ul', sPanelSortableHiddenList: '#sidebar_panel_hidden_order_ul', sPanelSortableExtraList: '#sidebar_panel_extra_order_ul', sPanelSortableListContainment: '#sidebar_panel_order_container', sResetToDefaultsLink: '.sidebar_reset_to_defaults' },
 hEvents: { fShowCustomization: function() { $('#friends').scrollTop(0); $('#hide_menu_button, #sidebar_customize_hide_separator').hide(); $('#pm_options_position') .val(g_hSelf.floating_windows_list ? '1' : '0' ) .on('change'}); $('#show_pm_preview') .val(g_hSelf.show_pm_preview ? '1' : '0' ) .on('change', function() { UserExtensions.Write('show_pm_preview', parseInt(this.value) ); }); $('#header_display') .val(g_hSelf.show_header ? g_hSelf.show_header : '0' ) .on('change', function() { ToggleHeader({ show_header: this.value }); }); $('#auto_hide_menu') .val(g_hSelf.auto_hide_menu ? '1' : '0' ) .on('change', function() { UserExtensions.Write('auto_hide_menu', parseInt(this.value) ); }); var $sidebarCustomizationContainer = $('#sidebar_customize_container'); var $friends = $('#friends'); var $floatingWindowList = $('#floating_windows_list'); var $windowsListContainer = $('#windows_list_container'); var $tempPlaceholder = $('<div/>'); var nSidebarCustomizePos = $sidebarCustomizationContainer.height() + $sidebarCustomizationContainer.position().top; var nMoved = false; var fOnScroll = function(bForceOff) {
 if ( typeof(bForceOff) !== 'boolean' ) bForceOff = false; var nFriendsScrollTop = $friends.scrollTop(); if ( ( bForceOff ) || nFriendsScrollTop >= ( nSidebarCustomizePos - 16 ) ) { if ( nMoved ) { $tempPlaceholder.replaceWith($floatingWindowList); nMoved = false; } } else if ( ! nMoved ) { $floatingWindowList.replaceWith($tempPlaceholder); $windowsListContainer.append($floatingWindowList); nMoved = true; } }; $friends.data('mfcOnScroll', fOnScroll); $friends.on('scroll', fOnScroll); fOnScroll(); }, fHideCustomization: function() { $('#hide_menu_button, #sidebar_customize_hide_separator').show(); $('#pm_options_position').off('change'); $('#header_display').off('change'); var $friends = $('#friends'); var fOnScroll = $friends.data('mfcOnScroll'); $friends.removeData('mfcOnScroll'); $friends.off('scroll', fOnScroll); fOnScroll(true); }, fResetToDefaults: function() { $('#pm_options_position') .val(UserExtensions.hExtNamesToIds.floating_windows_list.default_value + '' ).trigger('change'); $('#header_display') .val(UserExtensions.hExtNamesToIds.show_header.default_value + '' ).trigger('change'); g_oSidebar.enablePanelByName('combined_panel');
 }, fSavePanelOrder: function() { if (g_hSelf.access_level >= FCS.FCLEVEL_BASIC) { var aDefault = g_oSidebar.getPanelDefaultConfig(); var sDefault = aDefault.toString(); var aNewOrder = g_oSidebar.getPanelConfig(); var sNewOrder = aNewOrder.toString(); if ( g_hSelf.sidebar_panel_order != sNewOrder ) { UserExtensions.Write('sidebar_panel_order', (sDefault == sNewOrder ? '' : sNewOrder) ); } } } }};if(g_hPlatform.id == PLAT_MFC ){ hSidebarOptions.aPanels.push(new MfcSidebarPanel({ nId: 5, sName: 'recommend', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_5', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle}, hEvents: { fCloneCompleted: function($el) { $el.find('#menu_extras_heading_5').text(g_hPlatform.Performer + 's You May Like'); $el.find('#menu_extras_selector_5').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('recommend', 'menu_extras_5'); else ExtraMenuSelector.Undisplay('recommend'); } } }) ); hSidebarOptions.aPanels.push(new MfcSidebarPanel({
 nId: 11, sName: 'miss_mfc', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_11', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle}, hEvents: { fCloneCompleted: function($el) { $el.find('#menu_extras_heading_11').text('Miss ' + g_hPlatform.name ); $el.find('#menu_extras_selector_11').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('miss_mfc', 'menu_extras_11'); else ExtraMenuSelector.Undisplay('miss_mfc'); } } }) ); hSidebarOptions.aPanels.push(new MfcSidebarPanel({ nId: 10, sName: 'custom_alerts', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_10', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Custom Selections'; }, hEvents: { fCloneCompleted: function($el) { $el.find('#menu_extras_heading_10').text('Custom Selections'); $el.find('#menu_extras_selector_10').hide(); }, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('custom_alerts', 'menu_extras_10'); else ExtraMenuSelector.Undisplay('custom_alerts'); } } }) ); hSidebarOptions.aPanels.push(new MfcSidebarPanel({
 nId: 13, sName: 'tags_topics', bEnabled: true, bDisplayed: false, sCloneSelector: '#extras_tr', sSelector: '#extras_tr_13', sTitleClass: 'MfcSidebarPanel_sTitleClass', fGetPanelTitle: function() { return 'Tags & Topics'; }, hEvents: { fCloneCompleted}, fDisplayedChange: function(bIsDisplayed) { if ( bIsDisplayed ) ExtraMenuSelector.Display('tags_topics', 'menu_extras_13'); else ExtraMenuSelector.Undisplay('tags_topics'); } } }) );}var g_oSidebar = new MfcSidebar(hSidebarOptions );var g_hClickDragConfig = { personal_menu_list_grip: { max_when_scrollfree: 1, onmouseup: MenuSizing.SaveHeight, subject_id: 'personal_menu_list_wrapper', hAdjustments: { Y: { height: { max:450 } } } }, online_friends_list_grip: { max_when_scrollfree: 1, onmouseup: MenuSizing.SaveHeight, subject_id: 'online_friends_scroll', hAdjustments: { Y: { height: { } } } }, offline_friends_list_grip: { max_when_scrollfree: 1, onmouseup: MenuSizing.SaveHeight, subject_id: 'offline_friends_list_scroll', hAdjustments: { Y: { height: { } } } }, bookmarks_list_grip: { max_when_scrollfree: 1,
 onmouseup: MenuSizing.SaveHeight, subject_id: 'bookmarks_list_scroll', hAdjustments: { Y: { height: { } } } }};for(var n = 0; n < hSidebarOptions.aPanels.length; n++ ){ var sName = hSidebarOptions.aPanels[n].hOptions.sName; with({ sName: sName }) { if(! g_hClickDragConfig[ sName + '_grip' ] ) { var sSubject = sName == 'combined_panel' ? 'menu_extras_4': ( sName + '_scroll' ); g_hClickDragConfig[ sName + '_grip' ] = { max_when_scrollfree: 0, onmouseup: MenuSizing.SaveHeight, subject_id: sSubject, hAdjustments: { Y: { height: { } } } }; } }}g_hClickDragConfig['model_history_grip'].max_when_scrollfree = 1;var mfcClickDrag = new MfcClickDrag(g_hClickDragConfig);var mfcSidebarPanelResize = { nSpacerTimer: 0, nDisplayTime: 3500, onmousedown: function(id) { clearTimeout(this.nSpacerTimer); this.toggleSpacerDisplay(true); mfcClickDrag.OnMouseDown(id); }, toggleSpacerDisplay: function(status) { var oEl = GetEl('sidebar_bottom_spacer'); oEl.style.display = ( status ? 'block' : 'none' ); }, onmouseup: function(e) { clearTimeout(this.nSpacerTimer); this.nSpacerTimer = setTimeou}, this.nDisplayTime); mfcClickDrag.OnMouseUp(e); }};
var g_hMousePressConfig = { 'personal_menu_list_grip': { left_click: { onmousedown: function (e) { mfcSidebarPanelResize.onmousedown('personal_menu_list_grip') }, onmousemove: function (e) { mfcClickDrag.OnMouseMove(e); }, onmouseup: function (e) { mfcSidebarPanelResize.onmouseup(e); }, onselectstart: function () { return false; } } }, 'online_friends_list_grip': { left_click: { onmousedown: function (e) { mfcSidebarPanelResize.onmousedown('online_friends_list_grip'); }, onmousemove: function (e) { mfcClickDrag.OnMouseMove(e); }, onmouseup: function (e) { mfcSidebarPanelResize.onmouseup(e); }, onselectstart: function () { return false; } } }, 'offline_friends_list_grip': { left_click: { onmousedown: function (e) { mfcSidebarPanelResize.onmousedown('offline_friends_list_grip'); }, onmousemove: function (e) { mfcClickDrag.OnMouseMove(e); }, onmouseup: function (e) { mfcSidebarPanelResize.onmouseup(e); }, onselectstart: function () { return false; } } }, 'bookmarks_list_grip': { left_click: { onmousedown}, onmousemove: function (e) { mfcClickDrag.OnMouseMove(e); }, onmouseup: function (e) { mfcSidebarPanelResize.onmouseup(e); }, onselectstart: function () { return false; } } }, 'user\\d+': { right_click: { onmousedown: function(e,sName) { if(sName.match(/user(\d+)/) ) popUserMenu.open(RegExp.$1, g_oDhtmlPopup ); } } }};for(var n = 0; n < hSidebarOptions.aPanels.length; n++ ){ var sName = hSidebarOptions.aPanels[n].hOptions.sName + '_grip'; if(! g_hMousePressConfig[ sName ] ) {
 g_hMousePressConfig[ sName ] = { left_click: { onmousedown: function ( sName ) { return function() { mfcSidebarPanelResize.onmousedown(sName ); }; }( sName ), onmousemove: function (e) { mfcClickDrag.OnMouseMove(e); }, onmouseup: function (e) { mfcSidebarPanelResize.onmouseup(e); }, onselectstart} } }; }}if(g_hMousePressConfig['popular_rooms_grip'] ) g_hMousePressConfig['popular_rooms_grip'].left_click.onmouseup = function (e) { mfcSidebarPanelResize.onmouseup(e); PopularRooms.Render(); };if(g_hMousePressConfig['trending_rooms_grip'] ) g_hMousePressConfig['trending_rooms_grip'].left_click.onmouseup = function (e) { mfcSidebarPanelResize.onmouseup(e); TrendingRooms.Render(); };if(g_hMousePressConfig['miss_mfc_grip'] ) g_hMousePressConfig['miss_mfc_grip'].left_click.onmouseup = function (e) { mfcSidebarPanelResize.onmouseup(e); MissMFC.Render(); };if(g_hMousePressConfig['recommend_grip'] ) g_hMousePressConfig['recommend_grip'].left_click.onmouseup = function (e) { mfcSidebarPanelResize.onmouseup(e); Recommend.DisplayRecommendations(); };if(g_hMousePressConfig['custom_alerts_grip'] ) g_hMousePressConfig['custom_alerts_grip'].left_click.onmouseup };if(g_hQS['disable_context_menu'] ) { g_hMousePressConfig = {}; }var mfcMousePress = new MfcMousePress(g_hMousePressConfig );var g_oFriendsProgressBar = new MfcProgressBar({ smoothing_resolution: 12, smoothing_time: 150, container_style: 'padding:1px;height:10px;border-radius: 2px;', container_class: 'MfcProgressBar_container_style', bar_class: 'MfcProgressBar_style', bar_style: 'height:10px;font-size:10px;border-radius: 2px;'});document.addEventListener("mousedown", function(e) { mfcMousePress.Down(e); } );document.addEventListener("mouseup", function(e) { mfcMousePress.Up(e); } );document.addEventListener("mouseout", function(e) { mfcMousePress.onMouseOut_FailSafe(e); } );document.addEventListener("keydown", GlobalKeyPress );top.window.onpopstate = BrowserHistoryControl.Execute;
if(g_UA.mobile ){ mfcMousePress.AttachEvents(); GetEl('friends').style.width = "173px"; GetEl('friends').style.minHeight = document.body.offsetHeight + "px"; if(g_UA.Silk ) GetEl('layout_table').style.width = document.documentElement.clientWidth + 'px';}{ var oEl = GetEl('friends'); oEl.style.display = "none"; oEl.style.overflow = "auto"; oEl.style.overflowX = "hidden"; GetEl('friend_content_div').style.position = "absolute"; GetEl('online_friends_tr').style.display = "none"; GetEl('offline_friends_tr').style.display = "none"; GetEl('offline_friends_list_wrapper').style.display = "none"; GetEl('outer_body').style.overflowY = "hidden";}window.addEventListener("resize", QueueResizeHandler, false);{ GetEl('friends_container').style.height = "100%";
}if(g_UA.Linux && g_UA.Firefox ){ GetEl('hide_menu_button').style.display = "none";}g_fBodyLoaded = true;SetHTML('main_menu','');if(g_bDebug ) { DebugControls.Load(); }SetupChatConnection();var g_oAPopup;if ( ( g_hQS['show_oapopup'] ) || ( g_hLegalNotice && g_hLegalNotice.landing ) || ( ! g_nAgeCheckRequired && ! g_hCk['guest_welcome'] && ! g_hCk['gw'] && ! g_hCk['username'] && ! g_hQS['skip_oapopup'] && g_hPlatform.id != PLAT_CAM )){ g_oAPopup = new OAPopup({ open: true, sitename: g_hPlatform.name, isLegacyIE}, isMobile: false, landing_legal_text: ( g_hLegalNotice && g_hLegalNotice.landing ) }); t.SetCookie('gw','1','Tue, 19-Jan-2038 00:00:00 GMT','/',t.g_hPlatform.domain);}LoginTimer.checkPoint('Top Loaded');