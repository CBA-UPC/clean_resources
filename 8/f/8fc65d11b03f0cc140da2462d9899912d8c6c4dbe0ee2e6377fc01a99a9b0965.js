import{isTemplatePartActive as i}from"./template.js";const T=133;export function removeNodesFromTemplate(t,l){const{element:{content},parts:o}=t;const i=document.createTreeWalker(content,T,null,false);let u=k(o);let part=o[u];let p=-1;let m=0;const h=[];let N=null;while(i.nextNode()){p++;const node=i.currentNode;if(node.previousSibling===N){N=null}if(l.has(node)){h.push(node);if(N===null){N=node}}if(N!==null){m++}while(part!==undefined&&part.index===p){part.index=N!==null?-1:part.index-m;u=k(o,u);part=o[u]}}h.forEach(}const N=node=>{let count=node.nodeType===11?0:1;const t=document.createTreeWalker(node,T,null,false);while(t.nextNode()){count++}return count};const k=(t,l=-1)=>{for(let o=l+1;o<t.length;o++){const part=t[o];if(i(part)){return o}}return-1};export function insertNodeIntoTemplate(t,node,l=null){const{element:{content},parts:o}=t;if(l===null||l===undefined){content.appendChild(node);return}const i=document.createTreeWalker(content,T,null,false);let u=k(o);let p=0;let m=-1;while(i.nextNode()){m++;const h=i.currentNode;if(h===l){p=N(node);l.parentNode.insertBefore(node,l)}while(u!==-1&&o[u].index===m){if(p>0){while(u!==-1){o[u].index+=p;u=k(o,u)}return}u=k(o,u)}}}