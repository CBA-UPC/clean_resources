!function(){"use strict";var e={402:645:15:function(e){.exports=,379:,t={};.n=n.d=n.o=function(){var e=n(379),t=n.n(e),r=n(402);function o(e){var t=window.location.origin,n="gwc_cvc_".concat(t+e));return console.log("[GWC][VP] > cookie - generate cookie after closed snapped video, name:",n),n}function i(e){var t=new Date;t.setTime(t.getTime()+18e5),document.cookie="".concat(o(e),"=true; expires= ").concat(t.toGMTString(),"; path=/"),console.log("[GWC][VP] > cookie - setted cookie after closed snapped video, name:")}function a(e){var t=o(e);return document.cookie.indexOf(t)>-1}(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var d=/^http(s)?:\/\/(www\d?.|test\d?.video?.|test\d?.|pre.|test-www.)?(ilgusto.|lastampa.|espresso.(repubblica.)?|repubblica.|video.repubblica.|video.lastampa.|video.ilsecoloxix.|ilsecoloxix.|video.huffingtonpost.|huffingtonpost.|ilpiccolo.gelocal.|video.ilpiccolo.gelocal.|messaggeroveneto.gelocal.|video.messaggeroveneto.gelocal.|tribunatreviso.gelocal.|video.tribunatreviso.gelocal.|nuovavenezia.gelocal.|video.nuovavenezia.gelocal.|corrierealpi.gelocal.|video.corrierealpi.gelocal.|mattinopadova.gelocal.|video.mattinopadova.gelocal.|lasentinella.gelocal.|video.lasentinella.gelocal.|gazzettadimantova.gelocal.|video.gazzettadimantova.gelocal.|laprovinciapavese.gelocal.|video.laprovinciapavese.gelocal.|video.nordesteconomia.gelocal.|nordesteconomia.gelocal.|lazampa.|themeditelegraph.|alfemminile.|limesonline.)(it|com)?(\/.+)?/,p=function(e,t){var n="gdwc_to_ifr_gelepmv:2,"+t+",player_type:"+e.type;try{var r=e.getIframe().contentWindow;console.log("[GWC][VP][PM_DEBUG] send message",n,e.status,e.getIframe()),r.postMessage&&r.postMessage(n,"*")}catch(t){console.error("[GWC][VP] error: an error occurred when try send a message (".concat(n,") to player"),e,t)}},u={widthCustomVar:getComputedStyle(document.body).getPropertyValue("--sticky-video-width"),defaultWidth:"400",stickyWidth:function(){return u.widthCustomVar.length>0?parseInt(u.widthCustomVar.replace("px","")):u.defaultWidth},notDomination:function(e){var t=window.innerWidth,n=getComputedStyle(document.body).getPropertyValue("--max-width").replace("px",""),r=(t-parseInt(n))/2,o=getComputedStyle(document.body).getPropertyValue("--sticky-video-width").replace("px","");t<=n||(o/2+15>r?e.querySelector(".video-frame__wrapper").style.marginRight="15px":(console.log("STICKY_TEST 2",o),e.querySelector(".video-frame__wrapper").style.left=o+"px"))},mobileStickyXPos:function(e){var t=30*window.innerHeight/100,n=Math.ceil(t/9*16);return n>window.innerWidth?(e.querySelector(".video-frame__wrapper").style.height="".concat(e.querySelector(".video-frame__wrapper").offsetWidth/16*9,"px"),console.log("[GWC] STICKY MOBILE GET 90% WIDTH",window.innerWidth),0):(e.querySelector(".video-frame__wrapper").style.width="".concat(n,"px"),e.querySelector(".video-frame__wrapper").style.height="".concat(n/16*9,"px"),console.log("[GWC] STICKY MOBILE GET 30% HEIGHT AND ADD WIDTH",n),0)},stickyXpos:closeSticky:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.setAttribute("snapped",""),e.querySelector(".video-frame__wrapper").style.left=0,e.querySelector(".video-frame__wrapper").style.height="auto",t&&i(e.id)},moveSticky:function(e){try{var t=document.getElementById("adv-Piede-sticky");t&&t.classList.remove("is-sticky")}catch(e){}window.innerWidth<=768?e.querySelector(".video-frame__wrapper").style.left="".concat(u.stickyXpos(e),"px"):!document.getElementsByClassName("has_domination").length>0&&u.notDomination(e)}},f=function(e){e.setAttribute("snapped","true"),u.moveSticky(e),e.querySelector(".video-sticky__close").addEventListener("click",(),console.log("[GWC] STICKY CONFIG",u.test),p(e,"message:snapevent,el:"+e.id)},y=function(e){e.getAttribute("snapped")&&"true"===e.getAttribute("snapped")&&(u.closeSticky(e),p(e,"message:desnapevent,el:"+e.id))},A={},g={},v={isAPlayerPlaying:!1,firstPlayerPlayDirectInDom:"",playerToPlayWhenIsLoaded:!1,pausePlayingPlayers:function(e){for(var t in A){var n=A[t];if(t!==e&&n.isRendered)try{n.pause(),y(n)}catch(e){console.log("[GWC][VP] error: an error occurred when try to put player (".concat(n.getAttribute("id"),") in pause"),e)}}},playerPlaying:function(e){v.pausePlayingPlayers(e),console.log("[GWC][VP] wcHandler playerPlaying",e),v.isAPlayerPlaying=e,v.firstPlayerPlayDirectInDom.length>0&&v.firstPlayerPlayDirectInDom===e&&(v.firstPlayerPlayDirectInDom=""),v.trigger("playerPlaying",e)},playerPaused:function(e){console.log("[GWC][VP] wcHandler playerPaused",e),v.isAPlayerPlaying&&v.isAPlayerPlaying===e&&(v.isAPlayerPlaying=!1,v.trigger("playerPaused",e))},playerEnded:function(e){console.log("[GWC][VP] wcHandler playerEnded",e),v.isAPlayerPlaying&&v.isAPlayerPlaying===e&&(v.isAPlayerPlaying=!1,v.trigger("playerEnded",e));var t=v.getPlayer(e);t.getAttribute("snapped")&&"true"===t.getAttribute("snapped")&&y(t)},playerMuted:function(e){v.isAPlayerPlaying&&v.isAPlayerPlaying===e&&v.trigger("playerMuted",e)},playerUnmuted:function(e){v.isAPlayerPlaying&&v.isAPlayerPlaying===e&&v.trigger("playerUnmuted",e)},getPlayers:getPlayer:getPlayingPlayer:registerPlayer:on:off:function(e,t){if(g.hasOwnProperty(e)){var n=-1;g[e].forEach((function(e,r){e.toString()===t.toString()&&(n=r)})),n>-1&&g[e].splice(n,1)}},trigger:function(e,t){if(g.hasOwnProperty(e))for(var n=0;n<g[e].length;n++)"function"==typeof g[e][n]&&g[e][n](t)}},m={sticky:{isSticky:!0,renderDirect:!1,playDirect:!1,params:"autostart=true&vpa=auto&wpm&type=sticky",onMobile:!0},piastrone_sticky:{isSticky:!0,renderDirect:!1,playDirect:!1,params:"autostart=true&vpa=auto&wpm&type=piastrone_sticky",onMobile:!0},piastrone:{isSticky:!1,renderDirect:!0,playDirect:!0,params:"autostart=true&vpa=auto&wpm&nomzvpl_pia&type=piastrone",onMobile:!0},article_detail:{isSticky:!1,renderDirect:!1,playDirect:!0,params:"autostart=true&vpa=auto&wpm&nomzvpl&type=article_detail",onMobile:!1},home_spalla:{isSticky:!1,renderDirect:!1,playDirect:!0,params:"autostart=true&vpa=auto&wpm&nomzvpl_hs&type=home_spalla",onMobile:!1},open_video:{isSticky:!0,renderDirect:!0,playDirect:!0,params:"autostart=true&vpa=auto&wpm&nomzvpl_ap&type=open_video",onMobile:!0},standard:{isSticky:!1,renderDirect:!1,playDirect:!1,params:"autostart=false&vpa=click&type=standard",onMobile:!0}};unction(e){!c,e);var t,n,r,o,i,s=(t=c,n=_(),;function c(){var e;return this,c),(e=s.call(this)).isRendered=!1,e.iframeEl=!1,e._muted=!0,e}return r=c,i=[{key:"observedAttributes",get:],(o=[{key:"id",get:function(){return this.getAttribute("id")}},{key:"status",get:set:,{key:"muted",get:set:function(e){this._muted=e,e?v.playerMuted(this.id):v.playerUnmuted(this.id)}},{key:"src",get:,{key:"attributeChangedCallback",value:function(e,t,n){if("status"===e&&t!==n)switch(console.log("[GWC] attributeChangedCallback status = "+n,this.id),n){case"iframeready":!this.config.playDirect&&v.playerToPlayWhenIsLoaded!==this.id||v.isAPlayerPlaying||a(this.id)||(this.play(),v.playerToPlayWhenIsLoaded=!1,console.log("[GWC] DIRECT PLAY",this.type)),this.setAttribute("class","is-ready");break;case"play":v.playerPlaying(this.id);break;case"pause":v.playerPaused(this.id);break;case"ended":v.playerEnded(this.id)}}},{key:"connectedCallback",value:function(){if(this.status="not_initialized",this.type=this.getAttribute("type"),this.config=m[this.type],window.KW_trackingDataLayer&&window.KW_trackingDataLayer.hasOwnProperty("noadv_product_active")&&("true"===window.KW_trackingDataLayer.noadv_product_active||!0===window.KW_trackingDataLayer.noadv_product_active)&&this.config.isSticky&&(this.setAttribute("type","standard"),this.setAttribute("old-type","sticky-with-noadv-enabled"),this.type="standard",this.config=m[this.type]),"mobile"!==window.wt_device_type||this.config.onMobile){this.config.playDirect&&0===v.firstPlayerPlayDirectInDom.length&&(v.firstPlayerPlayDirectInDom=this.id),console.log("[GWC][VP] connectedCallback",this),v.registerPlayer(this.id,this);var e=this.config;!function(e,t,n,r){var o={root:null,isSnapped:!1,viewed:!1,rootMargin:"0px",threshold:[0,.25,.5,.75,1]},i=function(e,i){e.forEach((function(e){"play"!==e.target.status||t?(n&&!e.target.isRendered&&e.target.render(),e.intersectionRatio>.2&&(o.viewed=!0,e.target.isRendered||e.target.render(),!t)?i.unobserve(e.target):!t||o.isSnapped||!o.viewed||t&&0!==window.kwdnt||(v.firstPlayerPlayDirectInDom.length>0&&v.firstPlayerPlayDirectInDom!==e.target.id?i.unobserve(e.target):0!==e.intersectionRatio||a(e.target.id)||(o.isSnapped=!0,v.isAPlayerPlaying?r&&(f(e.target),i.unobserve(e.target)):(f(e.target),"not_initialized"!==e.target.status?e.target.play():v.playerToPlayWhenIsLoaded=e.target.id,i.unobserve(e.target))))):i.unobserve(e.target)}))};if("IntersectionObserver"in window)new IntersectionObserver(i,o).observe(e);else{var s=document.getElementsByTagName("head")[0],c=document.createElement("script");c.type="text/javascript",c.src="https://www.repstatic.it/cless/common/stable/js/vendor/intersection-observer/polyfill.js",s.appendChild(c),c.onload=function(){new IntersectionObserver(i,o).observe(e)}}}(this,e.isSticky,e.renderDirect,e.playDirect)}}},{key:"play",value:function(){v.firstPlayerPlayDirectInDom.length>0&&v.firstPlayerPlayDirectInDom!==this.id||p(this,"message:manualstart,el:"+this.id)}},{key:"pause",value:function(){p(this,"message:manualpause,el:"+this.id)}},{key:"render",value:function(){var e=function(e,t){var n=e;return n=-1===(n=(n=(n=(n=(n=(n=(n=(n=(n=(n=(n=n.replace("&wpm","")).replace("&autostart=false","")).replace("&autostart=true","")).replace("&dp","")).replace("&nomzvpl","")).replace("&nomzvpl_pia","")).replace("&nomzvpl_ap","")).replace("&mode=embed","")).replace("&pl_listen=true","")).replace("&pm=true","")).replace("&responsive=true","")).indexOf("?")?n+"?":n+"&",n+=t,window===window.top&&(n+="&w_t_pagehref="+window.location.origin+window.location.pathname),n}(this.src,this.config.params);if(this.innerHTML+='\n    <div class="video-frame__wrapper">\n      <button class="video-sticky__close"></button>\n      <iframe allowfullscreen scrolling="no" frameborder="0" src="'.concat(e,'"></iframe>\n    </div>\n  '),this.isRendered=!0,console.log("[GWC][VP] render function executed"),document.querySelectorAll("#"+this.id).length>1)for(var t=0;t<=document.querySelectorAll("#"+this.id).length;t++)if("standard"===document.querySelectorAll("#"+this.id)[t].type){var n=document.querySelectorAll("#"+this.id)[t];n.setAttribute("status","iframeredy"),n.setAttribute("class","is-ready"),console.log("[GWC][VP] render function executed duplicated",n)}}},{key:"getIframe",value:,{key:"postMessagesListener",value:function(e){e.hasOwnProperty("playerEvent")?this.status=e.playerEvent:e.hasOwnProperty("audioEvent")&&e.hasOwnProperty("muted")&&(this.muted="true"===e.muted)}}])&&h(r.prototype,o),i&&h(r,i),Object.defineProperty(r,"prototype",{writable:!1}),c}(b(HTMLElement));customElements.define("gdwc-video-component",P),window.kw_wcPlayerHandler=v,window.addEventListener("message",(function(e){var t=function(e,t){try{var n=d.test(e),r=e.indexOf("pmgsport.it")>-1;return(n||r)&&t.indexOf("gdwc_gelepmv")>-1}catch(e){return console.log("error pm_player_to_container checkOrigin",e),!1}}(e.origin,e.data);if(t){console.log("[GWC][VP][PM] postMessagesHandler onMessage",e.data);var n=e.data.split(",").reduce((function(e,t){var n=t.split(":");return c(c({},e),{},{[n[0]]:n[1]})}),{});if(n.hasOwnProperty("el")&&n.el.length>0){var r=v.getPlayer(n.el);r&&r.postMessagesListener(n)}}}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,