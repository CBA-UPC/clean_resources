// Generated by CoffeeScript 1.6.2
/*!
jQuery Waypoints - v2.0.5
Copyright (c) 2011-2014 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt
*/
(function(){var t=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++){if(e in this&&this[e]===t)return e}return-1},e=[].slice;(function(t,e){if(typeof define==="function"&&define.amd){return define("waypoints",["jquery"],function(n){return e(n,t)})}else{return e(t.jQuery,t)}})(window,function(n,r){var i,o,l,s,f,u,c,a,h,d,p,y,v,w,g,m;i=n(r);a=t.call(r,"ontouchstart")>=0;s={horizontal:{},vertical:{}};f=1;c={};u="waypoints-context-id";p="resize.waypoints";y="scroll.waypoints";v=1;w="waypoints-waypoint-ids";g="waypoint";m="waypoints";o=function(){function t(t){var e=this;this.$element=t;this.element=t[0];this.didResize=false;this.didScroll=false;this.id="context"+f++;this.oldScroll={x:t.scrollLeft(),y:t.scrollTop()};this.waypoints={horizontal:{},vertical:{}};this.element[u]=this.id;c[this.id]=this;t.bind(y,function(){var t;if(!(e.didScroll||a)){e.didScroll=true;t=function(){e.doScroll();return e.didScroll=false};return r.setTimeout(t,n[m].settings.scrollThrottle)}});t.bind(p,function(){var t;if(!e.didResize){e.didResize=true;t=function(){n[m]("refresh");return e.didResize=false};return r.setTimeout(t,n[m].settings.resizeThrottle)}})}t.prototype.doScroll=function(){var t,e=this;t={horizontal:{newScroll:this.$element.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.$element.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};if(a&&(!t.vertical.oldScroll||!t.vertical.newScroll)){n[m]("refresh")}n.each(t,function(t,r){var i,o,l;l=[];o=r.newScroll>r.oldScroll;i=o?r.forward:r.backward;n.each(e.waypoints[t],function(t,e){var n,i;if(r.oldScroll<(n=e.offset)&&n<=r.newScroll){return l.push(e)}else if(r.newScroll<(i=e.offset)&&i<=r.oldScroll){return l.push(e)}});l.sort(function(t,e){return t.offset-e.offset});if(!o){l.reverse()}return n.each(l,function(t,e){if(e.options.continuous||t===l.length-1){return e.trigger([i])}})});return this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}};t.prototype.refresh=function(){var t,e,r,i=this;r=n.isWindow(this.element);e=this.$element.offset();this.doScroll();t={horizontal:{contextOffset:r?0:e.left,contextScroll:r?0:this.oldScroll.x,contextDimension:this.$element.width(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:r?0:e.top,contextScroll:r?0:this.oldScroll.y,contextDimension:r?n[m]("viewportHeight"):this.$element.height(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};return n.each(t,function(t,e){return n.each(i.waypoints[t],function(t,r){var i,o,l,s,f;i=r.options.offset;l=r.offset;o=n.isWindow(r.element)?0:r.$element.offset()[e.offsetProp];if(n.isFunction(i)){i=i.apply(r.element)}else if(typeof i==="string"){i=parseFloat(i);if(r.options.offset.indexOf("%")>-1){i=Math.ceil(e.contextDimension*i/100)}}r.offset=o-e.contextOffset+e.contextScroll-i;if(r.options.onlyOnScroll&&l!=null||!r.enabled){return}if(l!==null&&l<(s=e.oldScroll)&&s<=r.offset){return r.trigger([e.backward])}else if(l!==null&&l>(f=e.oldScroll)&&f>=r.offset){return r.trigger([e.forward])}else if(l===null&&e.oldScroll>=r.offset){return r.trigger([e.forward])}})})};t.prototype.checkEmpty=function(){if(n.isEmptyObject(this.waypoints.horizontal)&&n.isEmptyObject(this.waypoints.vertical)){this.$element.unbind([p,y].join(" "));return delete c[this.id]}};return t}();l=function(){function t(t,e,r){var i,o;if(r.offset==="bottom-in-view"){r.offset=function(){var t;t=n[m]("viewportHeight");if(!n.isWindow(e.element)){t=e.$element.height()}return t-n(this).outerHeight()}}this.$element=t;this.element=t[0];this.axis=r.horizontal?"horizontal":"vertical";this.callback=r.handler;this.context=e;this.enabled=r.enabled;this.id="waypoints"+v++;this.offset=null;this.options=r;e.waypoints[this.axis][this.id]=this;s[this.axis][this.id]=this;i=(o=this.element[w])!=null?o:[];i.push(this.id);this.element[w]=i}t.prototype.trigger=function(t){if(!this.enabled){return}if(this.callback!=null){this.callback.apply(this.element,t)}if(this.options.triggerOnce){return this.destroy()}};t.prototype.disable=function(){return this.enabled=false};t.prototype.enable=function(){this.context.refresh();return this.enabled=true};t.prototype.destroy=function(){delete s[this.axis][this.id];delete this.context.waypoints[this.axis][this.id];return this.context.checkEmpty()};t.getWaypointsByElement=function(t){var e,r;r=t[w];if(!r){return[]}e=n.extend({},s.horizontal,s.vertical);return n.map(r,function(t){return e[t]})};return t}();d={init:function(t,e){var r;e=n.extend({},n.fn[g].defaults,e);if((r=e.handler)==null){e.handler=t}this.each(function(){var t,r,i,s;t=n(this);i=(s=e.context)!=null?s:n.fn[g].defaults.context;if(!n.isWindow(i)){i=t.closest(i)}i=n(i);r=c[i[0][u]];if(!r){r=new o(i)}return new l(t,r,e)});n[m]("refresh");return this},disable:function(){return d._invoke.call(this,"disable")},enable:function(){return d._invoke.call(this,"enable")},destroy:function(){return d._invoke.call(this,"destroy")},prev:function(t,e){return d._traverse.call(this,t,e,function(t,e,n){if(e>0){return t.push(n[e-1])}})},next:function(t,e){return d._traverse.call(this,t,e,function(t,e,n){if(e<n.length-1){return t.push(n[e+1])}})},_traverse:function(t,e,i){var o,l;if(t==null){t="vertical"}if(e==null){e=r}l=h.aggregate(e);o=[];this.each(function(){var e;e=n.inArray(this,l[t]);return i(o,e,l[t])});return this.pushStack(o)},_invoke:function(t){this.each(function(){var e;e=l.getWaypointsByElement(this);return n.each(e,function(e,n){n[t]();return true})});return this}};n.fn[g]=function(){var t,r;r=arguments[0],t=2<=arguments.length?e.call(arguments,1):[];if(d[r]){return d[r].apply(this,t)}else if(n.isFunction(r)){return d.init.apply(this,arguments)}else if(n.isPlainObject(r)){return d.init.apply(this,[null,r])}else if(!r){return n.error("jQuery Waypoints needs a callback function or handler option.")}else{return n.error("The "+r+" method does not exist in jQuery Waypoints.")}};n.fn[g].defaults={context:r,continuous:true,enabled:true,horizontal:false,offset:0,triggerOnce:false};h={refresh:function(){return n.each(c,function(t,e){return e.refresh()})},viewportHeight:function(){var t;return(t=r.innerHeight)!=null?t:i.height()},aggregate:function(t){var e,r,i;e=s;if(t){e=(i=c[n(t)[0][u]])!=null?i.waypoints:void 0}if(!e){return[]}r={horizontal:[],vertical:[]};n.each(r,function(t,i){n.each(e[t],function(t,e){return i.push(e)});i.sort(function(t,e){return t.offset-e.offset});r[t]=n.map(i,function(t){return t.element});return r[t]=n.unique(r[t])});return r},above:function(t){if(t==null){t=r}return h._filter(t,"vertical",function(t,e){return e.offset<=t.oldScroll.y})},below:function(t){if(t==null){t=r}return h._filter(t,"vertical",function(t,e){return e.offset>t.oldScroll.y})},left:function(t){if(t==null){t=r}return h._filter(t,"horizontal",function(t,e){return e.offset<=t.oldScroll.x})},right:function(t){if(t==null){t=r}return h._filter(t,"horizontal",function(t,e){return e.offset>t.oldScroll.x})},enable:function(){return h._invoke("enable")},disable:function(){return h._invoke("disable")},destroy:function(){return h._invoke("destroy")},extendFn:function(t,e){return d[t]=e},_invoke:function(t){var e;e=n.extend({},s.vertical,s.horizontal);return n.each(e,function(e,n){n[t]();return true})},_filter:function(t,e,r){var i,o;i=c[n(t)[0][u]];if(!i){return[]}o=[];n.each(i.waypoints[e],function(t,e){if(r(i,e)){return o.push(e)}});o.sort(function(t,e){return t.offset-e.offset});return n.map(o,function(t){return t.element})}};n[m]=function(){var t,n;n=arguments[0],t=2<=arguments.length?e.call(arguments,1):[];if(h[n]){return h[n].apply(null,t)}else{return h.aggregate.call(null,n)}};n[m].settings={resizeThrottle:100,scrollThrottle:30};return i.on("load.waypoints",function(){return n[m]("refresh")})})}).call(this); 10);

            if(maxzindex < elementzindex){
              maxzindex = elementzindex;
            }
          }
        }

        zindexvalues[el.id] = maxzindex;

        // Add z-index to the background
        if (options.background) {
          if (zindexvalues[el.id] > 0) {
            $('#' + el.id + '_background').css({
              zIndex: (zindexvalues[el.id] + 1)
            });
          }
        }

        // Add z-index to the wrapper
        if (zindexvalues[el.id] > 0) {
          $wrapper.css({
            zIndex: (zindexvalues[el.id] + 2)
          });
        }
      }

      if (options.detach) {
        $wrapper.prepend(el);
        $el.show();
      } else {
        $wrapper.show();
      }

      opentimer = setTimeout(function() {
        $wrapper.css({
          visibility: 'visible',
          opacity: 1
        });

        $('html').addClass('popup_visible').addClass('popup_visible_' + el.id);
        $wrapper.addClass('popup_wrapper_visible');
      }, 20); // 20ms required for opening animation to occur in FF

      // Disable background layer scrolling when popup is opened
      if (options.scrolllock) {
        $body.css('overflow', 'hidden');
        if ($body.height() > $window.height()) {
          $body.css('margin-right', bodymarginright + scrollbarwidth);
        }
      }

      if(options.backgroundactive){
        //calculates the vertical align
        $el.css({
          top:(
            $window.height() - (
              $el.get(0).offsetHeight +
              parseInt($el.css('margin-top'), 10) +
              parseInt($el.css('margin-bottom'), 10)
            )
          )/2 +'px'
        });
      }

      $el.css({
        'visibility': 'visible',
        'opacity': 1
      });

      // Show background
      if (options.background) {
        $background.css({
          'visibility': 'visible',
          'opacity': options.opacity
        });

        // Fix IE8 issue with background not appearing
        setTimeout(function() {
          $background.css({
            'opacity': options.opacity
          });
        }, 0);
      }

      $el.data('popup-visible', true);

      // Position popup
      methods.reposition(el, ordinal);

      // Remember which element had focus before opening a popup
      $el.data('focusedelementbeforepopup', document.activeElement);

      // Handler: Keep focus inside dialog box
      if (options.keepfocus) {
        // Make holder div focusable
        $el.attr('tabindex', -1);

        // Focus popup or user specified element.
        // Initial timeout of 50ms is set to give some time to popup to show after clicking on
        // `open` element, and after animation is complete to prevent background scrolling.
        setTimeout(function() {
          if (options.focuselement === 'closebutton') {
            $('#' + el.id + ' .' + el.id + closesuffix + ':first').focus();
          } else if (options.focuselement) {
            $(options.focuselement).focus();
          } else {
            $el.focus();
            $el.data('focusedelementbeforepopup').focus()
          }
        }, options.focusdelay);

      }

      // Hide main content from screen readers
      $(options.pagecontainer).attr('aria-hidden', true);

      // Reveal popup content to screen readers
      $el.attr('aria-hidden', false);

      callback(el, ordinal, options.onopen);

      if (transitionsupport) {
        $wrapper.one('transitionend', function() {
          callback(el, ordinal, options.opentransitionend);
        });
      } else {
        callback(el, ordinal, options.opentransitionend);
      }

      // Handler: Reposition tooltip when window is resized
      if (options.type == 'tooltip') {
        $(window).on('resize.' + el.id, function () {
          methods.reposition(el, ordinal);
        });
      }
      $body.css('overflow-y', 'hidden');
    },

    /**
     * Hide method
     *
     * @param object el - popup instance DOM node
     * @param boolean outerClick - click on the outer content below popup
     */
    hide: function (el, outerClick) {
      // Get index of popup ID inside of visiblePopupsArray
      var popupIdIndex = $.inArray(el.id, visiblePopupsArray);

      // If popup is not opened, ignore the rest of the function
      if (popupIdIndex === -1) {
        return;
      }

      if(opentimer) clearTimeout(opentimer);

      var $body = $('body');
      var $el = $(el);
      var options = $el.data('popupoptions');
      var $wrapper = $('#' + el.id + '_wrapper');
      var $background = $('#' + el.id + '_background');

      $el.data('popup-visible', false);

      if (visiblePopupsArray.length === 1) {
        $('html').removeClass('popup_visible').removeClass('popup_visible_' + el.id);
      } else {
        if($('html').hasClass('popup_visible_' + el.id)) {
          $('html').removeClass('popup_visible_' + el.id);
        }
      }

      // Remove popup from the visiblePopupsArray
      visiblePopupsArray.splice(popupIdIndex, 1);

      if($wrapper.hasClass('popup_wrapper_visible')) {
        $wrapper.removeClass('popup_wrapper_visible');
      }

      // Focus back on saved element
      if (options.keepfocus && !outerClick) {
        setTimeout(function() {
          if ($($el.data('focusedelementbeforepopup')).is(':visible')) {
            $el.data('focusedelementbeforepopup').focus();
          }
        }, 0);
      }

      // Hide popup
      $wrapper.css({
        'visibility': 'hidden',
        'opacity': 0
      });
      $el.css({
        'visibility': 'hidden',
        'opacity': 0
      });

      // Hide background
      if (options.background) {
        $background.css({
          'visibility': 'hidden',
          'opacity': 0
        });
      }

      // Reveal main content to screen readers
      $(options.pagecontainer).attr('aria-hidden', false);

      // Hide popup content from screen readers
      $el.attr('aria-hidden', true);

      // `onclose` callback event
      callback(el, lastclicked[el.id], options.onclose);

      if (transitionsupport && $el.css('transition-duration') !== '0s') {
        $el.one('transitionend', function(e) {

          if (!($el.data('popup-visible'))) {
            if (options.detach) {
              $el.hide().detach();
            } else {
              $wrapper.hide();
            }
          }

          // Re-enable scrolling of background layer
          if (options.scrolllock) {
            setTimeout(function() {
              $body.css({
                overflow: 'visible',
                'margin-right': bodymarginright
              });
            }, 10); // 10ms added for CSS transition in Firefox which doesn't like overflow:auto
          }

          callback(el, lastclicked[el.id], options.closetransitionend);
        });
      } else {
        if (options.detach) {
          $el.hide().detach();
        } else {
          $wrapper.hide();
        }

        // Re-enable scrolling of background layer
        if (options.scrolllock) {
          setTimeout(function() {
            $body.css({
              overflow: 'visible',
              'margin-right': bodymarginright
            });
          }, 10); // 10ms added for CSS transition in Firefox which doesn't like overflow:auto
        }

        callback(el, lastclicked[el.id], options.closetransitionend);
      }

      if (options.type == 'tooltip') {
        $(window).off('resize.' + el.id);
      }
      $body.css('overflow-y', 'auto');
    },

    /**
     * Toggle method
     *
     * @param {object} el - popup instance DOM node
     * @param {number} ordinal - order number of an `open` element
     */
    toggle: function (el, ordinal) {
      if ($(el).data('popup-visible')) {
        methods.hide(el);
      } else {
        setTimeout(function() {
          methods.show(el, ordinal);
        }, 0);
      }
    },

    /**
     * Reposition method
     *
     * @param {object} el - popup instance DOM node
     * @param {number} ordinal - order number of an `open` element
     */
    reposition: function (el, ordinal) {
      var $el = $(el);
      var options = $el.data('popupoptions');
      var $wrapper = $('#' + el.id + '_wrapper');
      var $background = $('#' + el.id + '_background');

      ordinal = ordinal || 0;

      // Tooltip type
      if (options.type == 'tooltip') {
        $wrapper.css({
          'position': 'absolute'
        });

        var $tooltipanchor;
        if (options.tooltipanchor) {
          $tooltipanchor = $(options.tooltipanchor);
        } else if (options.openelement) {
          $tooltipanchor = $(options.openelement).filter('[data-popup-ordinal="' + ordinal + '"]');
        } else {
          $tooltipanchor = $('.' + el.id + opensuffix + '[data-popup-ordinal="' + ordinal + '"]');
        }

        var linkOffset = $tooltipanchor.offset();

        // Horizontal position for tooltip
        if (options.horizontal == 'right') {
          $wrapper.css('left', linkOffset.left + $tooltipanchor.outerWidth() + options.offsetleft);
        } else if (options.horizontal == 'leftedge') {
          $wrapper.css('left', linkOffset.left + $tooltipanchor.outerWidth() - $tooltipanchor.outerWidth() +  options.offsetleft);
        } else if (options.horizontal == 'left') {
          $wrapper.css('right', $window.width() - linkOffset.left  - options.offsetleft);
        } else if (options.horizontal == 'rightedge') {
          $wrapper.css('right', $window.width()  - linkOffset.left - $tooltipanchor.outerWidth() - options.offsetleft);
        } else {
          $wrapper.css('left', linkOffset.left + ($tooltipanchor.outerWidth() / 2) - ($el.outerWidth() / 2) - parseFloat($el.css('marginLeft')) + options.offsetleft);
        }

        // Vertical position for tooltip
        if (options.vertical == 'bottom') {
          $wrapper.css('top', linkOffset.top + $tooltipanchor.outerHeight() + options.offsettop);
        } else if (options.vertical == 'bottomedge') {
          $wrapper.css('top', linkOffset.top + $tooltipanchor.outerHeight() - $el.outerHeight() + options.offsettop);
        } else if (options.vertical == 'top') {
          $wrapper.css('bottom', $window.height() - linkOffset.top - options.offsettop);
        } else if (options.vertical == 'topedge') {
          $wrapper.css('bottom', $window.height() - linkOffset.top - $el.outerHeight() - options.offsettop);
        } else {
          $wrapper.css('top', linkOffset.top + ($tooltipanchor.outerHeight() / 2) - ($el.outerHeight() / 2) - parseFloat($el.css('marginTop')) + options.offsettop);
        }

        // Overlay type
      } else if (options.type == 'overlay') {

        // Horizontal position for overlay
        if (options.horizontal) {
          $wrapper.css('text-align', options.horizontal);
        } else {
          $wrapper.css('text-align', 'center');
        }

        // Vertical position for overlay
        if (options.vertical) {
          $el.css('vertical-align', options.vertical);
        } else {
          $el.css('vertical-align', 'middle');
        }
      }
    },

    /**
     * Add-close-button method
     *
     * @param {object} el - popup instance DOM node
     */
    addclosebutton: function (el) {
      var genericCloseButton;

      if ($(el).data('popupoptions').closebuttonmarkup) {
        genericCloseButton = $(options.closebuttonmarkup).addClass(el.id + '_close');
      } else {
        genericCloseButton = '<button class="popup_close ' + el.id + '_close" title="Close" aria-label="Close"><span aria-hidden="true">×</span></button>';
      }

      if ($(el).data('popup-initialized')){
        $(el).append(genericCloseButton);
      }

    }

  };

  /**
   * Callback event calls
   *
   * @param {object} el - popup instance DOM node
   * @param {number} ordinal - order number of an `open` element
   * @param {function} func - callback function
   */
  var callback = function (el, ordinal, func) {
    var options = $(el).data('popupoptions');
    var openelement =  (options.openelement) ? options.openelement : ('.' + el.id + opensuffix);
    var elementclicked = $(openelement + '[data-popup-ordinal="' + ordinal + '"]');
    if (typeof func == 'function') {
      func.call($(el), el, elementclicked);
    }
  };

  // Hide popup if ESC key is pressed
  $(document).on('keydown', function (event) {
    if(visiblePopupsArray.length) {
      var elementId = visiblePopupsArray[visiblePopupsArray.length - 1];
      var el = document.getElementById(elementId);

      if ($(el).data('popupoptions').escape && event.keyCode == 27) {
        methods.hide(el);
        $('body').css('overflow-y', 'auto');
      }
    }
  });

  // Hide popup on click
  $(document).on('click', function (event) {
    if(visiblePopupsArray.length) {
      var elementId = visiblePopupsArray[visiblePopupsArray.length - 1];
      var el = document.getElementById(elementId);
      var closeButton = ($(el).data('popupoptions').closeelement) ? $(el).data('popupoptions').closeelement : ('.' + el.id + closesuffix);

      // If Close button clicked
      if ($(event.target).closest(closeButton).length) {
        event.preventDefault();
        methods.hide(el);
      }

      // If clicked outside of popup
      if ($(el).data('popupoptions').blur && !$(event.target).closest('#' + elementId).length && event.which !== 2 && $(event.target).is(':visible')) {

        if ($(el).data('popupoptions').background) {
          // If clicked on popup cover
          methods.hide(el);

          // Older iOS/Safari will trigger a click on the elements below the cover,
          // when tapping on the cover, so the default action needs to be prevented.
          event.preventDefault();

        } else {
          // If clicked on outer content
          methods.hide(el, true);
        }
      }
    }
  });

  // Keep keyboard focus inside of popup
  $(document).on('keydown', function(event) {
    if(visiblePopupsArray.length && event.which == 9) {

      // If tab or shift-tab pressed
      var elementId = visiblePopupsArray[visiblePopupsArray.length - 1];
      var el = document.getElementById(elementId);

      // Get list of all children elements in given object
      var popupItems = $(el).find('*');

      // Get list of focusable items
      var focusableItems = popupItems.filter(focusableElementsString).filter(':visible');

      // Get currently focused item
      var focusedItem = $(':focus');

      // Get the number of focusable items
      var numberOfFocusableItems = focusableItems.length;

      // Get the index of the currently focused item
      var focusedItemIndex = focusableItems.index(focusedItem);

      // If popup doesn't contain focusable elements, focus popup itself
      if (numberOfFocusableItems === 0) {
        $(el).focus();
        event.preventDefault();
      } else {
        if (event.shiftKey) {
          // Back tab
          // If focused on first item and user preses back-tab, go to the last focusable item
          if (focusedItemIndex === 0) {
            focusableItems.get(numberOfFocusableItems - 1).focus();
            event.preventDefault();
          }

        } else {
          // Forward tab
          // If focused on the last item and user preses tab, go to the first focusable item
          if (focusedItemIndex == numberOfFocusableItems - 1) {
            focusableItems.get(0).focus();
            event.preventDefault();
          }
        }
      }
    }
  });

  /**
   * Plugin API
   */
  $.fn.popup = function (customoptions) {
    return this.each(function () {

      var $el = $(this);

      if (typeof customoptions === 'object') {  // e.g. $('#popup').popup({'color':'blue'})
        var opt = $.extend({}, $.fn.popup.defaults, $el.data('popupoptions'), customoptions);
        $el.data('popupoptions', opt);
        options = $el.data('popupoptions');

        methods._init(this);

      } else if (typeof customoptions === 'string') { // e.g. $('#popup').popup('hide')
        if (!($el.data('popupoptions'))) {
          $el.data('popupoptions', $.fn.popup.defaults);
          options = $el.data('popupoptions');
        }

        methods[customoptions].call(this, this);

      } else { // e.g. $('#popup').popup()
        if (!($el.data('popupoptions'))) {
          $el.data('popupoptions', $.fn.popup.defaults);
          options = $el.data('popupoptions');
        }

        methods._init(this);

      }

    });
  };

  $.fn.popup.defaults = {
    type: 'overlay',
    autoopen: false,
    background: true,
    backgroundactive: false,
    color: 'black',
    opacity: '0.5',
    horizontal: 'center',
    vertical: 'middle',
    offsettop: 0,
    offsetleft: 0,
    escape: true,
    blur: true,
    setzindex: true,
    autozindex: false,
    scrolllock: false,
    closebutton: false,
    closebuttonmarkup: null,
    keepfocus: true,
    focuselement: null,
    focusdelay: 50,
    outline: false,
    pagecontainer: null,
    detach: false,
    openelement: null,
    closeelement: null,
    transition: null,
    tooltipanchor: null,
    beforeopen: null,
    onclose: null,
    onopen: null,
    opentransitionend: null,
    closetransitionend: null
  };

})(jQuery);