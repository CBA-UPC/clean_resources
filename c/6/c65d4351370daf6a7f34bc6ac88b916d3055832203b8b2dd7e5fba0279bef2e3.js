import{fetchAsync as k,getCookie as m,debug,forceRepaintSVG as I}from"../base/croco.js";import{getPathUrl as P,LOGGERS as t}from"../base/config.js";const v=t.DEFAULT;const p="campaignId";let u=null;async function g(content){if(!content){debug("error",v,"[Campaign]","missing content");return}const{openPopin:t}=await import("../base/popin-refit.js");const{addSubmitCallback:o,formsInit:i}=await import("../base/forms.js");const{fieldPhoneInit:m}=await import("../modules/field-phone.js");const{addLayoutParams:l}=await import("../templates/form/helper.tpl.js");const{image:p,title,subtitle:u,form:{actions,layout:g,buttons,submitUrl:C}}=content;const h=l(g,{optin:{labelLayout:"block"}});let j=content.form.actions["close"];let S=null;t({instanceId:"popin-campaign",options:{hasKeyboard:true,noStack:true,noPadding:true,noContentScroll:true},loadContents:async()=>{const{tplCampaign:t}=await import("../templates/campaign.tpl.js");const{cssLoad:o}=await import("../modules/asset-load.js");const i=P(true);await o({src:`${i}css/non-critical/popin-campaign-non-critical.css`});return{contents:t({image:p,form:{actions:actions,layout:h,buttons:buttons,async:true,method:"POST",submitUrl:C}}),title:title,subtitle:u}},openCallback:(t,l)=>{if(!S){S=l.$viewContent.querySelector(".js-form");if(S){o(S,async response=>{if(response&&response.register&&response.register.status===200){const{title:t,description:message,link}=response.register;const{tplCampaign:o}=await import("../templates/campaign.tpl.js");const{render:i}=await import("../vendors/lit-html/lit-html.js");i(o({image:content.image,subtitle:t,message:message,link:link}),l.$viewContent);j=false;I(l.$viewContent)}});i(S);m(S)}else{debug("warn",v,"[Campaign]","Missing form in the popin")}}},closeCallback:()=>{if(j&&S){k(j.url,{method:"POST",body:new FormData(S)})}}})}export function popinCampaignInit(l){if(l){k(l,{method:"GET"}).then(.then(response=>{const t=response.replace(/\s/g,"");if(!t){debug("warn",v,"[Campaign]","no campaign configured");return}let content=null;const o=response.replace(/(\s)*<!--[ ](.*)-->(\s)*/gm,"");const cookie=m(p);try{const i=JSON.parse(o);content=i.content;u=i.content.campaignId;if(!content||cookie===u){content=null}else{g(content)}}catch(error){debug("error",v,"[Campaign]","invalid JSON returned by fetch",l,o)}return content})}else{debug("warn",v,"[Campaign]","Lacoste.features.prospectCampaignUrl is not configured")}}