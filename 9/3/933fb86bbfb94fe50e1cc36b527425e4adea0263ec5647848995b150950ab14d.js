import{domRemoveChildren as u,isElement as h,isFunction as i,debug}from"./croco.js";import{LOGGERS as t,INVALID_PARAMETER as l,noElement as o}from"./config.js";const g=t.LOADER;const L="is-hidden";const p="is-opened";const m=".js-loader-error";class C{etDefaultContainer(){const t=document.querySelector(".js-main-loader")||null;if(!t){debug("error",g,o(".js-main-loader"))}return t}setContainer(t){if(t){const o=this.getDefaultContainer();u(t);t.classList.add("croco-loader","l-overlay","flex","flex--centered",L);if(o){const i=o.querySelector(".js-main-loader-icon").cloneNode(true);const l=o.querySelector(m).cloneNode(true);t.appendChild(i);t.appendChild(l)}}}begin(t=null){const o=h(t)?t:this.getDefaultContainer();this.isLoading=true;o.classList.remove(L);o.classList.add(p)}done(t=null){const o=h(t)?t:this.getDefaultContainer();this.isLoading=false;o.classList.add(L);o.classList.remove(p)}displayError(t,o=null){const i=h(o)?o:this.getDefaultContainer();const l=i.querySelector(m);l.textContent=t;l.classList.remove(L)}reset(t=null){const o=h(t)?t:this.getDefaultContainer();o.classList.add(L);o.querySelector(m).classList.add(L)}process(t,o=null){if(i(t)){if(!this.isLoading){this.begin(o)}t(this.done.bind(this,o))}else{debug("error",g,l,t)}}processAsync(promise,t=null){this.process(done=>{promise.then(()=>done()).catch(},t)}}export const loader=new C;