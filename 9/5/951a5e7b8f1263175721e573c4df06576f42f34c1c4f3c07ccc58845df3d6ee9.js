feloader.add("@cloud/pep-home-page-hk/pc/index",["@cloud/element-entrance","@cloud/parallax-scroll","@cloud/link-to","@cloud/lazyload"],(function(e,t,n){n.exports=[function(e,t,n){"use strict";n.r(t),n.d(t,"ACESFilmicToneMapping",(function(){return te})),n.d(t,"AddEquation",(function(){return S})),n.d(t,"AddOperation",(function(){return Z})),n.d(t,"AdditiveAnimationBlendMode",(function(){return Lt})),n.d(t,"AdditiveBlending",(function(){return _})),n.d(t,"AlphaFormat",(function(){return De})),n.d(t,"AlwaysDepth",(function(){return G})),n.d(t,"AlwaysStencilFunc",(function(){return sn})),n.d(t,"AmbientLight",(function(){return Jh})),n.d(t,"AmbientLightProbe",(function(){return fd})),n.d(t,"AnimationClip",(function(){return bh})),n.d(t,"AnimationLoader",(function(){return Lh})),n.d(t,"AnimationMixer",(function(){return Wd})),n.d(t,"AnimationObjectGroup",(function(){return Gd})),n.d(t,"AnimationUtils",(function(){return lh})),n.d(t,"ArcCurve",(function(){return Tc})),n.d(t,"ArrayCamera",(function(){return tl})),n.d(t,"ArrowHelper",(function(){return zp})),n.d(t,"Audio",(function(){return Ed})),n.d(t,"AudioAnalyser",(function(){return Id})),n.d(t,"AudioContext",(function(){return hd})),n.d(t,"AudioListener",(function(){return Td})),n.d(t,"AudioLoader",(function(){return dd})),n.d(t,"AxesHelper",(function(){return Np})),n.d(t,"BackSide",(function(){return m})),n.d(t,"BasicDepthPacking",(function(){return Nt})),n.d(t,"BasicShadowMap",(function(){return u})),n.d(t,"Bone",(function(){return Hl})),n.d(t,"BooleanKeyframeTrack",(function(){return fh})),n.d(t,"Box2",(function(){return np})),n.d(t,"Box3",(function(){return fi})),n.d(t,"Box3Helper",(function(){return Lp})),n.d(t,"BoxBufferGeometry",(function(){return Gp})),n.d(t,"BoxGeometry",(function(){return cs})),n.d(t,"BoxHelper",(function(){return Pp})),n.d(t,"BufferAttribute",(function(){return Pr})),n.d(t,"BufferGeometry",(function(){return Xr})),n.d(t,"BufferGeometryLoader",(function(){return rd})),n.d(t,"ByteType",(function(){return Me})),n.d(t,"Cache",(function(){return Mh})),n.d(t,"Camera",(function(){return ms})),n.d(t,"CameraHelper",(function(){return Ep})),n.d(t,"CanvasTexture",(function(){return wc})),n.d(t,"CapsuleBufferGeometry",(function(){return Hp})),n.d(t,"CapsuleGeometry",(function(){return jc})),n.d(t,"CatmullRomCurve3",(function(){return Rc})),n.d(t,"CineonToneMapping",(function(){return ee})),n.d(t,"CircleBufferGeometry",(function(){return Vp})),n.d(t,"CircleGeometry",(function(){return Xc})),n.d(t,"ClampToEdgeWrapping",(function(){return ue})),n.d(t,"Clock",(function(){return xd})),n.d(t,"Color",(function(){return Zn})),n.d(t,"ColorKeyframeTrack",(function(){return mh})),n.d(t,"ColorManagement",(function(){return Vn})),n.d(t,"CompressedArrayTexture",(function(){return bc})),n.d(t,"CompressedTexture",(function(){return _c})),n.d(t,"CompressedTextureLoader",(function(){return Rh})),n.d(t,"ConeBufferGeometry",(function(){return Wp})),n.d(t,"ConeGeometry",(function(){return Yc})),n.d(t,"CubeCamera",(function(){return ys})),n.d(t,"CubeReflectionMapping",(function(){return re})),n.d(t,"CubeRefractionMapping",(function(){return se})),n.d(t,"CubeTexture",(function(){return xs})),n.d(t,"CubeTextureLoader",(function(){return Dh})),n.d(t,"CubeUVReflectionMapping",(function(){return le})),n.d(t,"CubicBezierCurve",(function(){return zc})),n.d(t,"CubicBezierCurve3",(function(){return Nc})),n.d(t,"CubicInterpolant",(function(){return uh})),n.d(t,"CullFaceBack",(function(){return o})),n.d(t,"CullFaceFront",(function(){return l})),n.d(t,"CullFaceFrontBack",(function(){return c})),n.d(t,"CullFaceNone",(function(){return a})),n.d(t,"Curve",(function(){return Mc})),n.d(t,"CurvePath",(function(){return Vc})),n.d(t,"CustomBlending",(function(){return M})),n.d(t,"CustomToneMapping",(function(){return ne})),n.d(t,"CylinderBufferGeometry",(function(){return $p})),n.d(t,"CylinderGeometry",(function(){return qc})),n.d(t,"Cylindrical",(function(){return ep})),n.d(t,"Data3DTexture",(function(){return oi})),n.d(t,"DataArrayTexture",(function(){return si})),n.d(t,"DataTexture",(function(){return Vl})),n.d(t,"DataTextureLoader",(function(){return Oh})),n.d(t,"DataUtils",(function(){return Up})),n.d(t,"DecrementStencilOp",(function(){return Xt})),n.d(t,"DecrementWrapStencilOp",(function(){return Yt})),n.d(t,"DefaultLoadingManager",(function(){return Th})),n.d(t,"DepthFormat",(function(){return ke})),n.d(t,"DepthStencilFormat",(function(){return Be})),n.d(t,"DepthTexture",(function(){return sl})),n.d(t,"DirectionalLight",(function(){return Zh})),n.d(t,"DirectionalLightHelper",(function(){return Mp})),n.d(t,"DiscreteInterpolant",(function(){return dh})),n.d(t,"DodecahedronBufferGeometry",(function(){return jp})),n.d(t,"DodecahedronGeometry",(function(){return Jc})),n.d(t,"DoubleSide",(function(){return g})),n.d(t,"DstAlphaFactor",(function(){return z})),n.d(t,"DstColorFactor",(function(){return k})),n.d(t,"DynamicCopyUsage",(function(){return pn})),n.d(t,"DynamicDrawUsage",(function(){return on})),n.d(t,"DynamicReadUsage",(function(){return un})),n.d(t,"EdgesGeometry",(function(){return nu})),n.d(t,"EllipseCurve",(function(){return Sc})),n.d(t,"EqualDepth",(function(){return W})),n.d(t,"EqualStencilFunc",(function(){return Qt})),n.d(t,"EquirectangularReflectionMapping",(function(){return ae})),n.d(t,"EquirectangularRefractionMapping",(function(){return oe})),n.d(t,"Euler",(function(){return Ji})),n.d(t,"EventDispatcher",(function(){return yn})),n.d(t,"ExtrudeBufferGeometry",(function(){return Xp})),n.d(t,"ExtrudeGeometry",(function(){return Iu})),n.d(t,"FileLoader",(function(){return Ph})),n.d(t,"Float16BufferAttribute",(function(){return kr})),n.d(t,"Float32BufferAttribute",(function(){return Br})),n.d(t,"Float64BufferAttribute",(function(){return Fr})),n.d(t,"FloatType",(function(){return Ae})),n.d(t,"Fog",(function(){return dl})),n.d(t,"FogExp2",(function(){return hl})),n.d(t,"FramebufferTexture",(function(){return xc})),n.d(t,"FrontSide",(function(){return f})),n.d(t,"Frustum",(function(){return Cs})),n.d(t,"GLBufferAttribute",(function(){return Yd})),n.d(t,"GLSL1",(function(){return mn})),n.d(t,"GLSL3",(function(){return gn})),n.d(t,"GreaterDepth",(function(){return j})),n.d(t,"GreaterEqualDepth",(function(){return $})),n.d(t,"GreaterEqualStencilFunc",(function(){return rn})),n.d(t,"GreaterStencilFunc",(function(){return tn})),n.d(t,"GridHelper",(function(){return yp})),n.d(t,"Group",(function(){return nl})),n.d(t,"HalfFloatType",(function(){return Pe})),n.d(t,"HemisphereLight",(function(){return kh})),n.d(t,"HemisphereLightHelper",(function(){return vp})),n.d(t,"HemisphereLightProbe",(function(){return pd})),n.d(t,"IcosahedronBufferGeometry",(function(){return qp})),n.d(t,"IcosahedronGeometry",(function(){return Ou})),n.d(t,"ImageBitmapLoader",(function(){return cd})),n.d(t,"ImageLoader",(function(){return Ih})),n.d(t,"ImageUtils",(function(){return Kn})),n.d(t,"IncrementStencilOp",(function(){return jt})),n.d(t,"IncrementWrapStencilOp",(function(){return qt})),n.d(t,"InstancedBufferAttribute",(function(){return Xl})),n.d(t,"InstancedBufferGeometry",(function(){return id})),n.d(t,"InstancedInterleavedBuffer",(function(){return qd})),n.d(t,"InstancedMesh",(function(){return Ql})),n.d(t,"Int16BufferAttribute",(function(){return Dr})),n.d(t,"Int32BufferAttribute",(function(){return zr})),n.d(t,"Int8BufferAttribute",(function(){return Lr})),n.d(t,"IntType",(function(){return Ee})),n.d(t,"InterleavedBuffer",(function(){return fl})),n.d(t,"InterleavedBufferAttribute",(function(){return gl})),n.d(t,"Interpolant",(function(){return ch})),n.d(t,"InterpolateDiscrete",(function(){return Mt})),n.d(t,"InterpolateLinear",(function(){return St})),n.d(t,"InterpolateSmooth",(function(){return Tt})),n.d(t,"InvertStencilOp",(function(){return Zt})),n.d(t,"KeepStencilOp",(function(){return Wt})),n.d(t,"KeyframeTrack",(function(){return ph})),n.d(t,"LOD",(function(){return zl})),n.d(t,"LatheBufferGeometry",(function(){return Yp})),n.d(t,"LatheGeometry",(function(){return $c})),n.d(t,"Layers",(function(){return Ki})),n.d(t,"LessDepth",(function(){return H})),n.d(t,"LessEqualDepth",(function(){return V})),n.d(t,"LessEqualStencilFunc",(function(){return en})),n.d(t,"LessStencilFunc",(function(){return Kt})),n.d(t,"Light",(function(){return Nh})),n.d(t,"LightProbe",(function(){return ed})),n.d(t,"Line",(function(){return ac})),n.d(t,"Line3",(function(){return sp})),n.d(t,"LineBasicMaterial",(function(){return ec})),n.d(t,"LineCurve",(function(){return kc})),n.d(t,"LineCurve3",(function(){return Bc})),n.d(t,"LineDashedMaterial",(function(){return th})),n.d(t,"LineLoop",(function(){return uc})),n.d(t,"LineSegments",(function(){return cc})),n.d(t,"LinearEncoding",(function(){return Ot})),n.d(t,"LinearFilter",(function(){return ve})),n.d(t,"LinearInterpolant",(function(){return hh})),n.d(t,"LinearMipMapLinearFilter",(function(){return be})),n.d(t,"LinearMipMapNearestFilter",(function(){return xe})),n.d(t,"LinearMipmapLinearFilter",(function(){return _e})),n.d(t,"LinearMipmapNearestFilter",(function(){return ye})),n.d(t,"LinearSRGBColorSpace",(function(){return Ht})),n.d(t,"LinearToneMapping",(function(){return K})),n.d(t,"Loader",(function(){return Eh})),n.d(t,"LoaderUtils",(function(){return nd})),n.d(t,"LoadingManager",(function(){return Sh})),n.d(t,"LoopOnce",(function(){return _t})),n.d(t,"LoopPingPong",(function(){return wt})),n.d(t,"LoopRepeat",(function(){return bt})),n.d(t,"LuminanceAlphaFormat",(function(){return Ne})),n.d(t,"LuminanceFormat",(function(){return ze})),n.d(t,"MOUSE",(function(){return r})),n.d(t,"Material",(function(){return Tr})),n.d(t,"MaterialLoader",(function(){return td})),n.d(t,"MathUtils",(function(){return In})),n.d(t,"Matrix3",(function(){return On})),n.d(t,"Matrix4",(function(){return Gi})),n.d(t,"MaxEquation",(function(){return A})),n.d(t,"Mesh",(function(){return os})),n.d(t,"MeshBasicMaterial",(function(){return Er})),n.d(t,"MeshDepthMaterial",(function(){return Xo})),n.d(t,"MeshDistanceMaterial",(function(){return qo})),n.d(t,"MeshLambertMaterial",(function(){return Qu})),n.d(t,"MeshMatcapMaterial",(function(){return eh})),n.d(t,"MeshNormalMaterial",(function(){return Ku})),n.d(t,"MeshPhongMaterial",(function(){return Zu})),n.d(t,"MeshPhysicalMaterial",(function(){return Yu})),n.d(t,"MeshStandardMaterial",(function(){return qu})),n.d(t,"MeshToonMaterial",(function(){return Ju})),n.d(t,"MinEquation",(function(){return C})),n.d(t,"MirroredRepeatWrapping",(function(){return he})),n.d(t,"MixOperation",(function(){return Y})),n.d(t,"MultiplyBlending",(function(){return w})),n.d(t,"MultiplyOperation",(function(){return q})),n.d(t,"NearestFilter",(function(){return de})),n.d(t,"NearestMipMapLinearFilter",(function(){return ge})),n.d(t,"NearestMipMapNearestFilter",(function(){return fe})),n.d(t,"NearestMipmapLinearFilter",(function(){return me})),n.d(t,"NearestMipmapNearestFilter",(function(){return pe})),n.d(t,"NeverDepth",(function(){return U})),n.d(t,"NeverStencilFunc",(function(){return Jt})),n.d(t,"NoBlending",(function(){return y})),n.d(t,"NoColorSpace",(function(){return Ut})),n.d(t,"NoToneMapping",(function(){return J})),n.d(t,"NormalAnimationBlendMode",(function(){return Pt})),n.d(t,"NormalBlending",(function(){return x})),n.d(t,"NotEqualDepth",(function(){return X})),n.d(t,"NotEqualStencilFunc",(function(){return nn})),n.d(t,"NumberKeyframeTrack",(function(){return gh})),n.d(t,"Object3D",(function(){return dr})),n.d(t,"ObjectLoader",(function(){return sd})),n.d(t,"ObjectSpaceNormalMap",(function(){return Ft})),n.d(t,"OctahedronBufferGeometry",(function(){return Zp})),n.d(t,"OctahedronGeometry",(function(){return zu})),n.d(t,"OneFactor",(function(){return L})),n.d(t,"OneMinusDstAlphaFactor",(function(){return N})),n.d(t,"OneMinusDstColorFactor",(function(){return B})),n.d(t,"OneMinusSrcAlphaFactor",(function(){return O})),n.d(t,"OneMinusSrcColorFactor",(function(){return I})),n.d(t,"OrthographicCamera",(function(){return Gs})),n.d(t,"PCFShadowMap",(function(){return h})),n.d(t,"PCFSoftShadowMap",(function(){return d})),n.d(t,"PMREMGenerator",(function(){return Zs})),n.d(t,"Path",(function(){return Wc})),n.d(t,"PerspectiveCamera",(function(){return gs})),n.d(t,"Plane",(function(){return Ss})),n.d(t,"PlaneBufferGeometry",(function(){return Jp})),n.d(t,"PlaneGeometry",(function(){return Ls})),n.d(t,"PlaneHelper",(function(){return Rp})),n.d(t,"PointLight",(function(){return qh})),n.d(t,"PointLightHelper",(function(){return pp})),n.d(t,"Points",(function(){return gc})),n.d(t,"PointsMaterial",(function(){return hc})),n.d(t,"PolarGridHelper",(function(){return xp})),n.d(t,"PolyhedronBufferGeometry",(function(){return Kp})),n.d(t,"PolyhedronGeometry",(function(){return Zc})),n.d(t,"PositionalAudio",(function(){return Rd})),n.d(t,"PropertyBinding",(function(){return Ud})),n.d(t,"PropertyMixer",(function(){return Dd})),n.d(t,"QuadraticBezierCurve",(function(){return Fc})),n.d(t,"QuadraticBezierCurve3",(function(){return Uc})),n.d(t,"Quaternion",(function(){return ui})),n.d(t,"QuaternionKeyframeTrack",(function(){return yh})),n.d(t,"QuaternionLinearInterpolant",(function(){return vh})),n.d(t,"RED_GREEN_RGTC2_Format",(function(){return yt})),n.d(t,"RED_RGTC1_Format",(function(){return gt})),n.d(t,"REVISION",(function(){return i})),n.d(t,"RGBADepthPacking",(function(){return kt})),n.d(t,"RGBAFormat",(function(){return Oe})),n.d(t,"RGBAIntegerFormat",(function(){return Ve})),n.d(t,"RGBA_ASTC_10x10_Format",(function(){return dt})),n.d(t,"RGBA_ASTC_10x5_Format",(function(){return ct})),n.d(t,"RGBA_ASTC_10x6_Format",(function(){return ut})),n.d(t,"RGBA_ASTC_10x8_Format",(function(){return ht})),n.d(t,"RGBA_ASTC_12x10_Format",(function(){return pt})),n.d(t,"RGBA_ASTC_12x12_Format",(function(){return ft})),n.d(t,"RGBA_ASTC_4x4_Format",(function(){return tt})),n.d(t,"RGBA_ASTC_5x4_Format",(function(){return nt})),n.d(t,"RGBA_ASTC_5x5_Format",(function(){return it})),n.d(t,"RGBA_ASTC_6x5_Format",(function(){return rt})),n.d(t,"RGBA_ASTC_6x6_Format",(function(){return st})),n.d(t,"RGBA_ASTC_8x5_Format",(function(){return at})),n.d(t,"RGBA_ASTC_8x6_Format",(function(){return ot})),n.d(t,"RGBA_ASTC_8x8_Format",(function(){return lt})),n.d(t,"RGBA_BPTC_Format",(function(){return mt})),n.d(t,"RGBA_ETC2_EAC_Format",(function(){return et})),n.d(t,"RGBA_PVRTC_2BPPV1_Format",(function(){return Je})),n.d(t,"RGBA_PVRTC_4BPPV1_Format",(function(){return Ze})),n.d(t,"RGBA_S3TC_DXT1_Format",(function(){return $e})),n.d(t,"RGBA_S3TC_DXT3_Format",(function(){return je})),n.d(t,"RGBA_S3TC_DXT5_Format",(function(){return Xe})),n.d(t,"RGB_ETC1_Format",(function(){return Ke})),n.d(t,"RGB_ETC2_Format",(function(){return Qe})),n.d(t,"RGB_PVRTC_2BPPV1_Format",(function(){return Ye})),n.d(t,"RGB_PVRTC_4BPPV1_Format",(function(){return qe})),n.d(t,"RGB_S3TC_DXT1_Format",(function(){return We})),n.d(t,"RGFormat",(function(){return Ge})),n.d(t,"RGIntegerFormat",(function(){return He})),n.d(t,"RawShaderMaterial",(function(){return Xu})),n.d(t,"Ray",(function(){return Ui})),n.d(t,"Raycaster",(function(){return Zd})),n.d(t,"RectAreaLight",(function(){return Kh})),n.d(t,"RedFormat",(function(){return Fe})),n.d(t,"RedIntegerFormat",(function(){return Ue})),n.d(t,"ReinhardToneMapping",(function(){return Q})),n.d(t,"RepeatWrapping",(function(){return ce})),n.d(t,"ReplaceStencilOp",(function(){return $t})),n.d(t,"ReverseSubtractEquation",(function(){return E})),n.d(t,"RingBufferGeometry",(function(){return Qp})),n.d(t,"RingGeometry",(function(){return Nu})),n.d(t,"SIGNED_RED_GREEN_RGTC2_Format",(function(){return xt})),n.d(t,"SIGNED_RED_RGTC1_Format",(function(){return vt})),n.d(t,"SRGBColorSpace",(function(){return Gt})),n.d(t,"Scene",(function(){return pl})),n.d(t,"ShaderChunk",(function(){return Rs})),n.d(t,"ShaderLib",(function(){return Ds})),n.d(t,"ShaderMaterial",(function(){return fs})),n.d(t,"ShadowMaterial",(function(){return ju})),n.d(t,"Shape",(function(){return iu})),n.d(t,"ShapeBufferGeometry",(function(){return ef})),n.d(t,"ShapeGeometry",(function(){return ku})),n.d(t,"ShapePath",(function(){return kp})),n.d(t,"ShapeUtils",(function(){return Pu})),n.d(t,"ShortType",(function(){return Se})),n.d(t,"Skeleton",(function(){return jl})),n.d(t,"SkeletonHelper",(function(){return hp})),n.d(t,"SkinnedMesh",(function(){return Gl})),n.d(t,"Source",(function(){return Qn})),n.d(t,"Sphere",(function(){return Ii})),n.d(t,"SphereBufferGeometry",(function(){return tf})),n.d(t,"SphereGeometry",(function(){return Bu})),n.d(t,"Spherical",(function(){return Qd})),n.d(t,"SphericalHarmonics3",(function(){return Qh})),n.d(t,"SplineCurve",(function(){return Gc})),n.d(t,"SpotLight",(function(){return Vh})),n.d(t,"SpotLightHelper",(function(){return op})),n.d(t,"Sprite",(function(){return Rl})),n.d(t,"SpriteMaterial",(function(){return vl})),n.d(t,"SrcAlphaFactor",(function(){return D})),n.d(t,"SrcAlphaSaturateFactor",(function(){return F})),n.d(t,"SrcColorFactor",(function(){return R})),n.d(t,"StaticCopyUsage",(function(){return dn})),n.d(t,"StaticDrawUsage",(function(){return an})),n.d(t,"StaticReadUsage",(function(){return cn})),n.d(t,"StereoCamera",(function(){return yd})),n.d(t,"StreamCopyUsage",(function(){return fn})),n.d(t,"StreamDrawUsage",(function(){return ln})),n.d(t,"StreamReadUsage",(function(){return hn})),n.d(t,"StringKeyframeTrack",(function(){return xh})),n.d(t,"SubtractEquation",(function(){return T})),n.d(t,"SubtractiveBlending",(function(){return b})),n.d(t,"TOUCH",(function(){return s})),n.d(t,"TangentSpaceNormalMap",(function(){return Bt})),n.d(t,"TetrahedronBufferGeometry",(function(){return nf})),n.d(t,"TetrahedronGeometry",(function(){return Fu})),n.d(t,"Texture",(function(){return ni})),n.d(t,"TextureLoader",(function(){return zh})),n.d(t,"TorusBufferGeometry",(function(){return rf})),n.d(t,"TorusGeometry",(function(){return Uu})),n.d(t,"TorusKnotBufferGeometry",(function(){return sf})),n.d(t,"TorusKnotGeometry",(function(){return Gu})),n.d(t,"Triangle",(function(){return Mr})),n.d(t,"TriangleFanDrawMode",(function(){return Dt})),n.d(t,"TriangleStripDrawMode",(function(){return It})),n.d(t,"TrianglesDrawMode",(function(){return Rt})),n.d(t,"TubeBufferGeometry",(function(){return af})),n.d(t,"TubeGeometry",(function(){return Hu})),n.d(t,"TwoPassDoubleSide",(function(){return v})),n.d(t,"UVMapping",(function(){return ie})),n.d(t,"Uint16BufferAttribute",(function(){return Or})),n.d(t,"Uint32BufferAttribute",(function(){return Nr})),n.d(t,"Uint8BufferAttribute",(function(){return Rr})),n.d(t,"Uint8ClampedBufferAttribute",(function(){return Ir})),n.d(t,"Uniform",(function(){return $d})),n.d(t,"UniformsGroup",(function(){return Xd})),n.d(t,"UniformsLib",(function(){return Is})),n.d(t,"UniformsUtils",(function(){return ps})),n.d(t,"UnsignedByteType",(function(){return we})),n.d(t,"UnsignedInt248Type",(function(){return Ie})),n.d(t,"UnsignedIntType",(function(){return Ce})),n.d(t,"UnsignedShort4444Type",(function(){return Le})),n.d(t,"UnsignedShort5551Type",(function(){return Re})),n.d(t,"UnsignedShortType",(function(){return Te})),n.d(t,"VSMShadowMap",(function(){return p})),n.d(t,"Vector2",(function(){return Dn})),n.d(t,"Vector3",(function(){return hi})),n.d(t,"Vector4",(function(){return ii})),n.d(t,"VectorKeyframeTrack",(function(){return _h})),n.d(t,"VideoTexture",(function(){return yc})),n.d(t,"WebGL1Renderer",(function(){return ul})),n.d(t,"WebGL3DRenderTarget",(function(){return li})),n.d(t,"WebGLArrayRenderTarget",(function(){return ai})),n.d(t,"WebGLCubeRenderTarget",(function(){return _s})),n.d(t,"WebGLMultipleRenderTargets",(function(){return ci})),n.d(t,"WebGLRenderTarget",(function(){return ri})),n.d(t,"WebGLRenderer",(function(){return cl})),n.d(t,"WebGLUtils",(function(){return el})),n.d(t,"WireframeGeometry",(function(){return Vu})),n.d(t,"WrapAroundEnding",(function(){return At})),n.d(t,"ZeroCurvatureEnding",(function(){return Et})),n.d(t,"ZeroFactor",(function(){return P})),n.d(t,"ZeroSlopeEnding",(function(){return Ct})),n.d(t,"ZeroStencilOp",(function(){return Vt})),n.d(t,"_SRGBAFormat",(function(){return vn})),n.d(t,"sRGBEncoding",(function(){return zt}));
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const i="149",r={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},s={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},a=0,o=1,l=2,c=3,u=0,h=1,d=2,p=3,f=0,m=1,g=2,v=2,y=0,x=1,_=2,b=3,w=4,M=5,S=100,T=101,E=102,C=103,A=104,P=200,L=201,R=202,I=203,D=204,O=205,z=206,N=207,k=208,B=209,F=210,U=0,G=1,H=2,V=3,W=4,$=5,j=6,X=7,q=0,Y=1,Z=2,J=0,K=1,Q=2,ee=3,te=4,ne=5,ie=300,re=301,se=302,ae=303,oe=304,le=306,ce=1e3,ue=1001,he=1002,de=1003,pe=1004,fe=1004,me=1005,ge=1005,ve=1006,ye=1007,xe=1007,_e=1008,be=1008,we=1009,Me=1010,Se=1011,Te=1012,Ee=1013,Ce=1014,Ae=1015,Pe=1016,Le=1017,Re=1018,Ie=1020,De=1021,Oe=1023,ze=1024,Ne=1025,ke=1026,Be=1027,Fe=1028,Ue=1029,Ge=1030,He=1031,Ve=1033,We=33776,$e=33777,je=33778,Xe=33779,qe=35840,Ye=35841,Ze=35842,Je=35843,Ke=36196,Qe=37492,et=37496,tt=37808,nt=37809,it=37810,rt=37811,st=37812,at=37813,ot=37814,lt=37815,ct=37816,ut=37817,ht=37818,dt=37819,pt=37820,ft=37821,mt=36492,gt=36283,vt=36284,yt=36285,xt=36286,_t=2200,bt=2201,wt=2202,Mt=2300,St=2301,Tt=2302,Et=2400,Ct=2401,At=2402,Pt=2500,Lt=2501,Rt=0,It=1,Dt=2,Ot=3e3,zt=3001,Nt=3200,kt=3201,Bt=0,Ft=1,Ut="",Gt="srgb",Ht="srgb-linear",Vt=0,Wt=7680,$t=7681,jt=7682,Xt=7683,qt=34055,Yt=34056,Zt=5386,Jt=512,Kt=513,Qt=514,en=515,tn=516,nn=517,rn=518,sn=519,an=35044,on=35048,ln=35040,cn=35045,un=35049,hn=35041,dn=35046,pn=35050,fn=35042,mn="100",gn="300 es",vn=1035;onst xn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let _n=1234567;const bn=Math.PI/180,wn=180/Math.PI;ion An(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))} In=Object.freeze({__proto__:null,DEG2RAD:bn,RAD2DEG:wn,ceilPowerOfTwo:An,clamp:Sn,damp:degToRad:function(e){return e*bn},denormalize:Ln,euclideanModulo:Tn,floorPowerOfTwo:Pn,generateUUID:Mn,inverseLerp:isPowerOfTwo:Cn,lerp:En,mapLinear:normalize:Rn,pingpong:radToDeg:randFloat:randFloatSpread:randInt:seededRandom:setQuaternionFromProperEuler:smootherstep:smoothstep:);class Dn{et width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}etX(e){return this.x=e,this}setY(e){return this.y=e,this}){return this.multiplyScalar(1/e)}in(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}mpLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}e(){return this.divideScalar(this.length()||1)}ength(e){return this.normalize().multiplyScalar(e)}new On;onst kn={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};t Hn={[Gt]:{[Ht]:Un},[Ht]:{[Gt]:Gn}},Vn={legacyMode:!0,get workingColorSpace(){return Ht},set workingColorSpaceconvert:fromWorkingColorSpace:toWorkingColorSpace:,Wn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},$n={r:0,g:0,b:0},jn={h:0,s:0,l:0},Xn={h:0,s:0,l:0};ass Zn{tScalar(e){return this.r=e,this.g=e,this.b=e,this}Style(e,t=Gt){et i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let e;const r=i[1],s=i[2];switch(r){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(e[1],10))/255,this.g=Math.min(255,parseInt(e[2],10))/255,this.b=Math.min(255,parseInt(e[3],10))/255,Vn.toWorkingColorSpace(this,t),n(e[4]),this;if(e=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(e[1],10))/100,this.g=Math.min(100,parseInt(e[2],10))/100,this.b=Math.min(100,parseInt(e[3],10))/100,Vn.toWorkingColorSpace(this,t),n(e[4]),this;break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const i=parseFloat(e[1])/360,r=parseFloat(e[2])/100,s=parseFloat(e[3])/100;return n(e[4]),this.setHSL(i,r,s,t)}}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const e=i[1],n=e.length;if(3===n)return this.r=parseInt(e.charAt(0)+e.charAt(0),16)/255,this.g=parseInt(e.charAt(1)+e.charAt(1),16)/255,this.b=parseInt(e.charAt(2)+e.charAt(2),16)/255,Vn.toWorkingColorSpace(this,t),this;if(6===n)return this.r=parseInt(e.charAt(0)+e.charAt(1),16)/255,this.g=parseInt(e.charAt(2)+e.charAt(3),16)/255,this.b=parseInt(e.charAt(4)+e.charAt(5),16)/255,Vn.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}lone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Un(e.r),this.g=Un(e.g),this.b=Un(e.b),this}onvertSRGBToLinear(){return this.copySRGBToLinear(this),this}etHex(e=Gt){return Vn.fromWorkingColorSpace(Yn(this,$n),e),Sn(255*$n.r,0,255)<<16^Sn(255*$n.g,0,255)<<8^Sn(255*$n.b,0,255)<<0}etHSL(e,t=Vn.workingColorSpace){Vn.fromWorkingColorSpace(Yn(this,$n),t);const n=$n.r,i=$n.g,r=$n.b,s=Math.max(n,i,r),a=Math.min(n,i,r);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const e=s-a;switch(l=c<=.5?e/(s+a):e/(2-s-a),s){case n:o=(i-r)/e+(i<r?6:0);break;case i:o=(r-n)/e+2;break;case r:o=(n-i)/e+4}o/=6}return e.h=o,e.s=l,e.l=c,e}getRGB(e,t=Vn.workingColorSpace){return Vn.fromWorkingColorSpace(Yn(this,$n),t),e.r=$n.r,e.g=$n.g,e.b=$n.b,e}getStyle(e=Gt){return Vn.fromWorkingColorSpace(Yn(this,$n),e),e!==Gt?`color(${e} ${$n.r} ${$n.g} ${$n.b})`:`rgb(${255*$n.r|0},${255*$n.g|0},${255*$n.b|0})`}dd(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}ultiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}){return this.getHex()}let Jn;Zn.NAMES=Wn; ti=0;class ni extends yn{constructor(e=ni.DEFAULT_IMAGE,t=ni.DEFAULT_MAPPING,n=ue,i=ue,r=ve,s=_e,a=Oe,o=we,l=ni.DEFAULT_ANISOTROPY,c=Ot){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:ti++}),this.uuid=Mn(),this.name="",this.source=new Qn(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Dn(0,0),this.repeat=new Dn(1,1),this.center=new Dn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new On,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}ne(){return(new this.constructor).copy(this)}oJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}i.DEFAULT_IMAGE=null,ni.DEFAULT_MAPPING=ie,ni.DEFAULT_ANISOTROPY=1;ass si extends ni{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=de,this.minFilter=de,this.wrapR=ue,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class ai extends ri{constructor(e=1,t=1,n=1){super(e,t),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new si(null,e,t,n),this.texture.isRenderTargetTexture=!0}}lass li extends ri{class ci extends ri{ass ui{ x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}ChangeCallback=e,this}lass hi{X(e){return this.x=e,this}setY(e){return this.y=e,this}s.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}ideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}mpLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}ze(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}nceTo(e){return Math.sqrt(this.distanceToSquared(e))}tFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}etFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}FromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}etFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const di=new hi,pi=new ui;class fi{et(e,t){return this.min.copy(e),this.max.copy(t),this}tFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=gi.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}lone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}ndByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(void 0!==n)if(t&&null!=n.attributes&&void 0!==n.attributes.position){const t=n.attributes.position;for(let n=0,i=t.count;n<i;n++)gi.fromBufferAttribute(t,n).applyMatrix4(e.matrixWorld),this.expandByPoint(gi)}else null===n.boundingBox&&n.computeBoundingBox(),vi.copy(n.boundingBox),vi.applyMatrix4(e.matrixWorld),this.union(vi);const i=e.children;for(let e=0,n=i.length;e<n;e++)this.expandByObject(i[e],t);return this}int(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return gi.copy(e).clamp(this.min,this.max).sub(e).length()}ion(e){return this.min.min(e.min),this.max.max(e.max),this}ranslate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const mi=[new hi,new hi,new hi,new hi,new hi,new hi,new hi,new hi],gi=new hi,vi=new fi,yi=new hi,xi=new hi,_i=new hi,bi=new hi,wi=new hi,Mi=new hi,Si=new hi,Ti=new hi,Ei=new hi,Ci=new hi;onst Pi=new fi,Li=new hi,Ri=new hi;onst Di=new hi,Oi=new hi,zi=new hi,Ni=new hi,ki=new hi,Bi=new hi,Fi=new hi;class Ui{et(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}anceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}x4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}onst Hi=new hi,Vi=new Gi,Wi=new hi(0,0,0),$i=new hi(1,1,1),ji=new hi,Xi=new hi,qi=new hi,Yi=new Gi,Zi=new ui;i.DEFAULT_ORDER="XYZ";et Qi=0;const er=new hi,tr=new ui,nr=new Gi,ir=new hi,rr=new hi,sr=new hi,ar=new ui,or=new hi(1,0,0),lr=new hi(0,1,0),cr=new hi(0,0,1),ur={type:"added"},hr={type:"removed"};class dr extends yn{nBeforeRender(){}onAfterRender(){}pplyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}etRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return tr.setFromAxisAngle(e,t),this.quaternion.multiply(tr),this}otateX(e){return this.rotateOnAxis(or,e)}rotateY(e){return this.rotateOnAxis(lr,e)}rotateZ(e){return this.rotateOnAxis(cr,e)}ranslateX(e){return this.translateOnAxis(or,e)}translateY(e){return this.translateOnAxis(lr,e)}ocalToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}ctById(e){return this.getObjectByProperty("id",e)}orldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(rr,e,sr),e}ycast(){}(e){const t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};f(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const n=t.shapes;if(Array.isArray(n))for(let t=0,i=n.length;t<i;t++){const i=n[t];r(e.shapes,i)}else r(e.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let n=0,i=this.material.length;n<i;n++)t.push(r(e.materials,this.material[n]));i.material=t}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let t=0;t<this.children.length;t++)i.children.push(this.children[t].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let t=0;t<this.animations.length;t++){const n=this.animations[t];i.animations.push(r(e.animations,n))}}if(t){const t=s(e.geometries),i=s(e.materials),r=s(e.textures),a=s(e.images),o=s(e.shapes),l=s(e.skeletons),c=s(e.animations),u=s(e.nodes);t.length>0&&(n.geometries=t),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),u.length>0&&(n.nodes=u)}return n.object=i,n;function s(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}}r.DEFAULT_UP=new hi(0,1,0),dr.DEFAULT_MATRIX_AUTO_UPDATE=!0,dr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const pr=new hi,fr=new hi,mr=new hi,gr=new hi,vr=new hi,yr=new hi,xr=new hi,_r=new hi,br=new hi,wr=new hi;et Sr=0;class Tr extends yn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Sr++}),this.uuid=Mn(),this.name="",this.type="Material",this.blending=x,this.side=f,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=D,this.blendDst=O,this.blendEquation=S,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=V,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=sn,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Wt,this.stencilZFail=Wt,this.stencilZPass=Wt,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}nBuild(){}onBeforeRender(){}onBeforeCompile(){}etValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}const i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};f(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==x&&(n.blending=this.blending),this.side!==f&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.forceSinglePass&&(n.forceSinglePass=this.forceSinglePass),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),t){const t=i(e.textures),r=i(e.images);t.length>0&&(n.textures=t),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}ispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}}onst Cr=new hi,Ar=new Dn;lass Lr extends Pr{constructor(e,t,n){super(new Int8Array(e),t,n)}}class Rr extends Pr{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class Ir extends Pr{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class Dr extends Pr{constructor(e,t,n){super(new Int16Array(e),t,n)}}class Or extends Pr{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class zr extends Pr{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Nr extends Pr{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class kr extends Pr{class Br extends Pr{constructor(e,t,n){super(new Float32Array(e),t,n)}}et Ur=0;const Gr=new Gi,Hr=new dr,Vr=new hi,Wr=new fi,$r=new fi,jr=new hi;class Xr extends yn{etIndex(){return this.index}ernion(e){return Gr.makeRotationFromQuaternion(e),this.applyMatrix4(Gr),this}rotateX(e){return Gr.makeRotationX(e),this.applyMatrix4(Gr),this}rotateY(e){return Gr.makeRotationY(e),this.applyMatrix4(Gr),this}ranslate(e,t,n){return Gr.makeTranslation(e,t,n),this.applyMatrix4(Gr),this}rn(new this.constructor).copy(this)}ispose(){this.dispatchEvent({type:"dispose"})}}const qr=new Gi,Yr=new Ui,Zr=new Ii,Jr=new hi,Kr=new hi,Qr=new hi,es=new hi,ts=new hi,ns=new Dn,is=new Dn,rs=new Dn,ss=new hi,as=new hi;class os extends dr{ast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),Zr.copy(n.boundingSphere),Zr.applyMatrix4(r),!1===e.ray.intersectsSphere(Zr))return;if(qr.copy(r).invert(),Yr.copy(e.ray).applyMatrix4(qr),null!==n.boundingBox&&!1===Yr.intersectsBox(n.boundingBox))return;let s;const a=n.index,o=n.attributes.position,l=n.attributes.uv,c=n.attributes.uv2,u=n.groups,h=n.drawRange;if(null!==a)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],o=i[r.materialIndex];for(let n=Math.max(r.start,h.start),i=Math.min(a.count,Math.min(r.start+r.count,h.start+h.count));n<i;n+=3){const i=a.getX(n),u=a.getX(n+1),h=a.getX(n+2);s=ls(this,o,e,Yr,l,c,i,u,h),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=r.materialIndex,t.push(s))}}else{for(let n=Math.max(0,h.start),r=Math.min(a.count,h.start+h.count);n<r;n+=3){const r=a.getX(n),o=a.getX(n+1),u=a.getX(n+2);s=ls(this,i,e,Yr,l,c,r,o,u),s&&(s.faceIndex=Math.floor(n/3),t.push(s))}}else if(void 0!==o)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],a=i[r.materialIndex];for(let n=Math.max(r.start,h.start),i=Math.min(o.count,Math.min(r.start+r.count,h.start+h.count));n<i;n+=3){s=ls(this,a,e,Yr,l,c,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=r.materialIndex,t.push(s))}}else{for(let n=Math.max(0,h.start),r=Math.min(o.count,h.start+h.count);n<r;n+=3){s=ls(this,i,e,Yr,l,c,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),t.push(s))}}}}function ls(e,t,n,i,r,s,a,o,l){e.getVertexPosition(a,Jr),e.getVertexPosition(o,Kr),e.getVertexPosition(l,Qr);const c=e,t,n,i,Jr,Kr,Qr,ss);if(c){r&&(ns.fromBufferAttribute(r,a),is.fromBufferAttribute(r,o),rs.fromBufferAttribute(r,l),c.uv=Mr.getUV(ss,Jr,Kr,Qr,ns,is,rs,new Dn)),s&&(ns.fromBufferAttribute(s,a),is.fromBufferAttribute(s,o),rs.fromBufferAttribute(s,l),c.uv2=Mr.getUV(ss,Jr,Kr,Qr,ns,is,rs,new Dn));const e={a:a,b:o,c:l,normal:new hi,materialIndex:0};Mr.getNormal(Jr,Kr,Qr,e.normal),c.face=e}return c}t ps={clone:us,merge:hs};class fs extends Tr{t vs=-90;st bs=new hi,ws=new hi,Ms=new On;onst Ts=new Ii,Es=new hi;t Rs={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},Is={common:{diffuse:{value:new Zn(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new On},uv2Transform:{value:new On},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Dn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Zn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Zn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new On}},sprite:{diffuse:{value:new Zn(16777215)},opacity:{value:1},center:{value:new Dn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new On}}},Ds={basic:{uniforms:hs([Is.common,Is.specularmap,Is.envmap,Is.aomap,Is.lightmap,Is.fog]),vertexShader:Rs.meshbasic_vert,fragmentShader:Rs.meshbasic_frag},lambert:{uniforms:hs([Is.common,Is.specularmap,Is.envmap,Is.aomap,Is.lightmap,Is.emissivemap,Is.bumpmap,Is.normalmap,Is.displacementmap,Is.fog,Is.lights,{emissive:{value:new Zn(0)}}]),vertexShader:Rs.meshlambert_vert,fragmentShader:Rs.meshlambert_frag},phong:{uniforms:hs([Is.common,Is.specularmap,Is.envmap,Is.aomap,Is.lightmap,Is.emissivemap,Is.bumpmap,Is.normalmap,Is.displacementmap,Is.fog,Is.lights,{emissive:{value:new Zn(0)},specular:{value:new Zn(1118481)},shininess:{value:30}}]),vertexShader:Rs.meshphong_vert,fragmentShader:Rs.meshphong_frag},standard:{uniforms:hs([Is.common,Is.envmap,Is.aomap,Is.lightmap,Is.emissivemap,Is.bumpmap,Is.normalmap,Is.displacementmap,Is.roughnessmap,Is.metalnessmap,Is.fog,Is.lights,{emissive:{value:new Zn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Rs.meshphysical_vert,fragmentShader:Rs.meshphysical_frag},toon:{uniforms:hs([Is.common,Is.aomap,Is.lightmap,Is.emissivemap,Is.bumpmap,Is.normalmap,Is.displacementmap,Is.gradientmap,Is.fog,Is.lights,{emissive:{value:new Zn(0)}}]),vertexShader:Rs.meshtoon_vert,fragmentShader:Rs.meshtoon_frag},matcap:{uniforms:hs([Is.common,Is.bumpmap,Is.normalmap,Is.displacementmap,Is.fog,{matcap:{value:null}}]),vertexShader:Rs.meshmatcap_vert,fragmentShader:Rs.meshmatcap_frag},points:{uniforms:hs([Is.points,Is.fog]),vertexShader:Rs.points_vert,fragmentShader:Rs.points_frag},dashed:{uniforms:hs([Is.common,Is.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Rs.linedashed_vert,fragmentShader:Rs.linedashed_frag},depth:{uniforms:hs([Is.common,Is.displacementmap]),vertexShader:Rs.depth_vert,fragmentShader:Rs.depth_frag},normal:{uniforms:hs([Is.common,Is.bumpmap,Is.normalmap,Is.displacementmap,{opacity:{value:1}}]),vertexShader:Rs.meshnormal_vert,fragmentShader:Rs.meshnormal_frag},sprite:{uniforms:hs([Is.sprite,Is.fog]),vertexShader:Rs.sprite_vert,fragmentShader:Rs.sprite_frag},background:{uniforms:{uvTransform:{value:new On},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Rs.background_vert,fragmentShader:Rs.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Rs.backgroundCube_vert,fragmentShader:Rs.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Rs.cube_vert,fragmentShader:Rs.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Rs.equirect_vert,fragmentShader:Rs.equirect_frag},distanceRGBA:{uniforms:hs([Is.common,Is.displacementmap,{referencePosition:{value:new hi},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Rs.distanceRGBA_vert,fragmentShader:Rs.distanceRGBA_frag},shadow:{uniforms:hs([Is.lights,Is.fog,{color:{value:new Zn(0)},opacity:{value:1}}]),vertexShader:Rs.shadow_vert,fragmentShader:Rs.shadow_frag}};Ds.physical={uniforms:hs([Ds.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Dn(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new Zn(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Dn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Zn(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Zn(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Rs.meshphysical_vert,fragmentShader:Rs.meshphysical_frag};const Os={r:0,b:0,g:0};ction Bs(e,t,n){let i;onst s="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext;let a=void 0!==n.precision?n.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,u=e.getParameter(34930),h=e.getParameter(35660),d=e.getParameter(3379),p=e.getParameter(34076),f=e.getParameter(34921),m=e.getParameter(36347),g=e.getParameter(36348),v=e.getParameter(36349),y=h>0,x=s||t.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:u,maxVertexTextures:h,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:s?e.getParameter(36183):0}}st Hs=[.125,.215,.35,.446,.526,.582],Vs=20,Ws=new Gs,$s=new Zn;let js=null;const Xs=(1+Math.sqrt(5))/2,qs=1/Xs,Ys=[new hi(1,1,1),new hi(-1,1,1),new hi(1,1,-1),new hi(-1,1,-1),new hi(0,Xs,qs),new hi(0,Xs,-qs),new hi(qs,0,Xs),new hi(-qs,0,Xs),new hi(Xs,qs,0),new hi(-Xs,qs,0)];class Zs{omEquirectangular(e,t=null){return this._fromTexture(e,t)}ompileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=ea(),this._compileMaterial(this._cubemapMaterial))}ateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:ve,minFilter:ve,generateMipmaps:!1,type:Pe,format:Oe,encoding:Ot,depthBuffer:!1},i=Js(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Js(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(Vs),r=new hi(0,1,0),s=new fs({name:"SphericalGaussianBlur",defines:{n:Vs,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:ta(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:y,depthTest:!1,depthWrite:!1});return s}(i,e,t)}return i}){const i={},r=new Float32Array(8),s=new WeakMap,a=new ii,o=[];for(let e=0;e<8;e++)o[e]=[e,0];return{update:function(l,c,u,h){const d=l.morphTargetInfluences;if(!0===t.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,f=void 0!==p?p.length:0;let m=s.get(c);if(void 0===m||m.count!==f){void 0!==m&&m.texture.dispose();const y=void 0!==c.morphAttributes.position,x=void 0!==c.morphAttributes.normal,_=void 0!==c.morphAttributes.color,b=c.morphAttributes.position||[],w=c.morphAttributes.normal||[],M=c.morphAttributes.color||[];let S=0;!0===y&&(S=1),!0===x&&(S=2),!0===_&&(S=3);let T=c.attributes.position.count*S,E=1;T>t.maxTextureSize&&(E=Math.ceil(T/t.maxTextureSize),T=t.maxTextureSize);const C=new Float32Array(T*E*4*f),A=new si(C,T,E,f);A.type=Ae,A.needsUpdate=!0;const P=4*S;for(let R=0;R<f;R++){const I=b[R],D=w[R],O=M[R],z=T*E*4*R;for(let N=0;N<I.count;N++){const k=N*P;!0===y&&(a.fromBufferAttribute(I,N),C[z+k+0]=a.x,C[z+k+1]=a.y,C[z+k+2]=a.z,C[z+k+3]=0),!0===x&&(a.fromBufferAttribute(D,N),C[z+k+4]=a.x,C[z+k+5]=a.y,C[z+k+6]=a.z,C[z+k+7]=0),!0===_&&(a.fromBufferAttribute(O,N),C[z+k+8]=a.x,C[z+k+9]=a.y,C[z+k+10]=a.z,C[z+k+11]=4===O.itemSize?a.w:1)}}={count:f,texture:A,size:new Dn(T,E)},s.set(c,m),c.addEventListener("dispose",L)}let g=0;for(let B=0;B<d.length;B++)g+=d[B];const v=c.morphTargetsRelative?1:1-g;h.getUniforms().setValue(e,"morphTargetBaseInfluence",v),h.getUniforms().setValue(e,"morphTargetInfluences",d),h.getUniforms().setValue(e,"morphTargetsTexture",m.texture,n),h.getUniforms().setValue(e,"morphTargetsTextureSize",m.size)}else{const F=void 0===d?0:d.length;let U=i[c.id];if(void 0===U||U.length!==F){U=[];for(let $=0;$<F;$++)U[$]=[$,0];i[c.id]=U}for(let j=0;j<F;j++){const X=U[j];X[0]=j,X[1]=d[j]}U.sort(la);for(let q=0;q<8;q++)q<F&&U[q][1]?(o[q][0]=U[q][0],o[q][1]=U[q][1]):(o[q][0]=Number.MAX_SAFE_INTEGER,o[q][1]=0);o.sort(oa);const G=c.morphAttributes.position,H=c.morphAttributes.normal;let V=0;for(let Y=0;Y<8;Y++){const Z=o[Y],J=Z[0],K=Z[1];J!==Number.MAX_SAFE_INTEGER&&K?(G&&c.getAttribute("morphTarget"+Y)!==G[J]&&c.setAttribute("morphTarget"+Y,G[J]),H&&c.getAttribute("morphNormal"+Y)!==H[J]&&c.setAttribute("morphNormal"+Y,H[J]),r[Y]=K,V+=K):(G&&!0===c.hasAttribute("morphTarget"+Y)&&c.deleteAttribute("morphTarget"+Y),H&&!0===c.hasAttribute("morphNormal"+Y)&&c.deleteAttribute("morphNormal"+Y),r[Y]=0)}const W=c.morphTargetsRelative?1:1-V;h.getUniforms().setValue(e,"morphTargetBaseInfluence",W),h.getUniforms().setValue(e,"morphTargetInfluences",r)}}}}onst ha=new ni,da=new si,pa=new oi,fa=new xs,ma=[],ga=[],va=new Float32Array(16),ya=new Float32Array(9),xa=new Float32Array(4);tion Sa(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Ta(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(ba(n,t))return;e.uniform2fv(this.addr,t),wa(n,t)}}unction Ca(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(ba(n,t))return;e.uniform4fv(this.addr,t),wa(n,t)}}function Aa(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(ba(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),wa(n,t)}else{if(ba(n,i))return;xa.set(i),e.uniformMatrix2fv(this.addr,!1,xa),wa(n,i)}}function Pa(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(ba(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),wa(n,t)}else{if(ba(n,i))return;ya.set(i),e.uniformMatrix3fv(this.addr,!1,ya),wa(n,i)}}unction Ra(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function Ia(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(ba(n,t))return;e.uniform2iv(this.addr,t),wa(n,t)}}function Da(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(ba(n,t))return;e.uniform3iv(this.addr,t),wa(n,t)}}function Oa(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(ba(n,t))return;e.uniform4iv(this.addr,t),wa(n,t)}}tion Fa(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(t||ha,r)}function Ua(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||pa,r)}function Ga(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(t||fa,r)}unction Va(e,t){e.uniform1fv(this.addr,t)}function Wa(e,t){const n=_a(t,this.size,2);e.uniform2fv(this.addr,n)}function $a(e,t){const n=_a(t,this.size,3);e.uniform3fv(this.addr,n)}unction Xa(e,t){const n=_a(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function qa(e,t){const n=_a(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}unction Za(e,t){e.uniform1iv(this.addr,t)}function Ja(e,t){e.uniform2iv(this.addr,t)}function Ka(e,t){e.uniform3iv(this.addr,t)}function Qa(e,t){e.uniform4iv(this.addr,t)}function eo(e,t){e.uniform1uiv(this.addr,t)}function to(e,t){e.uniform2uiv(this.addr,t)}function no(e,t){e.uniform3uiv(this.addr,t)}unction ro(e,t,n){const i=this.cache,r=t.length,s=Ma(n,r);ba(i,s)||(e.uniform1iv(this.addr,s),wa(i,s));for(let e=0;e!==r;++e)n.setTexture2D(t[e]||ha,s[e])}function so(e,t,n){const i=this.cache,r=t.length,s=Ma(n,r);ba(i,s)||(e.uniform1iv(this.addr,s),wa(i,s));for(let e=0;e!==r;++e)n.setTexture3D(t[e]||pa,s[e])}function ao(e,t,n){const i=this.cache,r=t.length,s=Ma(n,r);ba(i,s)||(e.uniform1iv(this.addr,s),wa(i,s));for(let e=0;e!==r;++e)n.setTextureCube(t[e]||fa,s[e])}t ho=/(\w+)(\])?(\[|\.)?/g;vo=0;So=/^[ \t]*#include +<([\w\d./]+)>/gm;function To(e){return e.replace(So,Eo)}onst Co=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;ction Ro(e,t,n,i){const r=e.getContext(),s=n.defines;let a=n.vertexShader,o=n.fragmentShader;const l=n),c=n),u=n),f=n),m=n),g=n.isWebGL2?"":n),v=s),y=r.createProgram();let x,_,b=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=[v].filter(bo).join("\n"),x.length>0&&(x+="\n"),_=[g,v].filter(bo).join("\n"),_.length>0&&(_+="\n")):(x=[Lo(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(bo).join("\n"),_=[g,Lo(n),"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+u:"",n.envMap?"#define "+f:"",m?"#define CUBEUV_TEXEL_WIDTH "+m.texelWidth:"",m?"#define CUBEUV_TEXEL_HEIGHT "+m.texelHeight:"",m?"#define CUBEUV_MAX_MIP "+m.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==J?"#define TONE_MAPPING":"",n.toneMapping!==J?Rs.tonemapping_pars_fragment:"",n.toneMapping!==J?_o("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Rs.encodings_pars_fragment,xo("linearToOutputTexel",n.outputEncoding),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(bo).join("\n")),a=To(a),a=wo(a,n),a=Mo(a,n),o=To(o),o=wo(o,n),o=Mo(o,n),a=Ao(a),o=Ao(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(b="#version 300 es\n",x=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,_=["#define varying in",n.glslVersion===gn?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===gn?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const w=b+_+o,M=go(r,35633,b+x+a),S=go(r,35632,w);if(r.attachShader(y,M),r.attachShader(y,S),void 0!==n.index0AttributeName?r.bindAttribLocation(y,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(y,0,"position"),r.linkProgram(y),e.debug.checkShaderErrors){const e=r.getProgramInfoLog(y).trim(),t=r.getShaderInfoLog(M).trim(),n=r.getShaderInfoLog(S).trim();let i=!0,s=!0;if(!1===r.getProgramParameter(y,35714)){i=!1;const t=yo(r,M,"vertex"),n=yo(r,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(y,35715)+"\n\nProgram Info Log: "+e+"\n"+t+"\n"+n)}else""!==e?console.warn("THREE.WebGLProgram: Program Info Log:",e):""!==t&&""!==n||(s=!1);s&&(this.diagnostics={runnable:i,programLog:e,vertexShader:{log:t,prefix:x},fragmentShader:{log:n,prefix:_}})}let T,E;return r.deleteShader(M),r.deleteShader(S),this.getUniforms=this.getAttributes=this.destroy=this.name=n.shaderName,this.id=vo++,this.cacheKey=t,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=S,this}let Io=0;nction zo(e,t,n,i,r,s,a){const o=new Ki,l=new Do,c=[],u=r.isWebGL2,h=r.logarithmicDepthBuffer,d=r.vertexTextures;let p=r.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(s,o,c,v,y){const _=v.fog,b=y.geometry,w=s.isMeshStandardMaterial?v.environment:null,M=(s.isMeshStandardMaterial?n:t).get(s.envMap||w),S=M&&M.mapping===le?M.image.height:null,T=f[s.type];null!==s.precision&&(p=r.getMaxPrecision(s.precision),p!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",p,"instead."));const E=b.morphAttributes.position||b.morphAttributes.normal||b.morphAttributes.color,C=void 0!==E?E.length:0;let A,P,L,R,I=0;if(void 0!==b.morphAttributes.position&&(I=1),void 0!==b.morphAttributes.normal&&(I=2),void 0!==b.morphAttributes.color&&(I=3),T){const e=Ds[T];A=e.vertexShader,P=e.fragmentShader}else A=s.vertexShader,P=s.fragmentShader,l.update(s),L=l.getVertexShaderID(s),R=l.getFragmentShaderID(s);const D=e.getRenderTarget(),O=s.alphaTest>0,z=s.clearcoat>0,N=s.iridescence>0;return{isWebGL2:u,shaderID:T,shaderName:s.type,vertexShader:A,fragmentShader:P,defines:s.defines,customVertexShaderID:L,customFragmentShaderID:R,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:p,instancing:!0===y.isInstancedMesh,instancingColor:!0===y.isInstancedMesh&&null!==y.instanceColor,supportsVertexTextures:d,outputEncoding:null===D?e.outputEncoding:!0===D.isXRRenderTarget?D.texture.encoding:Ot,map:!!s.map,matcap:!!s.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:S,lightMap:!!s.lightMap,aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:s.normalMapType===Ft,tangentSpaceNormalMap:s.normalMapType===Bt,decodeVideoTexture:!!s.map&&!0===s.map.isVideoTexture&&s.map.encoding===zt,clearcoat:z,clearcoatMap:z&&!!s.clearcoatMap,clearcoatRoughnessMap:z&&!!s.clearcoatRoughnessMap,clearcoatNormalMap:z&&!!s.clearcoatNormalMap,iridescence:N,iridescenceMap:N&&!!s.iridescenceMap,iridescenceThicknessMap:N&&!!s.iridescenceThicknessMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,specularIntensityMap:!!s.specularIntensityMap,specularColorMap:!!s.specularColorMap,opaque:!1===s.transparent&&s.blending===x,alphaMap:!!s.alphaMap,alphaTest:O,gradientMap:!!s.gradientMap,sheen:s.sheen>0,sheenColorMap:!!s.sheenColorMap,sheenRoughnessMap:!!s.sheenRoughnessMap,transmission:s.transmission>0,transmissionMap:!!s.transmissionMap,thicknessMap:!!s.thicknessMap,combine:s.combine,vertexTangents:!!s.normalMap&&!!b.attributes.tangent,vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!b.attributes.color&&4===b.attributes.color.itemSize,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.displacementMap||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheenColorMap||s.sheenRoughnessMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.iridescenceMap||s.iridescenceThicknessMap||s.transmission>0||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheen>0||s.sheenColorMap||s.sheenRoughnessMap||!s.displacementMap),fog:!!_,useFog:!0===s.fog,fogExp2:_&&_.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:h,skinning:!0===y.isSkinnedMesh,morphTargets:void 0!==b.morphAttributes.position,morphNormals:void 0!==b.morphAttributes.normal,morphColors:void 0!==b.morphAttributes.color,morphTargetsCount:C,morphTextureStride:I,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:s.toneMapped?e.toneMapping:J,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,doubleSided:s.side===g,flipSided:s.side===m,useDepthPacking:!!s.depthPacking,depthPacking:s.depthPacking||0,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||i.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(!n,t),n,t),n.push(e.outputEncoding)),n.push(t.customProgramCacheKey),n.join()},getUniforms:acquireProgram:releaseProgram:releaseShaderCache:function(e){l.remove(e)},programs:c,dispose:function(){l.dispose()}}}=0;unction Wo(e,t){const n=new Go,i=),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let e=0;e<9;e++)r.probe.push(new hi);const s=new hi,a=new Gi,o=new Gi;return{setup:function(s,a){let o=0,l=0,c=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let u=0,h=0,d=0,p=0,f=0,m=0,g=0,v=0,y=0,x=0;s.sort(Vo);const _=!0!==a?Math.PI:1;for(let e=0,t=s.length;e<t;e++){const t=s[e],a=t.color,b=t.intensity,w=t.distance,M=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)o+=a.r*b*_,l+=a.g*b*_,c+=a.b*b*_;else if(t.isLightProbe)for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],b);else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*_),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.directionalShadow[u]=n,r.directionalShadowMap[u]=M,r.directionalShadowMatrix[u]=t.shadow.matrix,m++}r.directional[u]=e,u++}else if(t.isSpotLight){const e=n.get(t);e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(a).multiplyScalar(b*_),e.distance=w,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,r.spot[d]=e;const s=t.shadow;if(t.map&&(r.spotLightMap[y]=t.map,y++,s.updateMatrices(t),t.castShadow&&x++),r.spotLightMatrix[d]=s.matrix,t.castShadow){const e=i.get(t);e.shadowBias=s.bias,e.shadowNormalBias=s.normalBias,e.shadowRadius=s.radius,e.shadowMapSize=s.mapSize,r.spotShadow[d]=e,r.spotShadowMap[d]=M,v++}d++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(a).multiplyScalar(b),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[p]=e,p++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*_),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,r.pointShadow[h]=n,r.pointShadowMap[h]=M,r.pointShadowMatrix[h]=t.shadow.matrix,g++}r.point[h]=e,h++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(b*_),e.groundColor.copy(t.groundColor).multiplyScalar(b*_),r.hemi[f]=e,f++}}p>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=Is.LTC_FLOAT_1,r.rectAreaLTC2=Is.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=Is.LTC_HALF_1,r.rectAreaLTC2=Is.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const b=r.hash;b.directionalLength===u&&b.pointLength===h&&b.spotLength===d&&b.rectAreaLength===p&&b.hemiLength===f&&b.numDirectionalShadows===m&&b.numPointShadows===g&&b.numSpotShadows===v&&b.numSpotMaps===y||(r.directional.length=u,r.spot.length=d,r.rectArea.length=p,r.point.length=h,r.hemi.length=f,r.directionalShadow.length=m,r.directionalShadowMap.length=m,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=m,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=v+y-x,r.spotLightMap.length=y,r.numSpotLightShadowsWithMaps=x,b.directionalLength=u,b.pointLength=h,b.spotLength=d,b.rectAreaLength=p,b.hemiLength=f,b.numDirectionalShadows=m,b.numPointShadows=g,b.numSpotShadows=v,b.numSpotMaps=y,r.version=Ho++)},setupView:state:r}}ass Xo extends Tr{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Nt,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}onst Yo="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",Zo="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function Jo(e,t,n){let i=new Cs;const r=new Dn,s=new Dn,a=new ii,o=new Xo({depthPacking:kt}),l=new qo,c={},u=n.maxTextureSize,d={[f]:m,[m]:f,[g]:g},v=new fs({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Dn},radius:{value:4}},vertexShader:Yo,fragmentShader:Zo}),x=v.clone();x.defines.HORIZONTAL_PASS=1;const _=new Xr;_.setAttribute("position",new Pr(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const b=new os(_,v),w=this;unction S(t,n,i,r,s,a){let u=null;const h=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==h)u=h;else if(u=!0===i.isPointLight?l:o,e.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const e=u.uuid,t=n.uuid;let i=c[e];void 0===i&&(i={},c[e]=i);let r=i[t];void 0===r&&(r=u.clone(),i[t]=r),u=r}return u.visible=n.visible,u.wireframe=n.wireframe,u.side=a===p?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:d[n.side],u.alphaMap=n.alphaMap,u.alphaTest=n.alphaTest,u.map=n.map,u.clipShadows=n.clipShadows,u.clippingPlanes=n.clippingPlanes,u.clipIntersection=n.clipIntersection,u.displacementMap=n.displacementMap,u.displacementScale=n.displacementScale,u.displacementBias=n.displacementBias,u.wireframeLinewidth=n.wireframeLinewidth,u.linewidth=n.linewidth,!0===i.isPointLight&&!0===u.isMeshDistanceMaterial&&(u.referencePosition.setFromMatrixPosition(i.matrixWorld),u.nearDistance=r,u.farDistance=s),u}his.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=h,this.render=function(t,n,o){if(!1===w.enabled)return;if(!1===w.autoUpdate&&!1===w.needsUpdate)return;if(0===t.length)return;const l=e.getRenderTarget(),c=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),d=e.state;d.setBlending(y),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let l=0,c=t.length;l<c;l++){const c=t[l],h=c.shadow;if(void 0===h){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===h.autoUpdate&&!1===h.needsUpdate)continue;r.copy(h.mapSize);const f=h.getFrameExtents();if(r.multiply(f),s.copy(h.mapSize),(r.x>u||r.y>u)&&(r.x>u&&(s.x=Math.floor(u/f.x),r.x=s.x*f.x,h.mapSize.x=s.x),r.y>u&&(s.y=Math.floor(u/f.y),r.y=s.y*f.y,h.mapSize.y=s.y)),null===h.map){const e=this.type!==p?{minFilter:de,magFilter:de}:{};h.map=new ri(r.x,r.y,e),h.map.texture.name=c.name+".shadowMap",h.camera.updateProjectionMatrix()}e.setRenderTarget(h.map),e.clear();const m=h.getViewportCount();for(let e=0;e<m;e++){const t=h.getViewport(e);a.set(s.x*t.x,s.y*t.y,s.x*t.z,s.y*t.w),d.viewport(a),h.updateMatrices(c,e),i=h.getFrustum(),T(n,o,h.camera,c,this.type)}!0!==h.isPointLightShadow&&this.type===p&&M(h,o),h.needsUpdate=!1}w.needsUpdate=!1,e.setRenderTarget(l,c,h)}}function Ko(e,t,n){const i=n.isWebGL2;const r=new s=new function(){let t=!1,n=null,i=null,r=null;return{setTest:function(e){e?be(2929):we(2929)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){switch(t){case U:e.depthFunc(512);break;case G:e.depthFunc(519);break;case H:e.depthFunc(513);break;case V:e.depthFunc(515);break;case W:e.depthFunc(514);break;case $:e.depthFunc(518);break;case j:e.depthFunc(516);break;case X:e.depthFunc(517);break;default:e.depthFunc(515)}i=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:},c=new u=new WeakMap,h=new WeakMap;let d={},p={},f=new WeakMap,v=[],q=null,Y=!1,Z=null,J=null,K=null,Q=null,ee=null,te=null,ne=null,ie=!1,re=null,se=null,ae=null,oe=null,le=null;const ce=e.getParameter(35661);let ue=!1,he=0;const de=e.getParameter(7938);-1!==de.indexOf("WebGL")?(he=parseFloat(/^WebGL (\d)/.exec(de)[1]),ue=he>=1):-1!==de.indexOf("OpenGL ES")&&(he=parseFloat(/^OpenGL ES (\d)/.exec(de)[1]),ue=he>=2);let pe=null,fe={};const me=e.getParameter(3088),ge=e.getParameter(2978),ve=(new ii).fromArray(me),ye=(new ii).fromArray(ge);onst _e={};function be(t){!0!==d[t]&&(e.enable(t),d[t]=!0)}e[3553]=xe(3553,3553,1),_e[34067]=xe(34067,34069,6),r.setClear(0,0,0,1),s.setClear(1),c.setClear(0),be(2929),s.setFunc(V),Ee(!1),Ce(o),be(2884),Te(y);const Me={[S]:32774,[T]:32778,[E]:32779};if(i)Me[C]=32775,Me[A]=32776;else{const e=t.get("EXT_blend_minmax");null!==e&&(Me[C]=e.MIN_EXT,Me[A]=e.MAX_EXT)}const Se={[P]:0,[L]:1,[R]:768,[D]:770,[F]:776,[k]:774,[z]:772,[I]:769,[O]:771,[B]:775,[N]:773};function Te(t,n,i,r,s,a,o,l){if(t!==y){if(!1===Y&&(be(3042),Y=!0),t===M)s=s||n,a=a||i,o=o||r,n===J&&s===ee||(e.blendEquationSeparate(Me[n],Me[s]),J=n,ee=s),i===K&&r===Q&&a===te&&o===ne||(e.blendFuncSeparate(Se[i],Se[r],Se[a],Se[o]),K=i,Q=r,te=a,ne=o),Z=t,ie=!1;else if(t!==Z||l!==ie){if(J===S&&ee===S||(e.blendEquation(32774),J=S,ee=S),l)switch(t){case x:e.blendFuncSeparate(1,771,1,771);break;case _:e.blendFunc(1,1);break;case b:e.blendFuncSeparate(0,769,0,1);break;case w:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case x:e.blendFuncSeparate(770,771,1,771);break;case _:e.blendFunc(770,1);break;case b:e.blendFuncSeparate(0,769,0,1);break;case w:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}K=null,Q=null,te=null,ne=null,Z=t,ie=l}}else!0===Y&&(we(3042),Y=!1)}urn{buffers:{color:r,depth:s,stencil:c},enable:be,disable:we,bindFramebuffer:drawBuffers:useProgram:setBlending:Te,setMaterial:setFlipSided:Ee,setCullFace:Ce,setLineWidth:setPolygonOffset:Ae,setScissorTest:activeTexture:bindTexture:unbindTexture:compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexImage3D:function(){try{e.compressedTexImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},updateUBOMapping:uniformBlockBinding:texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage3D:scissor:function(t){!1===ve.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),ve.copy(t))},viewport:reset:}function Qo(e,t,n,i,r,s,a){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,u=r.maxTextureSize,h=r.maxSamples,d=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,p="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),f=new WeakMap;let m;const g=new WeakMap;let v=!1;try{v="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}t R={[ce]:10497,[ue]:33071,[he]:33648},I={[de]:9728,[pe]:9984,[me]:9986,[ve]:9729,[ye]:9985,[_e]:9987};cateTextureUnit=this.resetTextureUnits=this.setTexture2D=L,this.setTexture2DArray=function(e,t){const r=i.get(e);e.version>0&&r.__version!==e.version?z(r,e,t):n.bindTexture(35866,r.__webglTexture,33984+t)},this.setTexture3D=this.setTextureCube=this.rebindTextures=this.setupRenderTarget=this.updateRenderTargetMipmap=this.updateMultisampleRenderTarget=this.setupDepthRenderbuffer=B,this.setupFrameBufferTexture=N,this.useMultisampledRTT=U}function el(e,t,n){const i=n.isWebGL2;return{convert:function(n,r=null){let s;if(n===we)return 5121;if(n===Le)return 32819;if(n===Re)return 32820;if(n===Me)return 5120;if(n===Se)return 5122;if(n===Te)return 5123;if(n===Ee)return 5124;if(n===Ce)return 5125;if(n===Ae)return 5126;if(n===Pe)return i?5131:(s=t.get("OES_texture_half_float"),null!==s?s.HALF_FLOAT_OES:null);if(n===De)return 6406;if(n===Oe)return 6408;if(n===ze)return 6409;if(n===Ne)return 6410;if(n===ke)return 6402;if(n===Be)return 34041;if(n===vn)return s=t.get("EXT_sRGB"),null!==s?s.SRGB_ALPHA_EXT:null;if(n===Fe)return 6403;if(n===Ue)return 36244;if(n===Ge)return 33319;if(n===He)return 33320;if(n===Ve)return 36249;if(n===We||n===$e||n===je||n===Xe)if(r===zt){if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===s)return null;if(n===We)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===$e)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===je)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Xe)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(s=t.get("WEBGL_compressed_texture_s3tc"),null===s)return null;if(n===We)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===$e)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===je)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Xe)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===qe||n===Ye||n===Ze||n===Je){if(s=t.get("WEBGL_compressed_texture_pvrtc"),null===s)return null;if(n===qe)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Ye)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Ze)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Je)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===Ke)return s=t.get("WEBGL_compressed_texture_etc1"),null!==s?s.COMPRESSED_RGB_ETC1_WEBGL:null;if(n===Qe||n===et){if(s=t.get("WEBGL_compressed_texture_etc"),null===s)return null;if(n===Qe)return r===zt?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===et)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}if(n===tt||n===nt||n===it||n===rt||n===st||n===at||n===ot||n===lt||n===ct||n===ut||n===ht||n===dt||n===pt||n===ft){if(s=t.get("WEBGL_compressed_texture_astc"),null===s)return null;if(n===tt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===nt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===it)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===rt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===st)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===at)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===ot)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===lt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===ct)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===ut)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===ht)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===dt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===pt)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===ft)return r===zt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===mt){if(s=t.get("EXT_texture_compression_bptc"),null===s)return null;if(n===mt)return r===zt?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(n===gt||n===vt||n===yt||n===xt){if(s=t.get("EXT_texture_compression_rgtc"),null===s)return null;if(n===mt)return s.COMPRESSED_RED_RGTC1_EXT;if(n===vt)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===yt)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===xt)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Ie?i?34042:(s=t.get("WEBGL_depth_texture"),null!==s?s.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[n]?e[n]:null}}}lass nl extends dr{constructor(){super(),this.isGroup=!0,this.type="Group"}}const il={type:"move"};ass al extends yn{constructor(e,t){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=1,l=null,c=null,u=null,h=null,d=null,p=null;const f=t.getContextAttributes();let m=null,g=null;const v=[],y=[],x=new Set,_=new Map,b=new gs;b.layers.enable(1),b.viewport=new ii;const w=new gs;w.layers.enable(2),w.viewport=new ii;const M=[b,w],S=new tl;S.layers.enable(1),S.layers.enable(2);let T=null,E=null;s.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=v[e];return void 0===t&&(t=new rl,v[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=v[e];return void 0===t&&(t=new rl,v[e]=t),t.getGripSpace()},this.getHand=this.setFramebufferScaleFactor=function(e){r=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=this.getReferenceSpace=this.setReferenceSpace=function(e){l=e},this.getBaseLayer=this.getBinding=function(){return u},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=const L=new hi,R=new hi;his.updateCamera=this.getCamera=function(){return S},this.getFoveation=this.setFoveation=this.getPlanes=function(){return x};let D=null;const O=new As;O.setAnimationLoop((function(t,i){if(c=i.getViewerPose(l||s),p=i,null!==c){const t=c.views;null!==d&&(e.setRenderTargetFramebuffer(g,d.framebuffer),e.setRenderTarget(g));let n=!1;t.length!==S.cameras.length&&(S.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const r=t[i];let s=null;if(null!==d)s=d.getViewport(r);else{const t=u.getViewSubImage(h,r);s=t.viewport,0===i&&(e.setRenderTargetTextures(g,t.colorTexture,h.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(g))}let a=M[i];void 0===a&&(a=new gs,a.layers.enable(i),a.viewport=new ii,M[i]=a),a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===i&&S.matrix.copy(a.matrix),!0===n&&S.cameras.push(a)}}for(let e=0;e<v.length;e++){const t=y[e],n=v[e];null!==t&&void 0!==n&&n.update(t,i,l||s)}if(D&&D(t,i),i.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:i.detectedPlanes});let e=null;for(const t of x)i.detectedPlanes.has(t)||(null===e&&(e=[]),e.push(t));if(null!==e)for(const t of e)x.delete(t),_.delete(t),n.dispatchEvent({type:"planeremoved",data:t});for(const e of i.detectedPlanes)if(x.has(e)){const t=_.get(e);e.lastChangedTime>t&&(_.set(e,e.lastChangedTime),n.dispatchEvent({type:"planechanged",data:e}))}else x.add(e),_.set(e,i.lastChangedTime),n.dispatchEvent({type:"planeadded",data:e})}p=null})),this.setAnimationLoop=function(e){D=e},this.dispose=function(){}}}function ol(e,t){eturn{refreshFogUniforms:refreshMaterialUniforms:function(e,i,r,s,a){i.isMeshBasicMaterial||i.isMeshLambertMaterial?n(e,i):i.isMeshToonMaterial?(n(e,i),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,i)):i.isMeshPhongMaterial?(n(e,i),e,i)):i.isMeshStandardMaterial?(n(e,i),e,i),i.isMeshPhysicalMaterial&&e,i,a)):i.isMeshMatcapMaterial?(n(e,i),e,i)):i.isMeshDepthMaterial?n(e,i):i.isMeshDistanceMaterial?(n(e,i),e,i)):i.isMeshNormalMaterial?n(e,i):i.isLineBasicMaterial?(e,i),i.isLineDashedMaterial&&e,i)):i.isPointsMaterial?e,i,r,s):i.isSpriteMaterial?e,i):i.isShadowMaterial?(e.color.value.copy(i.color),e.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function ll(e,t,n,i){let r={},s={},a=[];const o=n.isWebGL2?e.getParameter(35375):0;urn{bind:update:function(n,h){let d=r[n.id];void 0===d&&(!n),d=n),r[n.id]=d,n.addEventListener("dispose",u));const p=h.program;i.updateUBOMapping(n,p);const f=t.render.frame;s[n.id]!==f&&(!n),s[n.id]=f)},dispose:}function cl(e={}){this.isWebGLRenderer=!0;const t=void 0!==e.canvas?e.canvas:),n=void 0!==e.context?e.context:null,r=void 0===e.depth||e.depth,s=void 0===e.stencil||e.stencil,a=void 0!==e.antialias&&e.antialias,o=void 0===e.premultipliedAlpha||e.premultipliedAlpha,l=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,c=void 0!==e.powerPreference?e.powerPreference:"default",u=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat;let h;h=null!==n?n.getContextAttributes().alpha:void 0!==e.alpha&&e.alpha;let d=null,p=null;const v=[],y=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=Ot,this.physicallyCorrectLights=!1,this.toneMapping=J,this.toneMappingExposure=1;const x=this;let _=!1,b=0,w=0,M=null,S=-1,T=null;const E=new ii,C=new ii;let A=null,P=t.width,L=t.height,R=1,I=null,D=null;const O=new ii(0,0,P,L),z=new ii(0,0,P,L);let N=!1;const k=new Cs;let B=!1,F=!1,U=null;const G=new Gi,H=new Dn,V=new hi,W={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};et j,X,q,Y,Z,K,Q,ee,te,ne,ie,re,se,ae,oe,le,ce,ue,he,de,pe,fe,me,ge,ve=n;ry{const e={alpha:!0,depth:r,stencil:s,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${i}`),t.addEventListener("webglcontextlost",Me,!1),t.addEventListener("webglcontextrestored",Se,!1),t.addEventListener("webglcontextcreationerror",Te,!1),null===ve){const t=["webgl2","webgl","experimental-webgl"];if(!0===x.isWebGL1Renderer&&t.shift(),ve=ye(t,e),null===ve)throw ye(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===ve.getShaderPrecisionFormat&&(ve.getShaderPrecisionFormat=}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}e();const be=new al(x,ve);.xr=be,this.getContext=function(){return ve},this.getContextAttributes=function(){return ve.getContextAttributes()},this.forceContextLoss=function(){const e=j.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=this.getPixelRatio=function(){return R},this.setPixelRatio=this.getSize=this.setSize=this.getDrawingBufferSize=this.setDrawingBufferSize=this.getCurrentViewport=function(e){return e.copy(E)},this.getViewport=function(e){return e.copy(O)},this.setViewport=function(e,t,n,i){e.isVector4?O.set(e.x,e.y,e.z,e.w):O.set(e,t,n,i),q.viewport(E.copy(O).multiplyScalar(R).floor())},this.getScissor=this.setScissor=this.getScissorTest=function(){return N},this.setScissorTest=this.setOpaqueSort=function(e){I=e},this.setTransparentSort=function(e){D=e},this.getClearColor=this.setClearColor=function(){ue.setClearColor.apply(ue,arguments)},this.getClearAlpha=this.setClearAlpha=this.clear=this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=this.dispose=this.renderBufferDirect=function(e,t,n,i,r,s){null===t&&(t=W);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(e,t,n,i,r){!0!==t.isScene&&(t=W);K.resetTextureUnits();const s=t.fog,a=i.isMeshStandardMaterial?t.environment:null,o=null===M?x.outputEncoding:!0===M.isXRRenderTarget?M.texture.encoding:Ot,l=(i.isMeshStandardMaterial?ee:Q).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,u=!!i.normalMap&&!!n.attributes.tangent,h=!!n.morphAttributes.position,d=!!n.morphAttributes.normal,f=!!n.morphAttributes.color,m=i.toneMapped?x.toneMapping:J,g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,y=Z.get(i),_=p.state.lights;if(!0===B&&(!0===F||e!==T)){const t=e===T&&i.id===S;le.setState(i,e,t)}let b=!1;i.version===y.__version?y.needsLights&&y.lightsStateVersion!==_.state.version||y.outputEncoding!==o||r.isInstancedMesh&&!1===y.instancing?b=!0:r.isInstancedMesh||!0!==y.instancing?r.isSkinnedMesh&&!1===y.skinning?b=!0:r.isSkinnedMesh||!0!==y.skinning?y.envMap!==l||!0===i.fog&&y.fog!==s?b=!0:void 0===y.numClippingPlanes||y.numClippingPlanes===le.numPlanes&&y.numIntersection===le.numIntersection?(y.vertexAlphas!==c||y.vertexTangents!==u||y.morphTargets!==h||y.morphNormals!==d||y.morphColors!==f||y.toneMapping!==m||!0===X.isWebGL2&&y.morphTargetsCount!==v)&&(b=!0):b=!0:b=!0:b=!0:(b=!0,y.__version=i.version);let w=y.currentProgram;!0===b&&(w=Be(i,t,r));let E=!1,C=!1,A=!1;const P=w.getUniforms(),I=y.uniforms;q.useProgram(w.program)&&(E=!0,C=!0,A=!0);i.id!==S&&(S=i.id,C=!0);if(E||T!==e){if(P.setValue(ve,"projectionMatrix",e.projectionMatrix),X.logarithmicDepthBuffer&&P.setValue(ve,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),T!==e&&(T=e,C=!0,A=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const t=P.map.cameraPosition;void 0!==t&&t.setValue(ve,V.setFromMatrixPosition(e.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&P.setValue(ve,"isOrthographic",!0===e.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&P.setValue(ve,"viewMatrix",e.matrixWorldInverse)}if(r.isSkinnedMesh){P.setOptional(ve,r,"bindMatrix"),P.setOptional(ve,r,"bindMatrixInverse");const e=r.skeleton;e&&(X.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),P.setValue(ve,"boneTexture",e.boneTexture,K),P.setValue(ve,"boneTextureSize",e.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const D=n.morphAttributes;(void 0!==D.position||void 0!==D.normal||void 0!==D.color&&!0===X.isWebGL2)&&he.update(r,n,i,w);(C||y.receiveShadow!==r.receiveShadow)&&(y.receiveShadow=r.receiveShadow,P.setValue(ve,"receiveShadow",r.receiveShadow));i.isMeshGouraudMaterial&&null!==i.envMap&&(I.envMap.value=l,I.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);C&&(P.setValue(ve,"toneMappingExposure",x.toneMappingExposure),y.needsLights&&(z=A,(O=I).ambientLightColor.needsUpdate=z,O.lightProbe.needsUpdate=z,O.directionalLights.needsUpdate=z,O.directionalLightShadows.needsUpdate=z,O.pointLights.needsUpdate=z,O.pointLightShadows.needsUpdate=z,O.spotLights.needsUpdate=z,O.spotLightShadows.needsUpdate=z,O.rectAreaLights.needsUpdate=z,O.hemisphereLights.needsUpdate=z),s&&!0===i.fog&&se.refreshFogUniforms(I,s),se.refreshMaterialUniforms(I,i,R,L,U),mo.upload(ve,y.uniformsList,I,K));var O,z;i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(mo.upload(ve,y.uniformsList,I,K),i.uniformsNeedUpdate=!1);i.isSpriteMaterial&&P.setValue(ve,"center",r.center);if(P.setValue(ve,"modelViewMatrix",r.modelViewMatrix),P.setValue(ve,"normalMatrix",r.normalMatrix),P.setValue(ve,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const e=i.uniformsGroups;for(let t=0,n=e.length;t<n;t++)if(X.isWebGL2){const n=e[t];ge.update(n,w),ge.bind(n,w)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return w}(e,t,n,i,r);q.setMaterial(i,a);let l=n.index,c=1;!0===i.wireframe&&(l=ne.getWireframeAttribute(n),c=2);const u=n.drawRange,h=n.attributes.position;let d=u.start*c,f=(u.start+u.count)*c;null!==s&&(d=Math.max(d,s.start*c),f=Math.min(f,(s.start+s.count)*c)),null!==l?(d=Math.max(d,0),f=Math.min(f,l.count)):null!=h&&(d=Math.max(d,0),f=Math.min(f,h.count));const m=f-d;if(m<0||m===1/0)return;let g;me.setup(r,i,o,n,l);let v=de;if(null!==l&&(g=te.get(l),v=pe,v.setIndex(g)),r.isMesh)!0===i.wireframe?(q.setLineWidth(i.wireframeLinewidth*$()),v.setMode(1)):v.setMode(4);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),q.setLineWidth(e*$()),r.isLineSegments?v.setMode(1):r.isLineLoop?v.setMode(2):v.setMode(3)}else r.isPoints?v.setMode(0):r.isSprite&&v.setMode(4);if(r.isInstancedMesh)v.renderInstances(d,m,r.count);else if(n.isInstancedBufferGeometry){const e=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,t=Math.min(n.instanceCount,e);v.renderInstances(d,m,t)}else v.render(d,m)},this.compile=let Ce=null;function Le(){Ie.stop()}onst Ie=new As;unction ze(e,t,n,i){const r=e.opaque,s=e.transmissive,o=e.transparent;p.setupLightsView(n),!0===B&&le.setGlobalState(x.clippingPlanes,n),s.length>0&&r,t,n),i&&q.viewport(E.copy(i)),r.length>0&&Ne(r,t,n),s.length>0&&Ne(s,t,n),o.length>0&&Ne(o,t,n),q.buffers.depth.setTest(!0),q.buffers.depth.setMask(!0),q.buffers.color.setMask(!0),q.setPolygonOffset(!1)}etAnimationLoop((),"undefined"!=typeof self&&Ie.setContext(self),this.setAnimationLoop=be.addEventListener("sessionstart",Le),be.addEventListener("sessionend",Re),this.render=this.getActiveCubeFace=function(){return b},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return M},this.setRenderTargetTextures=this.setRenderTargetFramebuffer=this.setRenderTarget=this.readRenderTargetPixels=this.copyFramebufferToTexture=this.copyTextureToTexture=this.copyTextureToTexture3D=this.initTexture=this.resetState="undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}l.prototype.isWebGL1Renderer=!0;t ml=new hi;t yl;const xl=new hi,_l=new hi,bl=new hi,wl=new Dn,Ml=new Dn,Sl=new Gi,Tl=new hi,El=new hi,Cl=new hi,Al=new Dn,Pl=new Dn,Ll=new Dn;nst Dl=new hi,Ol=new hi;onst Nl=new hi,kl=new ii,Bl=new ii,Fl=new hi,Ul=new Gi;st Wl=new Gi,$l=new Gi;nst ql=new Gi,Yl=new Gi,Zl=[],Jl=new Gi,Kl=new os;class Ql extends os{tColorAt(e,t){t.fromArray(this.instanceColor.array,3*e)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,16*e)}ateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}onst tc=new hi,nc=new hi,ic=new Gi,rc=new Ui,sc=new Ii;onst oc=new hi,lc=new hi;st dc=new Gi,pc=new Ui,fc=new Ii,mc=new hi;ss xc extends ni{c=new hi,Ac=new Ec,Pc=new Ec,Lc=new Ec;kc extends Mc{constructor(e=new Dn,t=new Dn){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new Dn){const n=t;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}opy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Bc extends Mc{y(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}Hc=Object.freeze({__proto__:null,ArcCurve:Tc,CatmullRomCurve3:Rc,CubicBezierCurve:zc,CubicBezierCurve3:Nc,EllipseCurve:Sc,LineCurve:kc,LineCurve3:Bc,QuadraticBezierCurve:Fc,QuadraticBezierCurve3:Uc,SplineCurve:Gc});ass $c extends Xr{tatic fromJSON(e){return new $c(e.points,e.segments,e.phiStart,e.phiLength)}}s Zc extends Xr{nst Kc=new hi,Qc=new hi,eu=new hi,tu=new Mr;class nu extends Xr{onst ru=ctor(e=new iu([new Dn(.5,.5),new Dn(-.5,.5),new Dn(-.5,-.5),new Dn(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],r=[];for(let t=0,n=e.length;t<n;t++){s(e[t])}function s(e){const s=[],a=void 0!==t.curveSegments?t.curveSegments:12,o=void 0!==t.steps?t.steps:1,l=void 0!==t.depth?t.depth:1;let c=void 0===t.bevelEnabled||t.bevelEnabled,u=void 0!==t.bevelThickness?t.bevelThickness:.2,h=void 0!==t.bevelSize?t.bevelSize:u-.1,d=void 0!==t.bevelOffset?t.bevelOffset:0,p=void 0!==t.bevelSegments?t.bevelSegments:3;const f=t.extrudePath,m=void 0!==t.UVGenerator?t.UVGenerator:Du;let g,v,y,x,_,b=!1;f&&(g=f.getSpacedPoints(o),b=!0,c=!1,v=f.computeFrenetFrames(o,!1),y=new hi,x=new hi,_=new hi),c||(p=0,u=0,h=0,d=0);const w=e.extractPoints(a);let M=w.shape;const S=w.holes;if(!Pu.isClockWise(M)){M=M.reverse();for(let e=0,t=S.length;e<t;e++){const t=S[e];Pu.isClockWise(t)&&(S[e]=t.reverse())}}const T=Pu.triangulateShape(M,S),E=M;for(let e=0,t=S.length;e<t;e++){const t=S[e];M=M.concat(t)}onst A=M.length,P=T.length;onst R=[];for(let e=0,t=E.length,n=t-1,i=e+1;e<t;e++,n++,i++)n===t&&(n=0),i===t&&(i=0),R[e]=L(E[e],E[n],E[i]);const I=[];let D,O=R.concat();for(let e=0,t=S.length;e<t;e++){const t=S[e];D=[];for(let e=0,n=t.length,i=n-1,r=e+1;e<n;e++,i++,r++)i===n&&(i=0),r===n&&(r=0),D[e]=L(t[e],t[i],t[r]);I.push(D),O=O.concat(D)}for(let e=0;e<p;e++){const t=e/p,n=u*Math.cos(t*Math.PI/2),i=h*Math.sin(t*Math.PI/2)+d;for(let e=0,t=E.length;e<t;e++){const t=C(E[e],R[e],i);k(t.x,t.y,-n)}for(let e=0,t=S.length;e<t;e++){const t=S[e];D=I[e];for(let e=0,r=t.length;e<r;e++){const r=C(t[e],D[e],i);k(r.x,r.y,-n)}}}const z=h+d;for(let e=0;e<A;e++){const t=c?C(M[e],O[e],z):M[e];b?(x.copy(v.normals[0]).multiplyScalar(t.x),y.copy(v.binormals[0]).multiplyScalar(t.y),_.copy(g[0]).add(x).add(y),k(_.x,_.y,_.z)):k(t.x,t.y,0)}for(let e=1;e<=o;e++)for(let t=0;t<A;t++){const n=c?C(M[t],O[t],z):M[t];b?(x.copy(v.normals[e]).multiplyScalar(n.x),y.copy(v.binormals[e]).multiplyScalar(n.y),_.copy(g[e]).add(x).add(y),k(_.x,_.y,_.z)):k(n.x,n.y,l/o*e)}for(let e=p-1;e>=0;e--){const t=e/p,n=u*Math.cos(t*Math.PI/2),i=h*Math.sin(t*Math.PI/2)+d;for(let e=0,t=E.length;e<t;e++){const t=C(E[e],R[e],i);k(t.x,t.y,l+n)}for(let e=0,t=S.length;e<t;e++){const t=S[e];D=I[e];for(let e=0,r=t.length;e<r;e++){const r=C(t[e],D[e],i);b?k(r.x,r.y+g[o-1].y,g[o-1].x+n):k(r.x,r.y,l+n)}}}his.setAttribute("position",new Br(i,3)),this.setAttribute("uv",new Br(r,2)),this.computeVertexNormals()}onst Du={generateTopUV:generateSideWallUV:;ass Nu extends Xr{tatic fromJSON(e){return new Nu(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}s Gu extends Xr{tatic fromJSON(e){return new Gu(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}} $u=Object.freeze({__proto__:null,BoxGeometry:cs,CapsuleGeometry:jc,CircleGeometry:Xc,ConeGeometry:Yc,CylinderGeometry:qc,DodecahedronGeometry:Jc,EdgesGeometry:nu,ExtrudeGeometry:Iu,IcosahedronGeometry:Ou,LatheGeometry:$c,OctahedronGeometry:zu,PlaneGeometry:Ls,PolyhedronGeometry:Zc,RingGeometry:Nu,ShapeGeometry:ku,SphereGeometry:Bu,TetrahedronGeometry:Fu,TorusGeometry:Uu,TorusKnotGeometry:Gu,TubeGeometry:Hu,WireframeGeometry:Vu});s Zu extends Tr{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Zn(16777215),this.specular=new Zn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Bt,this.normalScale=new Dn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=q,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}class Ju extends Tr{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Zn(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Bt,this.normalScale=new Dn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}class Ku extends Tr{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Bt,this.normalScale=new Dn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}class Qu extends Tr{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Zn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Zn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Bt,this.normalScale=new Dn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=q,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}class eh extends Tr{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Zn(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Bt,this.normalScale=new Dn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}Object.freeze({__proto__:null,arraySlice:nh,convertArray:ih,flattenJSON:oh,getKeyframeOrder:sh,isTypedArray:rh,makeClipAdditive:function(e,t=0,n=e,i=30){i<=0&&(i=30);const r=n.tracks.length,s=t/i;for(let t=0;t<r;++t){const i=n.tracks[t],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const a=e.tracks.find(();if(void 0===a)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const u=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=u/3);const h=i.times.length-1;let d;if(s<=i.times[0]){const e=o,t=l-o;d=nh(i.values,e,t)}else if(s>=i.times[h]){const e=h*l+o,t=e+l-o;d=nh(i.values,e,t)}else{const e=i.createInterpolant(),t=o,n=l-o;e.evaluate(s),d=nh(e.resultBuffer,t,n)}if("quaternion"===r){(new ui).fromArray(d).normalize().conjugate().toArray(d)}const p=a.times.length;for(let e=0;e<p;++e){const t=e*u+c;if("quaternion"===r)ui.multiplyQuaternionsFlat(a.values,t,d,0,a.values,t);else{const e=u-2*c;for(let n=0;n<e;++n)a.values[t+n]-=d[n]}}}return e.blendMode=Lt,e},sortedArray:ah,subclip:);ototype.TimeBufferType=Float32Array,ph.prototype.ValueBufferType=Float32Array,ph.prototype.DefaultInterpolation=St;class fh extends ph{}fh.prototype.ValueTypeName="bool",fh.prototype.ValueBufferType=Array,fh.prototype.DefaultInterpolation=Mt,fh.prototype.InterpolantFactoryMethodLinear=void 0,fh.prototype.InterpolantFactoryMethodSmooth=void 0;class mh extends ph{}mh.prototype.ValueTypeName="color";class gh extends ph{}gh.prototype.ValueTypeName="number";.prototype.ValueTypeName="quaternion",yh.prototype.DefaultInterpolation=St,yh.prototype.InterpolantFactoryMethodSmooth=void 0;class xh extends ph{}xh.prototype.ValueTypeName="string",xh.prototype.ValueBufferType=Array,xh.prototype.DefaultInterpolation=Mt,xh.prototype.InterpolantFactoryMethodLinear=void 0,xh.prototype.InterpolantFactoryMethodSmooth=void 0;class _h extends ph{}_h.prototype.ValueTypeName="vector";class bh{constructor(e,t=-1,n,i=Pt){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Mn(),this.duration<0&&this.resetDuration()}turn this.constructor.toJSON(this)}}onst Mh={enabled:!1,files:{},add:get:remove:clear:function(){this.files={}}};onst Th=new Sh;onst Ch={};ass Lh extends Eh{constructor(e){super(e)}lass Rh extends Eh{constructor(e){super(e)}Bh=new Gi,Fh=new hi,Uh=new hi;st Wh=new Gi,$h=new hi,jh=new hi;s Jh extends Nh{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}rd extends Eh{constructor(e){super(e)}arse(e){const t={},n={};onst r=e.isInstancedBufferGeometry?new id:new Xr,s=e.data.index;if(void 0!==s){const e=Bn(s.type,s.array);r.setIndex(new Pr(e,1))}const a=e.data.attributes;for(const t in a){const n=a[t];let s;if(n.isInterleavedBufferAttribute){const t=i(e.data,n.data);s=new gl(t,n.itemSize,n.offset,n.normalized)}else{const e=Bn(n.type,n.array);s=new(n.isInstancedBufferAttribute?Xl:Pr)(e,n.itemSize,n.normalized)}void 0!==n.name&&(s.name=n.name),void 0!==n.usage&&s.setUsage(n.usage),void 0!==n.updateRange&&(s.updateRange.offset=n.updateRange.offset,s.updateRange.count=n.updateRange.count),r.setAttribute(t,s)}const o=e.data.morphAttributes;if(o)for(const t in o){const n=o[t],s=[];for(let t=0,r=n.length;t<r;t++){const r=n[t];let a;if(r.isInterleavedBufferAttribute){const t=i(e.data,r.data);a=new gl(t,r.itemSize,r.offset,r.normalized)}else{const e=Bn(r.type,r.array);a=new Pr(e,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),s.push(a)}r.morphAttributes[t]=s}e.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const l=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==l)for(let e=0,t=l.length;e!==t;++e){const t=l[e];r.addGroup(t.start,t.count,t.materialIndex)}const c=e.data.boundingSphere;if(void 0!==c){const e=new hi;void 0!==c.center&&e.fromArray(c.center),r.boundingSphere=new Ii(e,c.radius)}return e.name&&(r.name=e.name),e.userData&&(r.userData=e.userData),r}}class sd extends Eh{constructor(e){super(e)}eometries(e,t){const n={};if(void 0!==e){const i=new rd;for(let r=0,s=e.length;r<s;r++){let s;const a=e[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=i.parse(a);break;default:a.type in $u?s=$u[a.type].fromJSON(a,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),!0===s.isBufferGeometry&&void 0!==a.userData&&(s.userData=a.userData),n[a.uuid]=s}}return n}eTextures(e,t){onst i={};if(void 0!==e)for(let r=0,s=e.length;r<s;r++){const s=e[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);const a=t[s.image],o=a.data;let l;Array.isArray(o)?(l=new xs,6===o.length&&(l.needsUpdate=!0)):(l=o&&o.data?new Vl:new ni,o&&(l.needsUpdate=!0)),l.source=a,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=n(s.mapping,ad)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=n(s.wrap[0],od),l.wrapT=n(s.wrap[1],od)),void 0!==s.format&&(l.format=s.format),void 0!==s.type&&(l.type=s.type),void 0!==s.encoding&&(l.encoding=s.encoding),void 0!==s.minFilter&&(l.minFilter=n(s.minFilter,ld)),void 0!==s.magFilter&&(l.magFilter=n(s.magFilter,ld)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),void 0!==s.generateMipmaps&&(l.generateMipmaps=s.generateMipmaps),void 0!==s.premultiplyAlpha&&(l.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(l.unpackAlignment=s.unpackAlignment),void 0!==s.userData&&(l.userData=s.userData),i[s.uuid]=l}return i}parseObject(e,t,n,i,r){let s,a,o;function l(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}itch(e.type){case"Scene":s=new pl,void 0!==e.background&&(Number.isInteger(e.background)?s.background=new Zn(e.background):s.background=u(e.background)),void 0!==e.environment&&(s.environment=u(e.environment)),void 0!==e.fog&&("Fog"===e.fog.type?s.fog=new dl(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(s.fog=new hl(e.fog.color,e.fog.density))),void 0!==e.backgroundBlurriness&&(s.backgroundBlurriness=e.backgroundBlurriness),void 0!==e.backgroundIntensity&&(s.backgroundIntensity=e.backgroundIntensity);break;case"PerspectiveCamera":s=new gs(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(s.focus=e.focus),void 0!==e.zoom&&(s.zoom=e.zoom),void 0!==e.filmGauge&&(s.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(s.filmOffset=e.filmOffset),void 0!==e.view&&(s.view=Object.assign({},e.view));break;case"OrthographicCamera":s=new Gs(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(s.zoom=e.zoom),void 0!==e.view&&(s.view=Object.assign({},e.view));break;case"AmbientLight":s=new Jh(e.color,e.intensity);break;case"DirectionalLight":s=new Zh(e.color,e.intensity);break;case"PointLight":s=new qh(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":s=new Kh(e.color,e.intensity,e.width,e.height);break;case"SpotLight":s=new Vh(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":s=new kh(e.color,e.groundColor,e.intensity);break;case"LightProbe":s=(new ed).fromJSON(e);break;case"SkinnedMesh":a=l(e.geometry),o=c(e.material),s=new Gl(a,o),void 0!==e.bindMode&&(s.bindMode=e.bindMode),void 0!==e.bindMatrix&&s.bindMatrix.fromArray(e.bindMatrix),void 0!==e.skeleton&&(s.skeleton=e.skeleton);break;case"Mesh":a=l(e.geometry),o=c(e.material),s=new os(a,o);break;case"InstancedMesh":a=l(e.geometry),o=c(e.material);const t=e.count,n=e.instanceMatrix,i=e.instanceColor;s=new Ql(a,o,t),s.instanceMatrix=new Xl(new Float32Array(n.array),16),void 0!==i&&(s.instanceColor=new Xl(new Float32Array(i.array),i.itemSize));break;case"LOD":s=new zl;break;case"Line":s=new ac(l(e.geometry),c(e.material));break;case"LineLoop":s=new uc(l(e.geometry),c(e.material));break;case"LineSegments":s=new cc(l(e.geometry),c(e.material));break;case"PointCloud":case"Points":s=new gc(l(e.geometry),c(e.material));break;case"Sprite":s=new Rl(c(e.material));break;case"Group":s=new nl;break;case"Bone":s=new Hl;break;default:s=new dr}if(s.uuid=e.uuid,void 0!==e.name&&(s.name=e.name),void 0!==e.matrix?(s.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(s.matrixAutoUpdate=e.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==e.position&&s.position.fromArray(e.position),void 0!==e.rotation&&s.rotation.fromArray(e.rotation),void 0!==e.quaternion&&s.quaternion.fromArray(e.quaternion),void 0!==e.scale&&s.scale.fromArray(e.scale)),void 0!==e.castShadow&&(s.castShadow=e.castShadow),void 0!==e.receiveShadow&&(s.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(s.shadow.bias=e.shadow.bias),void 0!==e.shadow.normalBias&&(s.shadow.normalBias=e.shadow.normalBias),void 0!==e.shadow.radius&&(s.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&s.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(s.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(s.visible=e.visible),void 0!==e.frustumCulled&&(s.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(s.renderOrder=e.renderOrder),void 0!==e.userData&&(s.userData=e.userData),void 0!==e.layers&&(s.layers.mask=e.layers),void 0!==e.children){const a=e.children;for(let e=0;e<a.length;e++)s.add(this.parseObject(a[e],t,n,i,r))}if(void 0!==e.animations){const t=e.animations;for(let e=0;e<t.length;e++){const n=t[e];s.animations.push(r[n])}}if("LOD"===e.type){void 0!==e.autoUpdate&&(s.autoUpdate=e.autoUpdate);const t=e.levels;for(let e=0;e<t.length;e++){const n=t[e],i=s.getObjectByProperty("uuid",n.object);void 0!==i&&s.addLevel(i,n.distance,n.hysteresis)}}return s}const ad={UVMapping:ie,CubeReflectionMapping:re,CubeRefractionMapping:se,EquirectangularReflectionMapping:ae,EquirectangularRefractionMapping:oe,CubeUVReflectionMapping:le},od={RepeatWrapping:ce,ClampToEdgeWrapping:ue,MirroredRepeatWrapping:he},ld={NearestFilter:de,NearestMipmapNearestFilter:pe,NearestMipmapLinearFilter:me,LinearFilter:ve,LinearMipmapNearestFilter:ye,LinearMipmapLinearFilter:_e};et ud;ass pd extends ed{class fd extends ed{const md=new Gi,gd=new Gi,vd=new Gi;class yd{st bd=new hi,wd=new ui,Md=new hi,Sd=new hi;nst Cd=new hi,Ad=new ui,Pd=new hi,Ld=new hi;class Rd extends Ed{tOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}t Od="\\[\\]\\.:\\/",zd=new RegExp("["+Od+"]","g"),Nd="[^"+Od+"]",kd="[^"+Od.replace("\\.","")+"]",Bd=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",Nd)+/(WCOD+)?/.source.replace("WCOD",kd)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Nd)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Nd)+"$"),Fd=["material","materials","bones","map"];class Ud{alue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}etValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}etValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}getValue_unbound(e,t){this.bind(),this.getValue(e,t)}ind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let r=t.propertyIndex;if(e||(e=Ud.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let i=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(let t=0;t<e.length;t++)if(e[t].name===i){i=t;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);e=e.material.map;break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==i){if(void 0===e[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[i]}}const s=e[i];if(void 0===s){const n=t.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",e)}let a=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==e.morphTargetDictionary[r]&&(r=e.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}Ud.Composite=Ud.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ud.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ud.prototype.GetterByBindingType=[Ud.prototype._getValue_direct,Ud.prototype._getValue_array,Ud.prototype._getValue_arrayElement,Ud.prototype._getValue_toArray],Ud.prototype.SetterByBindingTypeAndVersioning=[[Ud.prototype._setValue_direct,Ud.prototype._setValue_direct_setNeedsUpdate,Ud.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ud.prototype._setValue_array,Ud.prototype._setValue_array_setNeedsUpdate,Ud.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ud.prototype._setValue_arrayElement,Ud.prototype._setValue_arrayElement_setNeedsUpdate,Ud.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ud.prototype._setValue_fromArray,Ud.prototype._setValue_fromArray_setNeedsUpdate,Ud.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Gd{ Hd{t(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}etEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}pFading(){const e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}etEffectiveTimeScale(){return this._effectiveTimeScale}xer(){return this._mixer}getClip(){return this._clip}Vd=new Float32Array(1);t jd=0;class Xd extends yn{dd(e){return this.uniforms.push(e),this}etName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}one(){return(new this.constructor).copy(this)}}lass Yd{et needsUpdate(e){!0===e&&this.version++}setBuffer(e){return this.buffer=e,this}etItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}unction Jd(e,t){return e.distance-t.distance}ass ep{py(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}one(){return(new this.constructor).copy(this)}}const tp=new Dn;class np{et(e,t){return this.min.copy(e),this.max.copy(t),this}one(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}ndByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}ct(e){return this.min.max(e.min),this.max.min(e.max),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const ip=new hi,rp=new hi;onst ap=new hi;class op extends dr{nst lp=new hi,cp=new Gi,up=new Gi;class hp extends cc{constructor(e){const t=dp(e),n=new Xr,i=[],r=[],s=new Zn(0,0,1),a=new Zn(0,1,0);for(let e=0;e<t.length;e++){const n=t[e];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}n.setAttribute("position",new Br(i,3)),n.setAttribute("color",new Br(r,3));super(n,new ec({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}ispose(){this.geometry.dispose(),this.material.dispose()}}lass pp extends os{ispose(){this.geometry.dispose(),this.material.dispose()}const fp=new hi,mp=new Zn,gp=new Zn;class vp extends dr{ass yp extends cc{ispose(){this.geometry.dispose(),this.material.dispose()}}class xp extends cc{constructor(e=10,t=16,n=8,i=64,r=4473924,s=8947848){r=new Zn(r),s=new Zn(s);const a=[],o=[];if(t>1)for(let n=0;n<t;n++){const i=n/t*(2*Math.PI),l=Math.sin(i)*e,c=Math.cos(i)*e;a.push(0,0,0),a.push(l,0,c);const u=1&n?r:s;o.push(u.r,u.g,u.b),o.push(u.r,u.g,u.b)}for(let t=0;t<n;t++){const l=1&t?r:s,c=e-e/n*t;for(let e=0;e<i;e++){let t=e/i*(2*Math.PI),n=Math.sin(t)*c,r=Math.cos(t)*c;a.push(n,0,r),o.push(l.r,l.g,l.b),t=(e+1)/i*(2*Math.PI),n=Math.sin(t)*c,r=Math.cos(t)*c,a.push(n,0,r),o.push(l.r,l.g,l.b)}}const l=new Xr;l.setAttribute("position",new Br(a,3)),l.setAttribute("color",new Br(o,3));super(l,new ec({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const _p=new hi,bp=new hi,wp=new hi;class Mp extends dr{ispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}const Sp=new hi,Tp=new ms;class Ep extends cc{pose(){this.geometry.dispose(),this.material.dispose()}}onst Ap=new fi;class Pp extends cc{ose(){this.geometry.dispose(),this.material.dispose()}}class Lp extends cc{spose(){this.geometry.dispose(),this.material.dispose()}}class Rp extends ac{nst Ip=new hi;let Dp,Op;class zp extends dr{ Np extends cc{ass kp{Bp=Fp();ar Up=Object.freeze({__proto__:null,fromHalfFloat:toHalfFloat:);class Gp extends cs{class Hp extends jc{constructor(e,t,n,i){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(e,t,n,i)}}class Vp extends Xc{class Wp extends Yc{class $p extends qc{class jp extends Jc{constructorclass Xp extends Iu{class qp extends Ou{constructor(e,t){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(e,t)}}class Yp extends $c{constructor(e,t,n,i){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(e,t,n,i)}}class Zp extends zu{constructor(e,t){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(e,t)}}class Jp extends Ls{constructor(e,t,n,i){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(e,t,n,i)}}class Kp extends Zc{constructor(e,t,n,i){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(e,t,n,i)}}class Qp extends Nu{constructor(e,t,n,i,r,s){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(e,t,n,i,r,s)}}class ef extends ku{constructor(e,t){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(e,t)}}class tf extends Bu{constructor(e,t,n,i,r,s,a){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(e,t,n,i,r,s,a)}}class nf extends Fu{constructor(e,t){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(e,t)}}class rf extends Uu{constructor(e,t,n,i,r){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(e,t,n,i,r)}}class sf extends Gu{constructor(e,t,n,i,r,s){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(e,t,n,i,r,s)}}class af extends Hu{"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:i}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=i)},function(e,t,n){"use strict";e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";.exports=e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t="mediaQuery"+(new Date).getTime().toString(),n='<span class="'+t+'"><style>.'+t+"{font-size: 0 !important;}@media(min-width: "+e.toString()+"px){."+t+"{font-size: 20px !important;}}</style></span>",i=$("body").append(n).find("."+t),r="20px"===i.css("font-size");return i.remove(),r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={setCookie:function(e,t,n){document.cookie=e+"="+t+"; expires="+n.toUTCString()},getCookie:function(e){for(var t=document.cookie.split(";"),n=0;n<t.length;n++){var i=t[n].trim();if(0===i.indexOf(e+"="))return i.substring(e.length+1)}return""},deleteCookie:},function(e,t,n){},function(e,t,n){},function(t,n){t.exports=e("@cloud/lazyload")},function(t,n){t.exports=e("@cloud/link-to")},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(12);var o=i(n(13)),l=i(n(5)),c=n(14),u=i(n(15)),h=i(n(6)),d=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),(0,a.default)(this,"reportedBannerIndexs",[]),(0,a.default)(this,"bannerQuantity",void 0),(0,a.default)(this,"reportQueue",[]),this.$el=$(t),this.init(),this.bindEvents()}return(0,s.default)(e,[{key:"init",value:,{key:"initBiParam",value:function(){var e=window.localStorage&&window.localStorage.getItem("ua"),t=this.getCustomerCookie("ua")||e||"",n=this.$el.find(".carousel-slide");n.each((),this.bannerQuantity=n.length}},{key:"initCarousel",value:function(){var e=this,t=this.$el.find(".banner-container"),n=function(){var n=function(e){var t=h.default.getCookie("hotwhale");e.find("[data-src]").each((function(){var e=$(this),n=e.attr("data-src");"VIDEO"===this.tagName&&t?e.removeAttr("data-src"):"IMG"===this.tagName||"VIDEO"===this.tagName?(e.attr("src",n),(0,c.isIE)()||e.css("opacity",1),e.removeAttr("data-src")):e.css({"background-image":"url("+n+")"})}))},i=new o.default(t.get(0),{effect:"none",speed:700,loop:!0,autoplay:window.swiperTime||5e3,onIndicatorsRender:function(e,t,n){var i="banner_slideBullets_"+(n+1);return t.replace('">','" bi_name="'+i+'"><span></span>')},beforeSlide:function(e){e.$startSlide.find("[data-exit-animation]").each(();var t=e.$targetSlide[0].querySelector("video");try{t&&t.load()}catch(e){console.error("video play error",e)}e.$startSlide.find("[data-exit-transition]").each((function(){var e=$(this),t=e.attr("data-exit-transition"),n=e.attr("data-enter-transition");n&&e.removeClass(n),e.addClass(t)}))},afterSlide:function(e){n(i.$currentSlide),n(i.$currentSlide.next());var t=function(e,t,n){var i=$(e),r=i.attr(t);i.toggleClass(r,n)};e.$targetSlide.find("[data-animation]").each((function(){t(this,"data-animation",!0)})),e.$startSlide.find("[data-animation]").each((function(){t(this,"data-animation",!1)})),e.$startSlide.find("[data-enter-animation]").each((function(){t(this,"data-enter-animation",!1)})),e.$targetSlide.find("[data-enter-animation]").each((function(){t(this,"data-enter-animation",!0)})),e.$startSlide.find("[data-exit-animation]").each((function(){t(this,"data-exit-animation",!1)})),e.$startSlide.find("[data-exit-transition]").each((function(){t(this,"data-exit-transition",!1)})),e.$targetSlide.find("[data-enter-transition]").each(()}});i.$indicatorWrapper.on("mouseenter",(function(){i.pause()})).on("mouseleave",(function(){i.play()})),n(i.$currentSlide),n(i.$currentSlide.next()),e.initReport(i,"pc")},i=function(){t.addClass("por-carousel").children(".carousel-wrapper").addClass("por-carousel-wrapper").find(".carousel-slide").addClass("por-carousel-slide").each((function(){var e=$(this),t=e.attr("data-img"),n=e.find("a").attr("href"),i=e.find("a").attr("bi_name"),r=e.find(".banner-text-mb");r.attr("mbtitle")&&r.find("h5").text(r.attr("mbtitle")),r.attr("mbdesc")&&r.find("p").text(r.attr("mbdesc")),e.html('<a href="'.concat(n,'" target="_blank" bi_name="').concat(i,'" style="background-image:url(').concat(t,')"></a>')).find("a").append(r)})),t.addClass("init-img"),t.porCarousel({speed:800,autoplay:!0,pagination:!0,loop:!0});var n=t.data("por.carousel");e.initReport(n,"mb")};(0,l.default)(769)?n():i()}},{key:"initAnimation",value:function(){this.$el.find(".banner-content-inner").each((function(e,t){var n=$(t);n.removeData("frameAnimation");var i=n.data("frameAnimation");if(!i){var r=n.siblings(".banner-frames-bg").get(0),s=$(r);s.attr("data-src")&&(s.css({"background-image":"url("+s.attr("data-src")+")"}),s.removeAttr("data-src")),s.css("background-position-y","0px"),r&&(i=new u.default(n.siblings(".banner-frames-bg").get(0),{useImage:!1,startFrame:0,endFrame:45,interval:1e3/60}))}var a=!1;n.off("mousemove"),n.on("mousemove",(function(e){if(!a){var t=(window.innerWidth-1440)/2,n=(window.innerWidth,e.clientX);if(a=!0,n<t+742)i.playToByTween(0);else if(n>t+1440-120)i.playToByTween(45);else{var r=Math.floor((n-t-742)/1058*45);i.playToByTween(r)}setTimeout((function(){a=!1}),200)}})),n.on("mouseleave",(function(e){i.playToByTween(23)}))}))}},{key:"updateFrames",value:,{key:"initProducts",value:function(){var e=1e3/60;this.$el.find(".banner-product").each((function(){var t;$(this).on("mouseenter",(function(){var n=$(this).find("i"),i=parseInt(n.attr("data-current"))||0,r=n.innerHeight();clearInterval(t),t=setInterval((function(){n.attr("data-current",i),n.css({"background-position-y":i*r*-1}),i++>=28&&(clearInterval(t),t=null)}),e)})).on("mouseleave",(function(){var n=$(this).find("i"),i=parseInt(n.attr("data-current"))||0,r=n.innerHeight();clearInterval(t),t=setInterval((function(){n.attr("data-current",i),n.css({"background-position-y":i*r*-1}),i--<=0&&(clearInterval(t),t=null)}),e)}))}))}},{key:"initReport",value:function(e,t){var n=this;({pc:function(){var t=function(){n.notifyReportQueue(),n.reportedBannerIndexs.length>=n.bannerQuantity||n.isBannerInView()&&n.reportBySlide(e.$currentSlide.get(0))};e.addEvent("afterSlide",(),$(window).scroll((function(){t()})),t()},mb:function(){var t=function(){n.notifyReportQueue(),n.reportedBannerIndexs.length>=n.bannerQuantity||n.isBannerInView()&&n.reportBySlide(e.$currentSlide.get(0))};e.$element.on("slideChange",(function(){t()})),$(window).scroll((),t()}})[t]()}},{key:"report",value:,{key:"notifyReportQueue",value:function(){if(window.onEvent&&0!==this.reportQueue.length){this.reportQueue.forEach((function(e){window.onEvent("www_china_zh-cn_index","view",e.eventLabel,"1",e.params)})),this.reportQueue=[]}}},{key:"reportBySlide",value:function(e){var t=e.getAttribute("bi_param_rec_position");if(-1===this.reportedBannerIndexs.indexOf(t)){this.reportedBannerIndexs.push(t);var n=this.getParams(e),i=$(e).find("a").attr("href"),r="home-banner_".concat(n.rec_position,"_").concat(i);this.report(r,n)}}},{key:"getParams",value:function(e){var t="bi_param_",n={};return Array.from(e.attributes).forEach((function(e){if(0===e.name.indexOf(t)){var i=e.name.substring(9);n[i]=e.value}})),n}},{key:"isBannerInView",value:function(){var e=this.$el.find("#banner-container").get(0).getBoundingClientRect();return!!e&&e.bottom>=e.height/2}},{key:"getCustomerCookie",value:function(e){var t,n;return document.cookie.length>0&&-1!==(t=document.cookie.indexOf(e+"="))?(t=t+e.length+1,-1===(n=document.cookie.indexOf(";",t))&&(n=document.cookie.length),decodeURI(document.cookie.substring(t,n))):""}},{key:"bindEvents",value:function(){}}],[{key:"moduleName",value:function(){return"banner"}}]),e}();t.default=d},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e,t){this.options=$.extend({},{effect:"cover",speed:500,loop:!0,autoplay:5e3,onIndicatorsRender:,t);var n=this;this.$container=$(e),this.$wrapper=this.$container.find(".carousel-wrapper"),this.$slides=this.$wrapper.find(".carousel-slide"),this.$indicatorWrapper=this.$container.find(".carousel-indicator-wrapper"),this.currentIndex=0,this.$currentSlide=this.$slides.eq(this.currentIndex),this.$activeSlide=$(this.$currentSlide),this.events={beforeSlide:this.options.beforeSlide?[this.options.beforeSlide]:[],afterSlide:this.options.afterSlide?[this.options.afterSlide]:[]},r[this.options.effect].init.call(this);var i="";this.$slides.each((function(e){var t="";t=e===n.currentIndex?'<div class="carousel-indicator carousel-indicator-active"></div>':'<div class="carousel-indicator"></div>',i+=n.options.onIndicatorsRender(n,t,e)})),this.$indicatorWrapper.html(i),this.$indicators=this.$indicatorWrapper.children(),this.$indicatorWrapper.on("click",".carousel-indicator",(),this.options.autoplay>0&&(this.playing=this.options.autoplay,this.timeOutToNext(this.playing))},r={cover:{init:function(){this.$container.attr("data-effect","cover"),this.$currentSlide.addClass("carousel-slide-current carousel-slide-active").siblings().removeClass("carousel-slide-current carousel-slide-active"),this.$currentSlide.prevAll().add(this.$currentSlide).css("left",0),this.$currentSlide.nextAll().css("left","100%")},transition:function(e,t){t||(t=function(){});var n=this,i=this.$slides.eq(e),r=this.currentIndex,s=this.$currentSlide,a=function(){i.css({left:"100%"}).addClass("to-top").animate({left:0},n.options.speed,(function(){i.nextAll().css({left:"100%"}),i.removeClass("to-top"),t(n)}))},o=function(){i.prevUntil(s).add(i).css({left:"100%"}).animate({left:0},n.options.speed,(function(){t(n)}))},l=function(){s.prevUntil(i).add(s).css({left:0}).animate({left:"100%"},n.options.speed,(function(){t(n)}))};0===e&&r===this.$slides.length-1?a():e>r?o():e<r&&l(),this.$currentSlide=i.addClass("carousel-slide-current")}},none:{init:function(){this.$container.attr("data-effect","none"),this.$currentSlide.addClass("carousel-slide-current carousel-slide-active").siblings().removeClass("carousel-slide-current carousel-slide-active")},transition:function(e,t){var n=this,i=this.$slides.eq(e);this.$currentSlide.removeClass("carousel-slide-current"),setTimeout((function(){t(n)}),this.options.speed),this.$currentSlide=i.addClass("carousel-slide-current")}}};i.prototype.goto=function(e){var t=this.$slides.eq(e);if(e!==this.currentIndex&&0!==t.length&&!0!==this.sliding){var n=this,i=this.currentIndex,s=[{$startSlide:this.$currentSlide,$targetSlide:t,startIndex:i,targetIndex:e}];this.events.beforeSlide.forEach((function(e){e.apply(n,s)}));this.sliding=!0,this.$currentSlide.removeClass("carousel-slide-current"),r[this.options.effect].transition.call(this,e,(function(e){$(".carousel-slide").removeClass("carousel-slide-active"),e.$activeSlide=t.addClass("carousel-slide-active"),e.sliding=!1,e.events.afterSlide.forEach((function(t){t.apply(e,s)}))})),this.$currentSlide=t.addClass("carousel-slide-current"),this.currentIndex=e,this.activeIndicator(e),this.playing>0&&this.timeOutToNext(this.playing)}},i.prototype.next=function(){var e=this.currentIndex+1;e>this.$slides.length-1&&(e=0),this.goto(e)},i.prototype.prev=i.prototype.play=function(e){e=e>=0?e:this.options.autoplay,this.playing>0||(this.playing=e,this.timeOutToNext(e))},i.prototype.pause=i.prototype.timeOutToNext=function(e){var t=this,n=parseInt(this.$currentSlide.attr("carousel-autoplay"));n&&(e=n),e>0&&(clearTimeout(this.playTimerIndex),this.playTimerIndex=setTimeout((function(){t.next()}),e))},i.prototype.activeIndicator=function(e){this.$indicators.removeClass("carousel-indicator-active").eq(e).addClass("carousel-indicator-active")},i.prototype.addEvent=t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIE=function(){var e=navigator.userAgent;return-1!==e.indexOf("compatible")&&-1!==e.indexOf("MSIE")||-1!==e.indexOf("Edge")||-1!==e.indexOf("Trident")&&-1!==e.indexOf("rv:11.0")}},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4)),o=i(n(16));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}ar u={useImage:!1,auto:!0,frameWidth:null,frameHeight:null,spacing:0,interval:40,startFrame:0,endFrame:null,loopStartFrame:null,loopEndFrame:null},h=void 0!==document.body.style.transform?"transform":"webkitTransform";t.default=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,r.default)(this,e),(0,a.default)(this,"element",void 0),(0,a.default)(this,"image",void 0),(0,a.default)(this,"opts",void 0),(0,a.default)(this,"currentFrame",0),(0,a.default)(this,"timerIndex",null),(0,a.default)(this,"hasLoopFrames",void 0),(0,a.default)(this,"animating",void 0),(0,a.default)(this,"tween",void 0),this.element=t,this.opts=c(c({},u),n),this.animating=!1,this.fixOpts(),this.opts.useImage&&(this.image=this.element.querySelector("img")),this.opts.auto&&this.auto()}return(0,s.default)(e,[{key:"auto",value:,{key:"play",value:,{key:"playForward",value:function(e){this.currentFrame>this.opts.endFrame||this.playTo(this.opts.endFrame,e)}},{key:"playBackward",value:function(e){this.currentFrame<this.opts.startFrame||this.playTo(this.opts.startFrame,e)}},{key:"playLoopFrames",value:function(){var e=this;this.hasLoopFrames&&(clearInterval(this.timerIndex),this.timerIndex=setInterval((function(){e.currentFrame++,(e.currentFrame<e.opts.loopStartFrame||e.currentFrame>e.opts.loopEndFrame)&&(e.currentFrame=e.opts.loopStartFrame),e.updateElement()}),this.opts.interval))}},{key:"playFromTo",value:,{key:"playTo",value:function(e,t,n){var i=this;if(clearInterval(this.timerIndex),this.currentFrame!==e){this.timerIndex=setInterval((function(){i.currentFrame-e<0?i.currentFrame++:i.currentFrame-e>0&&i.currentFrame--,i.updateElement(),i.currentFrame===e&&(clearInterval(i.timerIndex),t&&t())}),n||this.opts.interval)}}},{key:"playToByTween",value:function(e,t,n){var i=this;this.tween&&this.tween.stop(),this.tween=new o.default.Tween({x:this.currentFrame}),this.tween.to({x:e},t||1e3).easing(o.default.Easing.Cubic.Out).start(),this.tween.onUpdate(();!function t(){i.currentFrame!==e&&(requestAnimationFrame(t),o.default.update())}()}},{key:"pause",value:,{key:"stop",value:,{key:"fixOpts",value:function(){null===this.opts.frameWidth&&(this.opts.frameWidth=this.element.clientWidth),null===this.opts.frameHeight&&(this.opts.frameHeight=this.element.clientHeight),this.hasLoopFrames=this.opts.loopEndFrame>this.opts.loopStartFrame}},{key:"updateElement",value:function(){var e=0===this.currentFrame?0:this.opts.frameHeight*this.currentFrame+this.opts.spacing*this.currentFrame;this.opts.useImage?this.image.style[h]="translateY("+-e+"px)":this.element.style.backgroundPositionY=-e+"px"}}]),e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Easing",(function(){return r})),n.d(t,"Group",(function(){return a})),n.d(t,"Interpolation",(function(){return o})),n.d(t,"Sequence",(function(){return l})),n.d(t,"Tween",(function(){return u})),n.d(t,"VERSION",(function(){return h})),n.d(t,"add",(function(){return g})),n.d(t,"default",(function(){return x})),n.d(t,"getAll",(function(){return f})),n.d(t,"nextId",(function(){return d})),n.d(t,"now",(function(){return s})),n.d(t,"remove",(function(){return v})),n.d(t,"removeAll",(function(){return m})),n.d(t,"update",(function(){return y}));var i,r=Object.freeze({Linear:Object.freeze({None:In:function(e){return this.None(e)},Out:function(e){return this.None(e)},InOut:),Quadratic:Object.freeze({In:function(e){return e*e},Out:InOut:),Cubic:Object.freeze({In:Out:InOut:),Quartic:Object.freeze({In:Out:InOut:),Quintic:Object.freeze({In:Out:InOut:),Sinusoidal:Object.freeze({In:Out:InOut:function(e){return.5*(1-Math.sin(Math.PI*(.5-e)))}}),Exponential:Object.freeze({In:Out:InOut:),Circular:Object.freeze({In:Out:InOut:),Elastic:Object.freeze({In:Out:InOut:),Back:Object.freeze({In:function(e){var t=1.70158;return 1===e?1:e*e*((t+1)*e-t)},Out:function(e){var t=1.70158;return 0===e?0:--e*e*((t+1)*e+t)+1},InOut:),Bounce:Object.freeze({In:Out:InOut:),generatePow:function(e){return void 0===e&&(e=4),e=(e=e<Number.EPSILON?Number.EPSILON:e)>1e4?1e4:e,{In:function(t){return Math.pow(t,e)},Out:InOut:function(t){return t<.5?Math.pow(2*t,e)/2:(1-Math.pow(2-2*t,e))/2+.5}}}}),s=function(){return performance.now()},a=),o={Linear:Bezier:CatmullRom:Utils:{Linear:Bernstein:Factorial:(i=[1],,CatmullRom:},l=),c=new a,u=function(){function e(e,t){void 0===t&&(t=c),this._object=e,this._group=t,this._isPaused=!1,this._pauseStart=0,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._isDynamic=!1,this._initialRepeat=0,this._repeat=0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=0,this._easingFunction=r.Linear.None,this._interpolationFunction=o.Linear,this._chainedTweens=[],this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._id=l.nextId(),this._isChainStopped=!1,this._propertiesAreSetUp=!1,this._goToEnd=!1}return e.prototype.getId=function(){return this._id},e.prototype.isPlaying=function(){return this._isPlaying},e.prototype.isPaused=function(){return this._isPaused},e.prototype.to=function(e,t){if(void 0===t&&(t=1e3),this._isPlaying)throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");return this._valuesEnd=e,this._propertiesAreSetUp=!1,this._duration=t,this},e.prototype.duration=function(e){return void 0===e&&(e=1e3),this._duration=e,this},e.prototype.dynamic=function(e){return void 0===e&&(e=!1),this._isDynamic=e,this},e.prototype.start=function(e,t){if(void 0===e&&(e=s()),void 0===t&&(t=!1),this._isPlaying)return this;if(this._group&&this._group.add(this),this._repeat=this._initialRepeat,this._reversed)for(var n in this._reversed=!1,this._valuesStartRepeat)this._swapEndStartRepeatValues(n),this._valuesStart[n]=this._valuesStartRepeat[n];if(this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._isChainStopped=!1,this._startTime=e,this._startTime+=this._delayTime,!this._propertiesAreSetUp||t){if(this._propertiesAreSetUp=!0,!this._isDynamic){var i={};for(var r in this._valuesEnd)i[r]=this._valuesEnd[r];this._valuesEnd=i}this._setupProperties(this._object,this._valuesStart,this._valuesEnd,this._valuesStartRepeat,t)}return this},e.prototype.startFromCurrentValues=e.prototype._setupProperties=function(e,t,n,i,r){for(var s in n){var a=e[s],o=Array.isArray(a),l=o?"array":typeof a,c=!o&&Array.isArray(n[s]);if("undefined"!==l&&"function"!==l){if(c){if(0===(g=n[s]).length)continue;for(var u=[a],h=0,d=g.length;h<d;h+=1){var p=this._handleRelativeValue(a,g[h]);if(isNaN(p)){c=!1,console.warn("Found invalid interpolation list. Skipping.");break}u.push(p)}c&&(n[s]=u)}if("object"!==l&&!o||!a||c)(void 0===t[s]||r)&&(t[s]=a),o||(t[s]*=1),i[s]=c?n[s].slice().reverse():t[s]||0;else{t[s]=o?[]:{};var f=a;for(var m in f)t[s][m]=f[m];i[s]=o?[]:{};var g=n[s];if(!this._isDynamic){var v={};for(var m in g)v[m]=g[m];n[s]=g=v}this._setupProperties(f,t[s],g,i[s],r)}}}},e.prototype.stop=e.prototype.end=e.prototype.pause=e.prototype.resume=e.prototype.stopChainedTweens=e.prototype.group=function(e){return void 0===e&&(e=c),this._group=e,this},e.prototype.delay=e.prototype.repeat=function(e){return void 0===e&&(e=0),this._initialRepeat=e,this._repeat=e,this},e.prototype.repeatDelay=function(e){return this._repeatDelayTime=e,this},e.prototype.yoyo=e.prototype.easing=function(e){return void 0===e&&(e=r.Linear.None),this._easingFunction=e,this},e.prototype.interpolation=function(e){return void 0===e&&(e=o.Linear),this._interpolationFunction=e,this},e.prototype.chain=e.prototype.onStart=function(e){return this._onStartCallback=e,this},e.prototype.onEveryStart=function(e){return this._onEveryStartCallback=e,this},e.prototype.onUpdate=function(e){return this._onUpdateCallback=e,this},e.prototype.onRepeat=function(e){return this._onRepeatCallback=e,this},e.prototype.onComplete=function(e){return this._onCompleteCallback=e,this},e.prototype.onStop=function(e){return this._onStopCallback=e,this},e.prototype.update=function(e,t){if(void 0===e&&(e=s()),void 0===t&&(t=!0),this._isPaused)return!0;var n,i,r=this._startTime+this._duration;if(!this._goToEnd&&!this._isPlaying){if(e>r)return!1;t&&this.start(e,!0)}if(this._goToEnd=!1,e<this._startTime)return!0;!1===this._onStartCallbackFired&&(this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),!1===this._onEveryStartCallbackFired&&(this._onEveryStartCallback&&this._onEveryStartCallback(this._object),this._onEveryStartCallbackFired=!0),i=(e-this._startTime)/this._duration,i=0===this._duration||i>1?1:i;var a=this._easingFunction(i);if(this._updateProperties(this._object,this._valuesStart,this._valuesEnd,a),this._onUpdateCallback&&this._onUpdateCallback(this._object,i),1===i){if(this._repeat>0){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat)this._yoyo||"string"!=typeof this._valuesEnd[n]||(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo&&this._swapEndStartRepeatValues(n),this._valuesStart[n]=this._valuesStartRepeat[n];return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=e+this._repeatDelayTime:this._startTime=e+this._delayTime,this._onRepeatCallback&&this._onRepeatCallback(this._object),this._onEveryStartCallbackFired=!1,!0}this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,l=this._chainedTweens.length;o<l;o++)this._chainedTweens[o].start(this._startTime+this._duration,!1);return this._isPlaying=!1,!1}return!0},e.prototype._updateProperties=e.prototype._handleRelativeValue=e.prototype._swapEndStartRepeatValues=e}(),h="20.0.3",d=l.nextId,p=c,f=p.getAll.bind(p),m=p.removeAll.bind(p),g=p.add.bind(p),v=p.remove.bind(p),y=p.update.bind(p),x={Easing:r,Group:a,Interpolation:o,now:s,Sequence:l,nextId:d,Tween:u,VERSION:h,getAll:f,removeAll:m,add:g,remove:v,update:y}},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(18);var o=i(n(5)),l=i(n(19)),c=i(n(20));ar h=(0,l.default)(300),d=function(e){return e.INCREASE="increase",e.DECREASE="decrease",e}(d||{}),p=p||{}),f={index:0,transWidth:0},m=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),(0,a.default)(this,"tabPosition",void 0),(0,a.default)(this,"tabIconWidth",void 0),(0,a.default)(this,"tabArrowDiffer",0),(0,a.default)(this,"tabWidthArr",[]),(0,a.default)(this,"direction",void 0),this.$el=$(t),this.direction="ar-MENA"===$("html").attr("lang")?p.RTL:p.LTR,this.bindEvents(),this.initTabs()}return(0,s.default)(e,[{key:"formatDataHost",value:function(e){return e.map((function(e){var t;return null!==(t=window)&&void 0!==t&&t.formatUrlHost&&(e.href=window.formatUrlHost(e.href)),e}))}},{key:"bindEvents",value:function(){(0,o.default)(768)&&this.bindEventsPc()}},{key:"bindEventsPc",value:function(){var e=this.$el,t=function(t){var n=$(t);n.addClass("active").siblings().removeClass("active");var i=n.attr("data-target");e.find(".product-content").filter('[data-name="'+i+'"]').addClass("show").siblings().removeClass("show")};e.find(".product-nav-menus").on("click",".product-nav-menu",(function(e){var n=this,i=c.default.getMoveAngle();$(e.relatedTarget).closest(".product-nav-menu").length>0&&i>-75&&i<75?h((function(){t(n)})):h((,0)}))}},{key:"bindEventsMb",value:function(){this.$el.on("click",".product-m-tab > a",(function(){var e=$(this);if(!e.hasClass("active")){var t,n,i=e.index(),r=e.offset().top-$(".header-container").outerHeight(),s=e.closest(".product-mb-container").find(".product-m-tab a"),a=s.filter(".active").parent().next(".product-m-tab-wrapper"),o=e.parent().next(".product-m-tab-wrapper"),l=o.children(".product-m-tab-content").eq(i);o.show().height(o.height()),s.removeClass("active"),e.addClass("active"),l.addClass("show").siblings().removeClass("show"),n=(t=o).children(".show").outerHeight(),t.height(n),a[0]!==o[0]&&(a.offset().top<o.offset().top&&(r-=a.height()),function(e){var t=!1;e.one("transitionend",().height(0),setTimeout((,350)}(a)),$("html,body").animate({scrollTop:r})}}))}},{key:"initTabs",value:function(){var e=this.$el.find(".product-nav"),t=this.$el.find(".product-nav-menus");this.initIndex(t,e),this.initTabIcon(t,e),this.bindTabEvents(t)}},{key:"initIndex",value:function(e,t){var n=this;this.tabPosition={},f);var i=e.find(".product-nav-menu"),r=t.width(),s=0;i.each((function(e){var t=i.eq(e).width();s+=i.eq(e).width(),n.tabWidthArr.push(t),s>r&&0!==n.tabPosition.index&&(n.tabPosition.index=e)}))}},{key:"initTabIcon",value:function(e,t){var n=t.find(".por-icon-left"),i=t.find(".por-icon-right");n.hide(),i.hide(),this.tabArrowDiffer=e.width()-t.width(),this.tabIconWidth=i.width(),this.tabArrowDiffer>0&&i.show()}},{key:"calcWidth",value:function(e){return e===d.INCREASE&&this.tabPosition.index<=this.tabWidthArr.length-1&&(this.tabPosition.transWidth+=this.tabWidthArr[this.tabPosition.index],this.tabPosition.transWidth=Math.min(this.tabPosition.transWidth+this.tabIconWidth,this.tabArrowDiffer),this.tabPosition.index++),e===d.DECREASE&&this.tabPosition.index>0&&(this.tabPosition.index--,this.tabPosition.transWidth-=this.tabWidthArr[this.tabPosition.index],this.tabPosition.transWidth=Math.max(this.tabPosition.transWidth-this.tabIconWidth,0)),this.tabPosition.transWidth}},{key:"menuAnimate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=this.$el.find(".product-nav-menus"),i={};i[this.direction===p.RTL?"marginRight":"marginLeft"]=e,n.stop().animate(i,t)}},{key:"bindTabEvents",value:function(e){var t=this,n=this.$el.find(".product-nav"),i=n.find(".por-icon-left"),r=n.find(".por-icon-right");r.on("click",(function(){var e=t.calcWidth(d.INCREASE);t.menuAnimate(-e,(function(){t.tabPosition.transWidth>=t.tabArrowDiffer&&r.hide(),i.show()}))})),i.on("click",(function(){var e=t.calcWidth(d.DECREASE);t.menuAnimate(-e,(function(){t.tabPosition.transWidth<=0&&i.hide(),r.show()}))})),$(window).on("resize",(function(){t.tabPosition.transWidth=0,t.menuAnimate(0),t.initIndex(e,n),t.initTabIcon(e,n)}))}}],[{key:"moduleName",value:function(){return"product"}}]),e}();t.default=m},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t;return function(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;"number"==typeof t&&clearTimeout(t),t=setTimeout(n,i)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=[];$(document).mousemove((function(e){var t={x:e.pageX,y:e.pageY};if(0===i.length)for(var n=0;n<2;n++)i.push(t);i.push(t),i.length>3&&i.shift()}));t.default={getDirectionAngle:function(e,t,n,i){var r=i-t,s=n-e,a=Math.atan(r/s)/Math.PI*180;return s<0&&r>0?a=180+a:s<0&&r<0&&(a-=180),a},getMoveAngle:function(){var e=i[0],t=i[i.length-1];return e?this.getDirectionAngle(e.x,e.y,t.x,t.y):0},getMouseLocus:function(){return i}}},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(22);var o=i(n(6)),l=n(43),c=i(n(5)),u=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),(0,a.default)(this,"$solutionTabs",void 0),(0,a.default)(this,"swiper",void 0),this.$el=$(t),this.$solutionTabs=this.$el.find(".solutions-tabs"),this.loadImage(),(0,c.default)(3e3)?this.initSwiper(2.3):(0,c.default)(2200)?this.initSwiper(2):(0,c.default)(1025)?this.initSwiper(1.6):(0,c.default)(769)?this.initSwiper(1.28):this.initCarousel()}return(0,s.default)(e,[{key:"initCarousel",value:function(){this.$el.find(".por-carousel").porCarousel({loop:!0,pagination:!0}),this.$el.find(".por-btn-large").removeClass("por-btn-light").addClass("por-btn-dark")}},{key:"initSwiper",value:function(e){var t=this;this.swiper=new l.Swiper(".swiper-container",{modules:[l.Navigation,l.Autoplay],loop:!0,allowTouchMove:!1,autoplay:{delay:5e3,disableOnInteraction:!1},slidesPerView:e,centeredSlides:!0,loopAdditionalSlides:2,navigation:{nextEl:".por-carousel-next",prevEl:".por-carousel-prev"},allowSlideNext:!0,allowSlidePrev:!0,on:{init:function(){var e=t.$el.find(".swiper-slide.swiper-slide-active");t.playVideo(e)},slideChange:slideChangeTransitionStart:function(e){var n=t.$el.find(".swiper-slide.swiper-slide-active");t.playVideo(n),t.$solutionTabs.find(".solutions-tab-item").removeClass("active").eq(e.realIndex).addClass("active")}}}),this.bindSwiperEvent()}},{key:"loadImage",value:function(){var e=this.$el.find(".solutions-card .solution-bg");e.hasClass("lazyload")&&(e.each((function(t){var n=e.eq(t),i=(0,c.default)(769)?n.attr("pc-src"):n.attr("mb-src");n.css("background-image","url(".concat(i,")"))})),e.removeClass("lazyload"))}},{key:"playVideo",value:function(e){if(!o.default.getCookie("hotwhale")){var t=e.find(".solution-video");if(!t.attr("src")){var n=t.attr("data-src");t.attr("src",n),t.removeAttr("data-src")}var i=t[0];try{i&&i.load()}catch(e){console.log("video play error",e)}}}},{key:"pauseVideo",value:function(e){var t=e.find(".solution-video")[0];try{t&&t.pause()}catch(e){console.log("video play error",e)}}},{key:"bindSwiperEvent",value:function(){var e=this;this.$solutionTabs.on("click",".solutions-tab-item a",(function(t){var n=$(t.target).closest(".solutions-tab-item"),i=e.$solutionTabs.find(".solutions-tab-item").index(n);e.swiper.slideToLoop(i)}))}}],[{key:"moduleName",value:function(){return"solutions"}}]),e}();t.default=u},function(e,t,n){},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(7);var o=i(n(5)),l=i(n(24)),c=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),this.$el=$(t),this.init(),this.bindEvents()}return(0,s.default)(e,[{key:"init",value:function(){(0,o.default)(1024)&&new l.default("mountNode")}},{key:"bindEvents",value:function(){var e=$(".tab-seletor");e.click((function(){e.removeClass("active"),$(this).addClass("active"),$(".tab-section").removeClass("show"),$(".tab-section[data-name="+$(this).attr("data-key")+"]").addClass("show")}))}}],[{key:"moduleName",value:function(){return"global-site-3d"}}]),e}();t.default=c},function(e,t,n){"use strict";var i=n(1),r=n(25);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=i(n(26)),a=i(n(31)),o=i(n(2)),l=i(n(3)),c=i(n(4));n(7);var u=n(0)),h=n(32),d=i(n(33));efault=function(){function e(t){(0,o.default)(this,e),(0,c.default)(this,"$el",void 0),(0,c.default)(this,"camera",void 0),(0,c.default)(this,"scene",void 0),(0,c.default)(this,"renderer",void 0),(0,c.default)(this,"countryInfos",void 0),(0,c.default)(this,"controls",void 0),(0,c.default)(this,"raycaster",void 0),(0,c.default)(this,"tempV",void 0),(0,c.default)(this,"cameraToPoint",void 0),(0,c.default)(this,"cameraPosition",void 0),(0,c.default)(this,"normalMatrix",void 0),(0,c.default)(this,"mouse",void 0),(0,c.default)(this,"frames",void 0),(0,c.default)(this,"autoRotate",void 0),this.$el="string"==typeof t?document.getElementById(t):t,this.tempV=new u.Vector3,this.cameraToPoint=new u.Vector3,this.cameraPosition=new u.Vector3,this.normalMatrix=new u.Matrix3,this.frames=1,this.autoRotate=!(0,d.default)(),this.init()}var t,n;return(0,l.default)(e,[{key:"init",value:function(){this.initBase(),this.drawEarth(),this.camera.position.x=1.8,this.camera.position.y=1,this.camera.position.z=2,this.controls.update(),this.mouse={x:0,y:0},this.initLabel(),this.initRender()}},{key:"initBase",value:function(){var e=this;this.scene=new u.Scene,this.camera=new u.OrthographicCamera(-1.04,1.04,1.04,-1.04,1,1e3),this.renderer=new u.WebGLRenderer({canvas:document.querySelector("#earth"),antialias:!0,precision:"highp",alpha:!0}),this.renderer.setPixelRatio(devicePixelRatio),this.renderer.setSize(this.$el.clientWidth,this.$el.clientHeight),this.renderer.setClearColor(16777215,0),this.controls=new h.OrbitControls(this.camera,this.renderer.domElement),this.controls.enableZoom=!1,this.controls.enableDamping=!0,this.controls.dampingFactor=.05,this.controls.autoRotate=this.autoRotate,this.controls.autoRotateSpeed=.1,this.controls.enablePan=!1,this.camera.rotation.y=1,this.raycaster=new u.Raycaster,setInterval((function(){var t=24/e.frames>.5?.5:24/e.frames;e.controls.autoRotateSpeed=t,e.frames=1}),1e3)}},{key:"initLabel",value:,{key:"updateLabels",value:function(){if(this.countryInfos){this.normalMatrix.getNormalMatrix(this.camera.matrixWorldInverse),this.camera.getWorldPosition(this.cameraPosition);var e,t=f(this.countryInfos);try{for(t.s();!(e=t.n()).done;){var n=e.value,i=n.position,r=n.elem;if(n.area<0)r.style.display="none";else{this.tempV.copy(i),this.tempV.applyMatrix3(this.normalMatrix),this.cameraToPoint.copy(i),this.cameraToPoint.applyMatrix4(this.camera.matrixWorldInverse).normalize();var s=this.tempV.dot(this.cameraToPoint);if(s>0)r.style.display="none";else{r.style.opacity=s>-.1&&s<=0?-10*s:s>0&&s<=.1?10*s:1,r.style.display="",this.tempV.copy(i),this.tempV.project(this.camera);var a=(.5*this.tempV.x+.5)*this.$el.clientWidth,o=(-.5*this.tempV.y+.5)*this.$el.clientHeight;r.style.transform="translate(-50%, -50%) translate(".concat(a,"px,").concat(o,"px) translateZ(0)"),r.style.zIndex=1e6*this.tempV.z+99e4|0}}}}catch(e){t.e(e)}finally{t.f()}}}},{key:"loadJSON",value:(n=(0,a.default)(s.default.mark((function e(t){return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,n){var i={url:t,success:error:败"))}};$.ajax(i)})));case 1:case"end":return e.stop()}})ments)})},{key:"loadCountryData",value:(t=(0,a.default)(s.default.mark((function e(){var t,n,i,r,a,o,l,c,h,d,p,m,g,v,y,x,_,b,w,M,S,T,E,C,A,P,L;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,this.countryInfos=JSON.parse(this.$el.getAttribute("data-source")),e.next=8;break;case 4:return e.prev=4,e.t0=e.catch(0),this.countryInfos=[],e.abrupt("return");case 8:t=1.5*Math.PI,n=Math.PI,i=new u.Object3D,r=new u.Object3D,i.add(r),(a=new u.Object3D).position.z=1,r.add(a),o=document.querySelector("#labels"),l=f(this.countryInfos);try{for(l.s();!(c=l.n()).done;)h=c.value,d=h.lat,p=h.lon,m=h.min,g=h.max,v=h.name,y=h.state,x=void 0===y?"":y,_=h.direction,b=void 0===_?"":_,h.zone,w=h.line,M=void 0===w?"":w,S=h.desc,T=void 0===S?"":S,i.rotation.y=u.MathUtils.degToRad(p)+t,r.rotation.x=u.MathUtils.degToRad(d)+n,a.updateWorldMatrix(!0,!1),E=new u.Vector3,a.getWorldPosition(E),h.position=E,C=g[0]-m[0],A=g[1]-m[1],P=C*A,h.area=P,(L=document.createElement("div")).classList.add("earth-label"),L.classList.add("server"),"rec"===x&&L.classList.add("rec"),L.innerHTML='<div class="labelText '.concat(b," ").concat(M,'">\n            <p class="label-title">').concat(v,'</p>\n            <p class="label-desc">').concat(T||"",'</p>\n            </div>\n            <div class="server-base ').concat(x,'"></div>\n            '),o.appendChild(L),h.elem=L}catch(e){l.e(e)}finally{l.f()}case 19:case"end":return e.stop()}}),e,this,[[0,4ments)})},{key:"onWindowResizeeight)}},{key:"initLight",value:function(){}},{key:"drawEarth",value:function(){var e=(new u.TextureLoader).load(this.$el.getAttribute("data-map")||"https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/homePage/earth/ditu.jpg");e.anisotropy=10,e.generateMipmaps=!1,e.wrapS=e.wrapT=u.ClampToEdgeWrapping,e.minFilter=u.NearestFilter;var t=new u.SphereGeometry(1,64,64),n=new u.MeshBasicMaterial({color:16777215,map:e,transparent:!0}),i=new u.Mesh(t,n);this.scene.add(i)}},{key:"render",value:function(){var e=this;this.controls.autoRotate=this.autoRotate,this.frames++,this.raycaster.setFromCamera(this.mouse,this.camera);for(var t=this.raycaster.intersectObjects(this.scene.children),n=0;n<t.length;n++)this.controls.autoRotate=!1;if(this.resizeRendererToDisplaySize(this.renderer)){var i=this.renderer.domElement;this.camera.aspect=i.clientWidth/i.clientHeight,this.camera.updateProjectionMatrix()}this.updateLabels(),this.autoRotate&&(this.controls.update(),this.renderer.render(this.scene,this.camera)),requestAnimationFrame((function(){return e.render()}))}},{key:"initRender",value:function(){var e=this;this.render(),window.addEventListener("mousemove",(function(t){var n=e.$el.getBoundingClientRect().left,i=e.$el.getBoundingClientRect().top;e.mouse.x=(t.clientX-n)/e.$el.offsetWidth*2-1,e.mouse.y=-(t.clientY-i)/e.$el.offsetHeight*2+1}),!1),$("#mountNode").on("click",(function(){e.autoRotate=!0,$("#mountNode").css("background","none")}))}},{key:"resizeRendererToDisplaySize",value:function(e){var t=e.domElement,n=t.clientWidth,i=t.clientHeight,r=t.width!==n||t.height!==i;return r&&e.setSize(n,i,!1),r}}]),e}()},function(e,t,n){"use strict";function i(t){return e.exports=i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,i(t)}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.e=n(27)},function(e,t,n){"use strict";(function(e){var t=n(29)(n(30)),i=function(e){var n,i=Object.prototype,r=i.hasOwnProperty,s=Object.definePr.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStr),e[t]}try{u({},"")}catg:e}}}e.wrap=h;var p="suspendedStart",f="suspendedYield",m="executing",g="completed",v={};function y(){}function x(){}function _(){}var b={};u(b,o,(function(){return this}));var w=Object.getPrototypeOf,M=w&&w(w(I([])));M&&M!==i&&r.call(M,o)&&(b=M);var S=_.prototype=y.prototype=Object.cr}))}))}function E(e,n){function i(s,a,o,l){var c=d(e[s],e,a);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"===(0,t.default)(h)&&r.call(h,"__await")?n.resolve(h.__await).then((function(e){i("next",e,e,o,l)})):n.resolve(he,e,o,l)}))}l(c.arg)}var a;s(this,"_invoke"r)}return x.prototype=_,s(S,"constructor",{value:_,configurable:!0}),s(_,"constructor",{value:x,configurable:!0}),x.displayName=u(_,c,"GeneratorFunction"),e.isGeneratorFname))}e(S),e},ait:e}},T(E.prototype),u(E.prototype,l,(function(){return this})),e.AsyncIterator=E,t()}))},T(S),u(S,c,"Generator"),u(S,o,(function(){return this})),u(S,"toString",(function(){return"[object Generator]"}))=!0,e}},e.values=I,R.prototype={constructor:[t]=ns.rval},dispatchExoc)}}}}ete(a)},ct=t),v}(n),v}empt")},delegag=n),v}},e}("object"===(0,t.default)(e)?e.exports:{});try{regeneratorRuntime=i}catch(e){"object"===("undefined"==typeof globalThis?"undefined":(0,t.default)(globalThis))?globalThis.regeneratorRuntime=i:Function("r","regeneratorRuntime = r")(i)}}).call(this,n(2xports},function(e,t,n){"use s,i(t)}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";n.r(t),n.d(t,"OrbitControls",(function(){return o})),n.d(t,"MapControls",(function(){return l}));var i=n(0);const r={type:"change"},s={type:"start"},a={type:"end"};class o extends i.EventDispatcher{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new i.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:i.MOUSE.ROTATE,MIDDLE:i.MOUSE.DOLLY,RIGHT:i.MOUSE.PAN},this.touches={ONE:i.TOUCH.ROTATE,TWO:i.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return u.phi},this.getAzimuthalAngle=function(){return u.theta},this.getDarget)},this.listenToKeents=e},this.sat.zoom},thio.NONE},this.update=function(){const t=new i.Vector3,s=(new i.Quaternion).setFromUnitVectors(e.up,new i.Vector3(0,1,0)),a=s.clone().invert(),m=new i.Vector3,g=new i.Quaternion,v=2*Math.PI!1,!0)}}(),this.wn",X)};const n=this,o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let l=o.NONE;const c=1e-6,u=new i.Spherical,h=new i.Spherical;let d=1;const p=new i.Vector3;let f=!1;const m=new i.Vector2,g=new i.Vector2,v=new i.Vector2,y=new i.Vector2,x=new i.Vector2,_=new i.Vector2,b=new i.Vector2,w=new i.Vector2,M=new i.Vector2,S=Speed)}function C(e){h.tphi-=e}dd(edd(en=m=!1)}function O(e){m.set(e.clientX,e.cientY)}function N(){if(1===S.length)m.set(S[0].pageX,S[0].pageY);else{const e=.5*(S[0].pageX+S[1].pageX),t=.5*(S[0].pageY+S[1].pageY);m.sew)}function H(e){!1!==n.enabled&&(0===S.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",V),n.domElement.addEventListener("pointerush(e)}(e),"touch"===e.poinent(s)}(e):function(e){let t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case i.MOUSE.DOLLY:if(!1===n.enableZoom)ientY)}(e),l=o.DOLLY;break;case i.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;z(e),l=o.PAN}else{if(!1===n.enableRotate)return;O(e),l=o.ROTATE}break;case i.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;O(e),l=o.ROTATE}else{if(!1===n.enablePan)return;z(e),l=o.PAN}break;default:l=o.NONE}l!==o.NONE&&n.dispatchEvent(s)}(e))}function V(e){!1!==n.enabled&&("touch"===e.poin.NONE}}(e):function(e){switch(l){case o.ROTATE:if(!1===n.enableRotate)date()}(e);break;case o.DOLLY:if(!1===n.enableZoom)date()}(e);break;case o.PAN:if(!1===n.enablePan)date()}(e)}}(e))}function W(e){Y(e),0===S.length&&(n.domElement.releasePointerCapture(e.pointerId),n.domElement.removeEventListener("pointermove",V),n.domElement.removeEventListener("pointerup",W)),n.dispatchEvent(a),l){Y(e)}function j(e){!1!==n.enabled&&!1!==n.enableZoom&&l===o.NONE&&(e.preventDefault(),n.dispatchEdate()}(e),n.dispatchEvent(a))}function X(e){!1!==n.enabled&&!1!==n.enablePan&&function(e){let t=!1;switch(e.code){case n.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?A(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):R(0,n.keyPanSpeed),t=!0;break;case n.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?A(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):R(0,-n.keyPanSpeed),t=!0;break;case n.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?C(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):R(n.keyPanSpeed,0),t=!0;break;case n.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?C(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):R(-n.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),n.updateId]}n.domElement.addEventListener("contextmenu",q),n.domElement.addEventListener("pointerdown",H),n.domElement.addEventListener("pointercancel",$),n.domElement.addEventListener("wheel",j,{passive:!1}),this.update()}}class l extends o{constructor(e,t){super(e,t),this.screenSpacePanning=!1,this.mouseButtons.LEFT=i.MOUSE.PAN,this.mouseButtons.RIGHT=i.MOUSE.ROTATE,this.touches.ONE=i.TOUCH.PAN,this.touches.TWO=i.TOUCH.DOLLY_ROTATE}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=(i=navigator.userAgent,-1!==i.indexOf("compatible")&&-1!==i.indexOf("MSIE")||-1!==i.indexOf("Edge")||-1!==i.indexOf("Trident")&&-1!==i.indexOf("rv:11.0")),t=!1,n=document.createElement("canvas").getContext("webgl");var i;if(n){var r=n.getExtension("WEBGL_debug_renderer_info"),s=n.getParameter(r.UNMASKED_RENDERER_WEBGL);t=!(!s.includes("SwiftShader")&&s)}else t=!0;return e||t}},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4)),o=i(n(5));n(35);var l=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),(0,a.default)(this,"timer",void 0),(0,a.default)(this,"parallax",void 0),this.$el=$(t),this.init()}return(0,s.default)(e,[{key:"init",value:function(){(0,o.default)(1024)&&(this.initTab(),this.initLogoTab(),this.initCarousel(this.$el.find(".customers-tab-content.show")))}},{key:"initTab",value:function(){var e=this;this.$el.on("click",".customers-tab-item",(function(t){var n=$(t.currentTarget),i=n.index(),r=n.closest(".customers-tab").find(".customers-tab-content"),s=r.eq(i);n.addClass("active").siblings().removeClass("active"),r.removeClass("show"),s.addClass("show"),e.setBg(s.find(".customers-logo.active")),e.initCarousel(s)}))}},{key:"initLogoTab",value:function(){var e=this;this.$el.find(".customers-logo").each((function(t,n){var i=$(n),r=i.attr("data-section-bg"),s=$('<div class="customers-bg"></div>');i.data("$bg",s),s.css("background-image","url(".concat(r,")")).appendTo(e.$el.find(".customers-bgs"))}));var t=this.$el.find(".customers-logo").eq(0).attr("data-section-bg");this.$el.find(".customers-bgs").css("background-image","url(".concat(t,")")),this.$el.on("click",".customers-logos .customers-logo",(function(t,n){var i=$(t.currentTarget),r=i.index(),s=i.closest(".customers-tab-content");s.find(".customers-logo").removeClass("active"),setTimeout((function(){i.addClass("active")}),0),s.find(".customers-text").removeClass("show").eq(r).addClass("show"),e.setBg(i),"interval"!==n&&e.initCarousel(s,r)}))}},{key:"setBg",value:function(e){e.length>0&&e.data("$bg").prependTo(this.$el.find(".customers-bgs"))}},{key:"initCarousel",value:function(e,t){var n=t||0,i=e.find(".customers-logos .customers-logo"),r=i.length;if(1===r)return i.hide(),this.setBg(i),void clearInterval(this.timer);this.timer&&clearInterval(this.timer),void 0===t&&i.eq(n).trigger("click","interval"),this.timer=setInterval((function(){++n>=r&&(n=0),e.find(".customers-logos .customers-logo").eq(n).trigger("click","interval")}),5e3)}}],[{key:"moduleName",value:function(){return"customers"}}]),e}();t.default=l},function(e,t,n){},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(37);var o=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),this.$el=$(t),this.init()}return(0,s.default)(e,[{key:"init",value:function(){}}],[{key:"moduleName",value:function(){return"consultation"}}]),e}();t.default=o},function(e,t,n){},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(39);var o=i(n(40)),l=i(n(5)),c=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),this.$el=$(t),this.init()}return(0,s.default)(e,[{key:"init",value:function(){(0,l.default)(1024)&&new o.default({containerSelector:this.$el.get(0),innerSelector:".information-frontground",startTop:600,endTop:100}).$inners.addClass("init-parallax")}}],[{key:"moduleName",value:function(){return"information"}}]),e}();t.default=c},function(eroll")},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3)),a=i(n(4));n(42);var o=function(){function e(t){(0,r.default)(this,e),(0,a.default)(this,"$el",void 0),this.$el=$(t)}return(0,s.default)(e,[{key:"initMb",value:function(){var e=this;this.$el.on("click",".por-collapse-trigger",(function(t){var n=$(t.currentTarget),i=e.$el.find(".por-collapse-trigger.expended"),r=n.offset().top,s=r-$(".header-container").outerHeight();i[0]&&i[0]!==t.currentTarget&&i.offset().top<r&&(s-=i.siblings().height()),$("html,body").animate({scrollTop:s})})),this.$el.on("beforeShow",".por-tab-cohide")}))}}],[{key:"moduleNamempany"}}]),e}();t.def,t,n){},function(e,t,n){"use ])}))}n.r(t),n.d(t,"Swiper",(function(){return Y})),n.d(t,"default",(function(){return Y})),n.d(t,"Virtual",(function(){return Z})),n.d(t,"Keyboard",(function(){return J})),n.d(t,"Mousewheel",(function(){return K})),n.d(t,"Navigation",(function(){return ee})),n.d(t,"Pagination",(function(){return ne})),n.d(t,"Scrollbar",(function(){return ie})),n.d(t,"Parallax",(function(){return re})),n.d(t,"Zoom",(function(){return se})),n.d(t,"Lazy",(function(){return ae})),n.d(t,"Controller",(function(){return oe})),n.d(t,"A11y",(function(){return le})),n.d(t,"History",(function(){return ce})),n.d(t,"HashNavigation",(function(){return ue})),n.d(t,"Autoplay",(function(){return he})),n.d(t,"Thumbs",(function(){return de})),n.d(t,"FreeMode",(function(){return pe})),n.d(t,"Grid",(function(){return fe})),n.d(t,"Manipulation",(function(){return _e})),n.d(t,"EffectFade",(function(){return Se})),n.d(t,"EffectCube",(function(){return Te})),n.d(t,"EffectFlip",(function(){return Ce})),n.d(t,"EffectCoverflow",(function(){return Ae})),n.d(t,"EffectCreative",(function(){return Pe})),n.d(t,"EffectCards",(function(){return Le}));const s={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,creat(){}}),create)=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return r(e,s),e}const o={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},Custn this},addEventListener(){},removeEventListener(){},getComput)=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},mat)=>({}),requestAnimatiut(e,0),cancelAnimato))}d.fn=c.prototype;const p="resize scroll".spl...t)}}f("click"),f("blur"),f("focus"),f("focusin"),f("focusout"),f("keyup"),f("keydown"),f("keypress"),f("submit"),f("change"),f("mousedown"),f("mousemove"),f("mouseup"),f("mouseenter"),f("mouseleave"),f("mouseout"),f("mouseover"),f("touchstart"),f("touchend"),f("touchmove"),f("resize"),f("scroll");const m={addClass:function(...e){const t=u(e.map((e=>e.split(" "))));return this.forEach((e=>{e.classList.add(...t)})),this},remo),this},hngth>0},togg}))})n this},remn this},trn this},tran tn thn this},n this},transi),this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outen null}ll):{}}n nun thi):thin thin tturn!1urns[e]])}n this},n thi:d([])},nextAll:function(e){const t=[];let n=this[0];if(!n)return d([]);for(;n.nextElementSibling;){const i=n.nextElementSibling;e?d(i).is(e)&&t.push(i):t.push(i),n=i}return d(t d([])},n d(t)}n d(t)},n d(t)},0)),tn d(t)},cn d(t)}is,e))}n this}};Object.keys(m).fe:!0})}));}le)),E}var L={updt:n}))},updatss(t)}},updateAuts}px`)},updateSlidesetTop},updateSlidesPlides)},updatePss",r)},updateSlidessses()},updateActiange")},updateClickl{i}`)}}var I={d)),!0},slidt,n,i)},sle,t,n)},sle,t,n)},slie,t,n)},slideToe,t,n)},slideToClicke)}ln U(){},N,!0)};.rows>1;var V={setBrent",l)},getBre|"max"}};var W={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopedSlidesLimit:!0,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClas(t,n)}}const j={eventsEmi)}))e,r,n](e),nn,1),n))})),t}},update:L,translate:{getTr),s||0},setTrate,t)},minTrrid[0]},maxTrgth-1]},tran))),!0}},transition:{setTra",e,t)},transitirt"}))},transind"}))}},slide:I,loop:{loolass))},pFix")},loopndex")}},grabCursor:{setGra"grab"},unsetGraor="")}},events:{attac,"on")},detac"off")}},breakpoints:V,checkOverflow:{checkOlock")}},classes:{addsses()},removesses()}},images:{lo)):c()},preloa!0,t)}}e),q)}}Object.keys(j).f[t]}))}))th)}))}]);var Y=q;function Z({swiper:e,extendParams:t,on:n,emit:i}),b()}t({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}}),e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]},n("befor||a())})),n("setTran):a())})),n("init update re}px`)})),Object.assign(e.virtual,{appe;a(!0)},prepeo(i,0)},remoo(n,0)},removeAlo(0,0)},upd}function re({swiper:e,extendParams:t,on:n}){t({parallax:{enabled:!1}});e}}))}))};n("beforss=!0)})),n("init",(()=>{e.params.parallax.enabled&&r()})),n("setTrand&&r()})),n("setTrans)})(n)}))}function se({swiper:e,extendParams:t,on:n,emit:i}){const r=l();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let s,a,o,c=1,u=!1;const h={$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},d={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},p={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};efineProperty(e.zoom,"scale",{get:(n)}f=e}}),n("init",(()=>{e.params.zoom.enabled&&R()})),n("destroy",(()=>{I()})),n("touch))}(n)})),n("tou)`)}()})),n("doub&&T(n)})),n("transitid&&w()})),n("slideCe&&w()})),Object.assign(e.zoom,{enable:R,disable:I,in:M,out:S,toggle:T})}function ae({swiper:e,extendParams:t,on:n,emit:i}){t({lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}}),e.lazy={};let r=,f))}n("befores=!1)})),n("init",(()=>{e.params.lazy.enabled&&(e.params.lazy.checkInView?c():o())})),n("sy&&o()})),n("scrollbarDragMove resize _freeModeNoMomentumRe):o())})),n("transition):o())})),n("transiti):o())})),n("slideC)&&o()})),n("deClass)})),Object.assign(e.lazy,{load:o,loadInSle({swiper:e,extendParams:t,on:n}){t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});(t,0))};be({effect:"cube",swiper:e,on:n,setTrm}px`)},setTraion(t)},recreate,t)}))},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwrittee})})}function Ae({swiper:e,extendParams:t,on:n}){t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0,transformEl:null}});be({effect:"coverflow",swiper:e,on:n,setTrh:0)}}},setTraion(t)},perspective:()=>!0,overwritss:!0})})}function Pe({swiper:e,extendParams:t,on:n}){t({creativeEffect:{transformEl:null,limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});${e}px`;be({effect:"creative",swiper:e,on:n,setTrigin)}},setTras:!0})},perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function Le({swiper:e,extendParams:t,on:n}){t({cardsEffect:{slideShadows:!0,transformEl:null,rotate:!0,perSlideRotate:2,perSlideOffset:8}});be({effect:"cards",swiper:e,on:n,setTrrm(w)}},setTraEl:n})},pers:()=>!0,overwritsMode})})}},function(e,t,n){"use strict";var i=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2)),s=i(n(3));n(8);var a=i(n(9)),o=i(n(10)),l=i(n(45)),c=i(n(11)),u=i(n(17)),h=i(n(21)),d=i(n(23)),p=i(n(34)),f=i(n(36)),m=i(n(38)),g=i(n(41)),v=i(n(5)),y=[c.default,u.default,h.default,m.default,p.default,d.default,f.default,g.default],x=function(){function e(t){(0,r.default)(this,e);var n=document.querySelectorAll("[data-mod-name]");if(n&&n.length)for(var i=this.getModules(),s=0;s<n.length;s++){var c=n[s];a.default.addListener(c,(function(e){var t=e.getAttribute("data-mod-name"),n=e.getAttribute("data-loaded");i[t]&&!n&&($(e).find(".lazyload-html").each((function(){var e=$(this);window.innerWidth>1023&&e.hasClass("lazyload-html-m")||window.innerWidth<=1023&&e.hasClass("lazyload-html-pc")?e.remove():e.after(this.innerText).remove()})),new i[t](e),e.setAttribute("data-loaded",!0))}))}new a.default(t),o.default.getInstance({env:"prod"}).scan(),(0,v.default)(1024)&&new l.default({selector:".element-entrance",enterDiff:70,outDiff:70,disableOut:!0});var u=(0,v.default)(768)?"pc":"mb";window.addEventListener("resize",(function(){("pc"===u&&!(0,v.default)(768)||"mb"===u&&(0,v.default)(768))&&window.location.reload()}),!1)}return(0,s.default)(e,[{key:"getModules",value:function(){var e={};return y.forEach((function(t){t.moduleName?e[t.moduleName()]=t:new t("body")})),e}}]),e}();t.default=x},function(t,n){t.exports=e("@cloud/element-entrance")}])}));