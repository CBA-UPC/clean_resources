import{delegate as t,domParser as i,forceRepaintSVG as u,fetchJson as m,debug,resolve,onTransitionEndIfExist as h}from"./croco.js";import{LOGGERS as o,INVALID_PARAMETER as l,mediaQuery as p,isRTLEnabled as g,ctaTypes as T}from"./config.js";const L="js-btn-cta";const k=o.DEFAULT;class j{constructor(){this.notifIndex=0;this.notificationList=[];this.$container=i.parseFromString('<aside class="notification-wrapper pointer-none cell-6 cell-m-25 flex flex--col flex-m--justify-end"></aside>',"text/html").body.firstChild;if(g()){this.$container.classList.add("dir-rtl")}document.body.appendChild(this.$container);t(this.$container,`.${L}`,"click",this.closeAfterClick.bind(this))}closeAfterClick(e){const t=e.delegateTarget.closest(".notification");const i=this.notificationList.find(({id})=>id===parseInt(t.dataset.notificationIndex,10));i&&i.close(e,true)}create({icon,title,text,ctaList:t=[],closeCallback:o=null,timeout,group}){this.notifIndex++;const id=this.notifIndex;const l={id:id,icon:icon,title:title,text:text,ctaList:t,timeout:timeout,group:group};l.close=(e,t)=>{e&&e.preventDefault();if(l.closeTimeout){clearTimeout(l.closeTimeout)}const i=this.$container.querySelector(`.js-notif[data-notification-index="${id}"]`);if(i){i.classList.add("dismissed");h(i,()=>{const index=this.notificationList.findIndex(t=>t.id===id);this.notificationList.splice(index,1);this.render(true);if(e&&!t&&o){o()}})}};if(l.timeout){l.startTime=(new Date).getTime();l.remaining=l.timeout;const timeout=duration=>setTimeout(()=>{l.close()},duration);l.pause=(t,delay)=>{l.isPaused=true;l.remaining-=(new Date).getTime()-l.startTime;clearTimeout(l.closeTimeout);if(delay){this.notifTimeout&&clearTimeout(this.notifTimeout);this.notifTimeout=setTimeout(()=>{l.resume()},delay)}this.render(true)};l.resume=()=>{l.isPaused=false;l.startTime=(new Date).getTime();l.closeTimeout=timeout(l.remaining);this.render(true)};l.closeTimeout=timeout(l.remaining)}this.removeNotifications(l);this.notificationList.push(l);this.render();return l}removeNotifications(t){t.group&&this.notificationList.forEach(({group,close})=>{if(group===t.group){close()}})}async render(t=false){const{render:i}=await import("../vendors/lit-html/lit-html.js");const{repeat}=await import("../vendors/lit-html/directives/repeat.js");const{tplNotification:o}=await import("../templates/notifications.tpl.js");i(repeat(this.notificationList,t=>t,o),this.$container);if(!t){u(this.$container)}if(p.mobileAndTablet.matches){const l=document.querySelector(".js-popin-wrapper");if(l){l.classList.toggle("popin-with-notif",this.notificationList.length!==0)}}}}export const notificationSystem=new j;export function buildCtaFromList(t,options,metadata){const context=resolve("context",metadata)||resolve("context",options);return t?t.map(({label,url:o,type},index)=>{const t=async()=>{if(context==="loginPanel"){const{openLoginPanelWithRefresh:t}=await import("../modules/authentication.js");t({authUrl:o,context:metadata?.childContext})}else if(context==="loyalty"||context==="redirect"){location.href=o}else if(["captainWallet","captainWalletQR"].includes(context)){let i=null;i=window.open("");i.opener=null;m(o).then(t=>{if(t.redirectUrl&&i){i.location.href=t.redirectUrl}})}else{m(o).then(t=>{if(t&&t.redirectUrl){location.href=t.redirectUrl}})}};let className="";let i=T.BUTTON;if(index===0&&(type||options?.linkType)==="link"){className="text-white";i=T.LINK}return{label:label,className:`${className} ${L} l-hmargin--large`,type:i,onClick:t}}):null}export async function initNotification(data){const{content,metadata={}}=data;if(!content){debug("error",k,l,data);return}const t={title:content.title,icon:{name:content.icon,className:content.iconClass},text:content.description,timeout:content.timeout,group:content.group};if(content.links){t.ctaList=buildCtaFromList(content.links,content.options,metadata)}if(content.closeLink){t.closeCallback=()=>m(content.closeLink.url)}notificationSystem.create(t)}export function initNotifications(){setTimeout(async()=>{const o=document.querySelectorAll(".js-notification-url");if(o){var l=[];for(let t=0,i=o.length;t<i;t++){const u=o[t].dataset.url;l.push(m(u))}Promise.all(l).then(o=>{if(o){for(let t=0,i=o.length;t<i;t++){const data=o[t];if(data&&data.content){initNotification(data)}}}})}},2e3)}